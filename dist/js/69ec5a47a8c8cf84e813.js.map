{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/Base.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/SpectralAnalyser.worklet.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/TemporalAnalyser.worklet.ts","webpack://JSPatcher/./src/core/objects/dsp/Base.ts","webpack://JSPatcher/./src/core/objects/dsp/Oscilloscope.ts","webpack://JSPatcher/./src/core/objects/dsp/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectroscope.ts","webpack://JSPatcher/./src/core/objects/dsp/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/exports.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.worklet.ts"],"names":["registeredProcessors","Set","AWN","window","AudioWorkletNode","DisposableAudioWorkletNode","port","parameters","destroy","postMessage","close","destroyed","constructor","context","name","options","AudioWorkletRegister","registered","has","processorID","b","add","registerProcessor","audioWorklet","registering","url","processorURL","URL","createObjectURL","Blob","processor","toString","type","addModule","resolves","forEach","f","e","rejects","register","promise","Promise","resolve","reject","push","SpectralAnalyserNode","numberOfInputs","numberOfOutputs","onmessage","id","data","gets","Error","promiseID","SpectralAnalyserRegister","TemporalAnalyserNode","rms","zcr","buffer","TemporalAnalyserRegister","BaseDSP","BaseObject","DefaultDSP","DefaultObject","OscilloscopeUI","CanvasUI","componentDidMount","bgColor","state","ctx","width","height","fullSize","fillStyle","fillRect","paint","continuous","schedulePaint","object","node","stablize","interleaved","range","autoRange","showStats","phosphorColor","hueOffset","textColor","gridColor","seperatorColor","left","bottom","estimatedFreq","sampleRate","audioCtx","clearRect","$","$ui32","t","lock","length","Atomics","load","store","channels","l","min","max","yFactor","i","s","j","Math","abs","strokeStyle","vStep","beginPath","setLineDash","gridChannels","channelHeight","y","moveTo","lineTo","stroke","lineWidth","channelColor","$zerox","period","times","floor","$0","$1","drawL","thresh","isFinite","round","gridX","step","Color","shiftHue","toHSL","maxInStep","minInStep","$j","samp","$step","x","font","textAlign","textBaseline","fillText","toFixed","freqStatY","freq","Oscilloscope","undefined","subscribe","on","inlets","outlets","props","windowFunction","applyBPF","get","indexOf","fftSize","fftOverlap","windowSize","getProp","disconnectAudioInlet","inletAudioConnections","index","connectAudioInlet","inlet","isBang","updateUI","isHot","description","default","enums","isUIState","frameRate","SpectralAnalyser","$requestTimer","startRequest","request","extractorKeys","key","got","outlet","scheduleRequest","setTimeout","clearTimeout","speedLim","lastAmplitudes","allAmplitudes","amplitude","centroid","flatness","flux","kurtosis","skewness","rolloff","slope","spread","SpectroscopeUI","fgColor","hStep","atodb","closePath","fill","Spectroscope","Node","TemporalAnalyser","Spectrogram","AudioWorkletProxyNode","_destroy","call"],"mappings":"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","file":"js/69ec5a47a8c8cf84e813.js","sourcesContent":["export const registeredProcessors = new Set<string>();\n\nconst AWN: typeof AudioWorkletNode = window.AudioWorkletNode ? AudioWorkletNode : null;\ntype DataToProcessor = DisposableAudioWorkletMessageEventDataToProcessor;\nexport class DisposableAudioWorkletNode<F extends Record<string, any> = Record<string, any>, T extends DataToProcessor = DataToProcessor, P extends string = string, O extends any = any> extends AWN {\n    get port(): AudioWorkletMessagePort<F, T> {\n        return super.port;\n    }\n    get parameters(): DisposableAudioParamMap<P> {\n        return super.parameters as DisposableAudioParamMap<P>;\n    }\n    protected readonly options: TypedAudioWorkletNodeOptions<O>;\n    destroyed = false;\n    destroy() {\n        this.port.postMessage({ destroy: true } as T);\n        this.port.close();\n        this.destroyed = true;\n    }\n    constructor(context: BaseAudioContext, name: string, options?: TypedAudioWorkletNodeOptions<O>) {\n        super(context, name, options);\n        this.options = options;\n    }\n}\n\nexport abstract class AudioWorkletRegister {\n    static processorID: string;\n    static processorURL: string;\n    static registeredProcessors = registeredProcessors;\n    static registering = false;\n    static get registered() {\n        return this.registeredProcessors.has(this.processorID);\n    }\n    static set registered(b: boolean) {\n        this.registeredProcessors.add(this.processorID);\n    }\n    static processor: () => void;\n    static Node: new (context: BaseAudioContext, options?: AudioWorkletNodeOptions) => DisposableAudioWorkletNode;\n    private static resolves: { [id: string]: ((value?: void | PromiseLike<void>) => void)[]} = {};\n    private static rejects: { [id: string]: ((reason?: any) => void)[] } = {};\n    private static async registerProcessor(audioWorklet: AudioWorklet) {\n        this.registering = true;\n        try {\n            const url = this.processorURL || window.URL.createObjectURL(new Blob([`(${this.processor.toString()})();`], { type: \"text/javascript\" }));\n            await audioWorklet.addModule(url);\n            this.resolves[this.processorID].forEach(f => f());\n            this.registering = false;\n            this.registered = true;\n        } catch (e) {\n            this.rejects[this.processorID].forEach(f => f(e));\n        }\n        this.rejects[this.processorID] = [];\n        this.resolves[this.processorID] = [];\n    }\n    static async register(audioWorklet: AudioWorklet): Promise<void> {\n        if (!this.resolves[this.processorID]) this.resolves[this.processorID] = [];\n        if (!this.rejects[this.processorID]) this.rejects[this.processorID] = [];\n        const promise = new Promise<void>((resolve, reject) => {\n            this.resolves[this.processorID].push(resolve);\n            this.rejects[this.processorID].push(reject);\n        });\n        if (this.registered) return new Promise<void>(resolve => resolve());\n        if (this.registering) return promise;\n        if (!this.registered && audioWorklet) this.registerProcessor(audioWorklet);\n        return promise;\n    }\n}\n","import { AudioWorkletRegister, DisposableAudioWorkletNode } from \"./Base\";\nimport processorURL from \"./SpectralAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\n\nexport interface DataToProcessor extends DisposableAudioWorkletMessageEventDataToProcessor {\n    id: number;\n    buffer?: boolean;\n    lastAmplitudes?: boolean;\n    allAmplitudes?: boolean;\n    amplitude?: boolean;\n    estimatedFreq?: boolean;\n    centroid?: boolean;\n    flatness?: boolean;\n    flux?: boolean;\n    kurtosis?: boolean;\n    skewness?: boolean;\n    rolloff?: boolean;\n    slope?: boolean;\n    spread?: boolean;\n}\nexport interface DataFromProcessor {\n    id: number;\n    buffer?: { $: Uint32Array; data: Float32Array[]; $total: Uint32Array; lock: Int32Array };\n    lastAmplitudes?: { $frame: number; data: Float32Array[]; $totalFrames: number };\n    allAmplitudes?: { $frame: Uint32Array; data: Float32Array[]; frames: number; fftBins: number; fftHopSize: number; $totalFrames: Uint32Array; lock: Int32Array };\n    amplitude?: number[];\n    estimatedFreq?: number[];\n    centroid?: number[];\n    flatness?: number[];\n    flux?: number[];\n    kurtosis?: number[];\n    skewness?: number[];\n    rolloff?: number[];\n    slope?: number[];\n    spread?: number[];\n}\nexport type Parameters = \"windowSize\" | \"fftSize\" | \"fftOverlap\" | \"windowFunction\";\nexport const processorID = \"__JSPatcher_SpectralAnalyser\";\nexport class SpectralAnalyserNode extends DisposableAudioWorkletNode<DataFromProcessor, DataToProcessor, Parameters> {\n    private promiseID = 0;\n    private resolves: { [id: number]: (rms?: DataFromProcessor | PromiseLike<DataFromProcessor>) => any } = {};\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        this.port.onmessage = (e: AudioWorkletMessageEvent<DataFromProcessor>) => {\n            const { id } = e.data;\n            delete e.data.id;\n            const f = this.resolves[id];\n            if (f) f(e.data);\n            delete this.resolves[id];\n        };\n    }\n    gets(options: Omit<DataToProcessor, \"id\">) {\n        if (this.destroyed) throw new Error(\"The Node is already destroyed.\");\n        const promise = new Promise<DataFromProcessor>(resolve => this.resolves[this.promiseID] = resolve);\n        this.port.postMessage({ id: this.promiseID++, ...options });\n        return promise;\n    }\n}\nexport class SpectralAnalyserRegister extends AudioWorkletRegister {\n    static processorID = processorID;\n    static processorURL = processorURL;\n    static Node = SpectralAnalyserNode;\n}\n","module.exports = __webpack_public_path__ + \"js/9e69b551a452dd7dda4f.worklet.js\";","import { AudioWorkletRegister, DisposableAudioWorkletNode } from \"./Base\";\nimport processorURL from \"./TemporalAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\n\nexport interface DataToProcessor extends DisposableAudioWorkletMessageEventDataToProcessor {\n    id: number;\n    rms?: boolean;\n    zcr?: boolean;\n    buffer?: boolean;\n}\nexport interface DataFromProcessor {\n    id: number;\n    rms?: number[];\n    zcr?: number[];\n    buffer?: { $: Uint32Array; data: Float32Array[]; $total: Uint32Array; lock: Int32Array };\n}\nexport type Parameters = \"windowSize\";\nexport const processorID = \"__JSPatcher_TemporalAnalyser\";\nexport class TemporalAnalyserNode extends DisposableAudioWorkletNode<DataFromProcessor, DataToProcessor, Parameters> {\n    private promiseID = 0;\n    private resolves: { [id: number]: (rms?: DataFromProcessor | PromiseLike<DataFromProcessor>) => any } = {};\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        this.port.onmessage = (e: AudioWorkletMessageEvent<DataFromProcessor>) => {\n            const { id } = e.data;\n            delete e.data.id;\n            const f = this.resolves[id];\n            if (f) f(e.data);\n            delete this.resolves[id];\n        };\n    }\n    get rms() {\n        return this.gets({ rms: true });\n    }\n    get zcr() {\n        return this.gets({ zcr: true });\n    }\n    get buffer() {\n        return this.gets({ buffer: true });\n    }\n    gets(options: Omit<DataToProcessor, \"id\">) {\n        if (this.destroyed) throw new Error(\"The Node is already destroyed.\");\n        const promise = new Promise<DataFromProcessor>(resolve => this.resolves[this.promiseID] = resolve);\n        this.port.postMessage({ id: this.promiseID++, ...options });\n        return promise;\n    }\n}\nexport class TemporalAnalyserRegister extends AudioWorkletRegister {\n    static processorID = processorID;\n    static processorURL = processorURL;\n    static Node = TemporalAnalyserNode;\n}\n","module.exports = __webpack_public_path__ + \"js/ec324d1044060ffb29bf.worklet.js\";","import { BaseObject, DefaultObject } from \"../Base\";\n\nexport class BaseDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends BaseObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n\nexport class DefaultDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface OscilloscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    interleaved: boolean;\n    stablize: boolean;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    range: number;\n    autoRange: boolean;\n    showStats: boolean;\n    bgColor: string;\n    phosphorColor: string;\n    hueOffset: number;\n    textColor: string;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class OscilloscopeUI extends CanvasUI<Oscilloscope, {}, OscilloscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            stablize,\n            interleaved,\n            // $cursor,\n            range,\n            autoRange,\n            showStats,\n            bgColor,\n            phosphorColor,\n            hueOffset,\n            textColor,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const { estimatedFreq, buffer } = await this.object.state.node.gets(\"estimatedFreq\", \"buffer\");\n        const { sampleRate } = this.object.audioCtx;\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!buffer) return;\n\n        const { $: $ui32, data: t, lock } = buffer;\n        if (!t || !t.length || !t[0].length) return;\n\n        while (Atomics.load(lock, 0));\n        Atomics.store(lock, 0, 1);\n        const $ = $ui32[0];\n        const channels = t.length;\n        const l = t[0].length;\n        // Vertical Range\n        let min = -range;\n        let max = range;\n        let yFactor = range;\n        if (autoRange) {\n            // Fastest way to get min and max to have: 1. max abs value for y scaling, 2. mean value for zero-crossing\n            let i = channels;\n            let s = 0;\n            while (i--) {\n                let j = l;\n                while (j--) {\n                    s = t[i][j];\n                    if (s < min) min = s;\n                    else if (s > max) max = s;\n                }\n            }\n            yFactor = Math.max(1, Math.abs(min), Math.abs(max))/* * vzoom*/;\n        }\n        // Grids\n        ctx.strokeStyle = gridColor;\n        let vStep = 0.25;\n        while (yFactor / 2 / vStep > 2) vStep *= 2; // Minimum horizontal grids in channel one side = 2\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = interleaved ? channels : 1;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            let y = (i + 0.5) * channelHeight;\n            ctx.moveTo(left, y);\n            ctx.lineTo(width, y); // 0-line\n            for (let j = vStep; j < yFactor; j += vStep) {\n                y = (i + 0.5 + j / yFactor / 2) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y); // below 0\n                y = (i + 0.5 - j / yFactor / 2) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y); // above 0\n            }\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        let $zerox = 0; // First Zero-crossing of first channel\n        const period = sampleRate / estimatedFreq[0];\n        const times = Math.floor(l / period) - 1;\n        for (let i = 0; i < channels; i++) {\n            // Horizontal Range\n            let $0 = 0; // Draw start\n            let $1 = l; // Draw End\n            let drawL = l; // Length to draw\n            if (stablize) { // Stablization\n                if (i === 0) {\n                    const thresh = (min + max) * 0.5 + 0.001; // the zero-crossing with \"offset\"\n                    while ($zerox < l && t[i][($ + $zerox++) % l] > thresh); // Find first raise\n                    if ($zerox >= l - 1) { // Found nothing, no stablization\n                        $zerox = 0;\n                    } else {\n                        while ($zerox < l && t[i][($ + $zerox++) % l] < thresh); // Find first drop\n                        $zerox--;\n                        if ($zerox >= l - 1 || $zerox < 0) {\n                            $zerox = 0;\n                        }\n                    }\n                }\n                drawL = times > 0 && isFinite(period) ? ~~Math.min(period * times, l - $zerox) : l - $zerox; // length to draw\n            }\n            $0 = Math.round($zerox/* + drawL * zoomOffset*/);\n            $1 = Math.round($zerox + drawL/* / zoom + drawL * zoomOffset*/);\n            const gridX = (width - left) / ($1 - $0);\n            const step = Math.max(1, Math.round(1 / gridX));\n\n            ctx.beginPath();\n            channelColor[i] = Color(phosphorColor).shiftHue(i * hueOffset).toHSL();\n            ctx.strokeStyle = channelColor[i];\n            let maxInStep;\n            let minInStep;\n            for (let j = $0; j < $1; j++) {\n                const $j = (j + $) % l;\n                const samp = t[i][$j];\n                const $step = (j - $0) % step;\n                if ($step === 0) {\n                    maxInStep = samp;\n                    minInStep = samp;\n                }\n                if ($step !== step - 1) {\n                    if ($step !== 0) {\n                        if (samp > maxInStep) maxInStep = samp;\n                        if (samp < minInStep) minInStep = samp;\n                    }\n                    continue;\n                }\n                const x = (j - $0) * gridX + left;\n                let y = channelHeight * (+interleaved * i + 0.5 - maxInStep / yFactor * 0.5);\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n                if (minInStep !== maxInStep) {\n                    y = channelHeight * (+interleaved * i + 0.5 - minInStep / yFactor * 0.5);\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.stroke();\n        }\n        Atomics.store(lock, 0, 0);\n        // Stats\n        if (showStats) {\n            ctx.font = \"bold 12px Consolas, monospace\";\n            ctx.fillStyle = textColor;\n            ctx.textAlign = \"left\";\n            ctx.textBaseline = \"top\";\n            ctx.fillText(yFactor.toFixed(2), 2, 2);\n            ctx.textBaseline = \"bottom\";\n            ctx.fillText((-yFactor).toFixed(2), 2, height - 2);\n            ctx.textAlign = \"right\";\n            const freqStatY = height - 2 - (estimatedFreq.length - 1) * 14;\n            for (let i = 0; i < estimatedFreq.length; i++) {\n                const freq = estimatedFreq[i];\n                ctx.fillStyle = channelColor[i];\n                const y = interleaved ? channelHeight * (i + 1) - 2 : freqStatY + 14 * i;\n                ctx.fillText(freq.toFixed(2) + \"Hz\", width - 2, y);\n            }\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<OscilloscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Oscilloscope extends BaseDSP<{}, State, [Bang], [], [], Props, OscilloscopeUIState> {\n    static description = \"Oscilloscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        interleaved: {\n            type: \"boolean\",\n            default: false,\n            description: \"Draw channels seperately\",\n            isUIState: true\n        },\n        stablize: {\n            type: \"boolean\",\n            default: true,\n            description: \"Stablize\",\n            isUIState: true\n        },\n        range: {\n            type: \"number\",\n            default: 1,\n            description: \"Vertical range\",\n            isUIState: true\n        },\n        autoRange: {\n            type: \"boolean\",\n            default: true,\n            description: \"Auto adjust range if > 1\",\n            isUIState: true\n        },\n        showStats: {\n            type: \"boolean\",\n            default: true,\n            description: \"Show stats texts\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        phosphorColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Phosphor color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"#DDDD99\",\n            description: \"Info text color\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = OscilloscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport { SpectralAnalysis, TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Record<keyof SpectralAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n    continuous: boolean;\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<SpectralAnalysis>;\nexport class SpectralAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Spectral feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        lastAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the last amplitudes frame\"\n        },\n        allAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting all the amplitudes frame\"\n        },\n        amplitude: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the sum of the last amplitude frame\"\n        },\n        estimatedFreq: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the estimated frequency\"\n        },\n        centroid: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral centroid\"\n        },\n        flatness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flatness\"\n        },\n        flux: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flux\"\n        },\n        kurtosis: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral kurtosis\"\n        },\n        skewness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral skewness\"\n        },\n        rolloff: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral rolloff\"\n        },\n        slope: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral slope\"\n        },\n        spread: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral spread\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"lastAmplitudes\",\n                        \"allAmplitudes\",\n                        \"amplitude\",\n                        \"estimatedFreq\",\n                        \"centroid\",\n                        \"flatness\",\n                        \"flux\",\n                        \"kurtosis\",\n                        \"skewness\",\n                        \"rolloff\",\n                        \"slope\",\n                        \"spread\"\n                    ] as (keyof SpectralAnalysis)[];\n                    const gets: (keyof SpectralAnalysis)[] = [];\n                    extractorKeys.forEach(key => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this.state.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport { SpectralAnalyserRegister, SpectralAnalyserNode, TWindowFunction } from \"./AudioWorklet/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectroscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    fgColor: string;\n    hueOffset: number;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectroscopeUI extends CanvasUI<Spectroscope, {}, SpectroscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            fgColor,\n            hueOffset,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const { lastAmplitudes } = await this.object.state.node.gets({ lastAmplitudes: true });\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!lastAmplitudes) return;\n        const { data: f } = lastAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        // Horizontal Range\n        const $0 = 0; // Draw start\n        const $1 = l; // Draw End\n        const gridX = (width - left) / ($1 - $0);\n        const step = Math.max(1, Math.round(1 / gridX));\n        for (let i = 0; i < f.length; i++) {\n            ctx.beginPath();\n            channelColor[i] = Color(fgColor).shiftHue(i * hueOffset).toHSL();\n            ctx.fillStyle = channelColor[i];\n            let maxInStep;\n            for (let j = $0; j < $1; j++) {\n                const samp = atodb(f[i][j]);\n                const $step = (j - $0) % step;\n                if ($step === 0) maxInStep = samp;\n                if ($step !== step - 1) {\n                    if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                    continue;\n                }\n                const x = (j - $0) * gridX + left;\n                const y = channelHeight * (i + 1 - Math.min(1, Math.max(0, maxInStep / 100 + 1)));\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n            }\n            ctx.lineTo(width, channelHeight * (i + 1));\n            ctx.lineTo(left, channelHeight * (i + 1));\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectroscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectroscope extends BaseDSP<{}, State, [Bang], [], [], Props, SpectroscopeUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        fgColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Foreground color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectroscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserRegister.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserRegister.Node(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport { TemporalAnalyserRegister, TemporalAnalyserNode, DataToProcessor, DataFromProcessor } from \"./AudioWorklet/TemporalAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Omit<DataToProcessor, \"id\"> {\n    speedLim: number;\n    windowSize: number;\n    continuous: boolean;\n}\nexport interface State {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Omit<DataFromProcessor, \"id\">;\nexport class TemporalAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Temporal feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        rms: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the Root Mean Square\"\n        },\n        zcr: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the zero crossing count\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"rms\",\n                        \"zcr\"\n                    ] as (keyof Omit<DataToProcessor, \"id\">)[];\n                    const gets: Omit<DataToProcessor, \"id\"> = {};\n                    extractorKeys.forEach(key => gets[key] = this.getProp(key));\n                    const got = await this.state.node.gets(gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserRegister.register(this.audioCtx.audioWorklet);\n            this.state.node = new TemporalAnalyserRegister.Node(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { SpectralAnalyser } from \"./SpectralAnalyser\";\nimport { TemporalAnalyser } from \"./TemporalAnalyser\";\nimport { Oscilloscope } from \"./Oscilloscope\";\nimport { Spectroscope } from \"./Spectroscope\";\nimport { Spectrogram } from \"./Spectrogram\";\n\nexport default {\n    \"temporalAnalyser~\": TemporalAnalyser,\n    \"spectralAnalyser~\": SpectralAnalyser,\n    \"scope~\": Oscilloscope,\n    \"spectroscope~\": Spectroscope,\n    \"spectrogram~\": Spectrogram\n};\n","import processorURL from \"./SpectralAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters } from \"./SpectralAnalyserWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorID = \"__JSPatcher_SpectralAnalyser\";\nexport default class SpectralAnalyserNode extends AudioWorkletProxyNode<ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters> implements ISpectralAnalyserNode {\n    static processorID = processorID;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorID, processorURL);\n    static fnNames: (keyof ISpectralAnalyserProcessor)[] = [\"getBuffer\", \"getLastAmplitudes\", \"getAllAmplitudes\", \"getAllAmplitudes\", \"getEstimatedFreq\", \"getCentroid\", \"getFlatness\", \"getFlux\", \"getKurtosis\", \"getSkewness\", \"getRolloff\", \"getSlope\", \"getSpread\", \"gets\", \"destroy\"];\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this.port.close();\n        };\n    }\n}\n","module.exports = __webpack_public_path__ + \"js/ad4c614a09f39bccddfc.worklet.js\";"],"sourceRoot":""}