{"version":3,"sources":["webpack://JSPatcher/webpack/bootstrap","webpack://JSPatcher/./src/core/workers/FileMgr.worker.ts","webpack://JSPatcher/./node_modules/base64-js/index.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/backend/IndexedDB.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/FS.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/api_error.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/file.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/file_flag.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/file_system.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/global.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/levenshtein.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/node_fs.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/node_fs_stats.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/core/util.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/generic/inode.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/generic/key_value_filesystem.js","webpack://JSPatcher/./node_modules/browserfs/dist/node/generic/preload_file.js","webpack://JSPatcher/./node_modules/buffer/index.js","webpack://JSPatcher/./node_modules/ieee754/index.js","webpack://JSPatcher/./node_modules/isarray/index.js","webpack://JSPatcher/./node_modules/path-browserify/index.js","webpack://JSPatcher/./node_modules/process/browser.js","webpack://JSPatcher/(webpack)/buildin/global.js","webpack://JSPatcher/./src/core/workers/ProxyWorker.ts","webpack://JSPatcher/./src/scripts/PatchBrowserFSPreloadFile.js"],"names":["FileMgr","ProxyWorker","init","Promise","resolve","reject","IndexedDB","Create","storeName","e","r","fs","mkdir","path","createFile","data","Object","setPrototypeOf","Buffer","prototype","FileFlag","write","byteLength","close","rename","oldPath","newPath","exists","readdir","readFile","buffer","unlink","rmdir","isFile","stat","empty","Worker","fnNames","constructor","resolves","rejects","messagePortRequestId","handleMessage","id","call","args","value","error","postMessage","Ctor","forEach","name","addEventListener","PreloadFile","writeSync","offset","length","position","_dirty","undefined","getPos","_flag","isWriteable","ApiError","ErrorCode","EPERM","len","_stat","size","_buffer","endFp","newBuff","alloc","copy","mtime","Date","isSynchronous","syncSync","setPos"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,OAAN,SAAsBC,oDAAtB,CAAsD;AAAA;AAAA;;AAAA;AAAA;;AAElDC,MAAI,GAAG;AACH,WAAO,IAAIC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqBC,4EAAS,CAACC,MAAV,CAAiB;AAAEC,eAAS,EAAE;AAAb,KAAjB,EAA6C,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjG,UAAID,CAAJ,EAAO;AACHJ,cAAM,CAACI,CAAD,CAAN;AACH,OAFD,MAEO;AACH,aAAKE,EAAL,GAAUD,CAAV;AACAN,eAAO,CAAC,IAAD,CAAP;AACH;AACJ,KAP6C,CAAvC,CAAP;AAQH;;AACDQ,OAAK,CAACC,IAAD,EAAe;AAChB,WAAO,IAAIV,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQC,KAAR,CAAcC,IAAd,EAAoB,KAApB,EAA2BJ,CAAC,IAAKA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAC,IAAD,CAAxD,CAAvC,CAAP;AACH;;AACDU,YAAU,CAACD,IAAD,EAAeE,IAAf,EAAiC;AACvCC,UAAM,CAACC,cAAP,CAAsBF,IAAtB,EAA4BG,6CAAM,CAACC,SAAnC;AACA,WAAO,IAAIhB,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,WAAKM,EAAL,CAAQG,UAAR,CAAmBD,IAAnB,EAAyB,IAAIO,2EAAJ,CAAa,GAAb,CAAzB,EAA4C,KAA5C,EAAmD,CAACX,CAAD,EAAIC,CAAJ,KAC/CD,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeC,CAAC,CAACW,KAAF,CAASN,IAAT,EAA0B,CAA1B,EAA6BA,IAAI,CAACO,UAAlC,EAA8C,IAA9C,EAAoDb,CAAC,IACjEA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeC,CAAC,CAACa,KAAF,CAAQd,CAAC,IAAKA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAC,IAAD,CAArC,CADJ,CADpB;AAKH,KANM,CAAP;AAOH;;AACDoB,QAAM,CAACC,OAAD,EAAkBC,OAAlB,EAAmC;AACrC,WAAO,IAAIvB,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQa,MAAR,CAAeC,OAAf,EAAwBC,OAAxB,EAAiCjB,CAAC,IAAKA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAC,IAAD,CAA9D,CAAvC,CAAP;AACH;;AACDuB,QAAM,CAACd,IAAD,EAAe;AACjB,WAAO,IAAIV,OAAJ,CAAqBC,OAAO,IAAI,KAAKO,EAAL,CAAQgB,MAAR,CAAed,IAAf,EAAqBT,OAArB,CAAhC,CAAP;AACH;;AACDwB,SAAO,CAACf,IAAD,EAAe;AAClB,WAAO,IAAIV,OAAJ,CAAsB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQiB,OAAR,CAAgBf,IAAhB,EAAsB,CAACJ,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAACM,CAAD,CAAxD,CAA3C,CAAP;AACH;;AACDmB,UAAQ,CAAChB,IAAD,EAAe;AACnB,WAAO,IAAIV,OAAJ,CAAyB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQkB,QAAR,CAAiBhB,IAAjB,EAAuB,IAAvB,EAA6B,IAAIO,2EAAJ,CAAa,GAAb,CAA7B,EAAgD,CAACX,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAEM,CAAD,CAAcoB,MAAf,CAAlF,CAA9C,CAAP;AACH;;AACDC,QAAM,CAAClB,IAAD,EAAe;AACjB,WAAO,IAAIV,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQoB,MAAR,CAAelB,IAAf,EAAqBJ,CAAC,IAAKA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAC,IAAD,CAAlD,CAAvC,CAAP;AACH;;AACD4B,OAAK,CAACnB,IAAD,EAAe;AAChB,WAAO,IAAIV,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQqB,KAAR,CAAcnB,IAAd,EAAoBJ,CAAC,IAAKA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAC,IAAD,CAAjD,CAAvC,CAAP;AACH;;AACD6B,QAAM,CAACpB,IAAD,EAAe;AACjB,WAAO,IAAIV,OAAJ,CAAqB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQuB,IAAR,CAAarB,IAAb,EAAmB,KAAnB,EAA0B,CAACJ,CAAD,EAAIC,CAAJ,KAAWD,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAACM,CAAC,CAACuB,MAAF,EAAD,CAA5D,CAA1C,CAAP;AACH;;AACDE,OAAK,GAAG;AACJ,WAAO,IAAIhC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAqB,KAAKM,EAAL,CAAQwB,KAAR,CAAc1B,CAAC,IAAKA,CAAC,GAAGJ,MAAM,CAACI,CAAD,CAAT,GAAeL,OAAO,CAAC,IAAD,CAA3C,CAAvC,CAAP;AACH;;AAhDiD;;AAkDtD,IAAIJ,OAAJ,G;;;;;;;;;;;;AC1DY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACvJA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,6BAA6B,mBAAO,CAAC,2GAAiC;AACtE,kBAAkB,mBAAO,CAAC,+EAAmB;AAC7C,eAAe,mBAAO,CAAC,yEAAgB;AACvC,aAAa,mBAAO,CAAC,qEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC;AAC5D,6BAA6B,gBAAgmCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,2EAA2E,uBAAuB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;ACzQA;AACA,kBAAkB,mBAAO,CAAC,yEAAa;AACvC,kBAAkB,mBAAO,CAAC,yEAAa;AACvC,WAAW,mBAAO,CAAC,qDAAM;AACzB,sBAAsB,mBAAO,CAAC,iFAAixC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA,8BAA8B,WAAW;AACzC,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,8B;;;;;;;;;;;;AChqCA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sCAAsC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAA0C;AAC1E,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,qC;;;;;;;;;;;;AC5JA;AACA,kBAAkB,mBAAO,CAAC,yEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,gC;;;;;;;;;;;AC1CA;AACA,kBAAkB,mBAAO,CAAC,yEAAa;AACvqC;;;;;;;;;;;ACpIA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,kBAAkB,mBAAO,CAAC,yEAAa;AACvC,kBAAkB,mBAAO,CAAC,yEAAa;AACvC,WAAW,mBAAO,CAAC,qDAAM;AACzB,aAAa,mBAAO,CAAC,+DAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzsBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,uC;;;;;;;;;;;;ACjkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;AC1FA;AACA,WAAW,mBAAO,CAAC,2DAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD,+BAA+B,oBAAoB;AACnD,+BAA+B,oBAAoB;AACnyC;;;;;;;;;;;;AC9IA;AACA,kBAAkB,mBAAO,CAAC,yEAAa;AACvC,oBAAoB,mBAAO,CAAC,6EAAe;AAC3C,WAAW,mBAAO,CAAC,qDAAM;AACztC,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,yBAAyB,EAAE;AAC7G,gCAAgC;AAChC,qBAAqB,uBAAuB,uBAAuB,EAAE,wBAAwB,gCAAgC,EAAE;AAC/H;AACA;AACA,gCAAgC;AAChC;AACA;AACA,4BAA4B,2OAA2O;AACvQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,4BAA4B,uMAAuM,4BAA4B;AAC/P;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;AC5PA;AACA,sBAAsB,mBAAO,CAAC,uFAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qCAAqC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,iC;;;;;;;;;;;;ACvGA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,oBAAoB,mBAAO,CAAC,mFAAqB;AACjD,kBAAkB,mBAAO,CAAC,+EAAmB;AAC7C,sBAAsB,mBAAO,CAAC,uFAAuB;AACrD,WAAW,mBAAO,CAAC,qDAAM;AACzB,cAAc,mBAAO,CAAC,6EAAkB;AACxC,qBAAqB,mBAAO,CAAC,2FAAyB;AACtD,aAAa,mBAAO,CAAC,qEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,aAAa;AACnE,4DAA4D,0BAA0B;AACtF,+DAA+D,cAAc;AAC7E,qEAAqE,cAAc;AACnF,kEAAkE,cAAc;AAChF,kEAAkE,aAAa;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,0BAA0B;AACvF,gEAAgE,cAAc;AAC9E,sEAAsE,cAAc;AACpF,mEAAmE,cAAc;AACjF,mEAAmE,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO,EAAE;AAC/D;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,yCAAyC;AACzC;AACA,iCAAiC;AACjC;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,gD;;;;;;;;;;;;AC9iCA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,aAAa,mBAAO,CAAC,qEAAc;AACnC,kBAAkB,mBAAO,CAAC,+EAAmB;AAC7C,gBAAgB,mBAAO,CAAC,2EAAiB;AACzC,aAAa,mBAAO,CAAC,qEAAc;AACnwC;;;;;;;;;;;;;ACrZA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,aAAa,mBAAO,CAAC,oDAAW;AAChC,cAAc,mBAAO,CAAC,gDAAS;AAC/B,cAAc,mBAAO,CAAC,gDAAS;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC5vDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;;;;;;ACnFA,iBAAiB;;AAEjB;AACA;AACA;;;;;;;;;;;;ACJA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;;AAEA;AACA,UAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,sBAAsB;AACrD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7SA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;ACvLtC;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;AChBA;AAAA,MAAMoC,MAAM,GAAG,MAAM;AACjB,aAAWC,OAAX,GAA+B;AAC3B,WAAO,EAAP;AACH;;AACDC,aAAW,GAAG;AACV,UAAMC,QAAmD,GAAG,EAA5D;AACA,UAAMC,OAAkD,GAAG,EAA3D;AACA,QAAIC,oBAAoB,GAAG,CAAC,CAA5B;;AACA,UAAMC,aAAa,GAAG,MAAOjC,CAAP,IAAgC;AAClD,YAAM;AAAEkC,UAAF;AAAMC,YAAN;AAAYC,YAAZ;AAAkBC,aAAlB;AAAyBC;AAAzB,UAAmCtC,CAAC,CAACM,IAA3C;;AACA,UAAI6B,IAAJ,EAAU;AACN,cAAMlC,CAAsB,GAAG;AAAEiC;AAAF,SAA/B;;AACA,YAAI;AACAjC,WAAC,CAACoC,KAAF,GAAU,MAAO,IAAD,CAAcF,IAAd,EAAoB,GAAGC,IAAvB,CAAhB;AACH,SAFD,CAEE,OAAOpC,CAAP,EAAU;AACRC,WAAC,CAACqC,KAAF,GAAUtC,CAAV;AACH;;AACDuC,mBAAW,CAACtC,CAAD,CAAX;AACH,OARD,MAQO;AACH,YAAIqC,KAAJ,EAAW;AACP,cAAIP,OAAO,CAACG,EAAD,CAAX,EAAiBH,OAAO,CAACG,EAAD,CAAP,CAAYI,KAAZ;AACjB,iBAAOP,OAAO,CAACG,EAAD,CAAd;AACA;AACH;;AACD,YAAIJ,QAAQ,CAACI,EAAD,CAAZ,EAAkB;AACdJ,kBAAQ,CAACI,EAAD,CAAR,CAAaG,KAAb;AACA,iBAAOP,QAAQ,CAACI,EAAD,CAAf;AACH;AACJ;AACJ,KArBD;;AAsBA,UAAMC,IAAI,GAAG,cAACA,KAAD;AAAA,wCAAkBC,IAAlB;AAAkBA,YAAlB;AAAA;;AAAA,aAAkC,IAAI1C,OAAJ,CAAiB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjF,cAAMsC,EAAE,GAAGF,oBAAoB,EAA/B;AACAF,gBAAQ,CAACI,EAAD,CAAR,GAAevC,OAAf;AACAoC,eAAO,CAACG,EAAD,CAAP,GAActC,MAAd;AACA2C,mBAAW,CAAC;AAAEL,YAAF;AAAMC,cAAI,EAAJA,KAAN;AAAYC;AAAZ,SAAD,CAAX;AACH,OAL8C,CAAlC;AAAA,KAAb;;AAMA,UAAMI,IAAI,GAAI,KAAKX,WAAnB;AACAW,QAAI,CAACZ,OAAL,CAAaa,OAAb,CAAqBC,IAAI,IAAK,IAAD,CAAcA,IAAd,IAAsB;AAAA,yCAAIN,IAAJ;AAAIA,YAAJ;AAAA;;AAAA,aAAoBD,IAAI,CAACO,IAAD,EAAO,GAAGN,IAAV,CAAxB;AAAA,KAAnD;AACAO,oBAAgB,CAAC,SAAD,EAAYV,aAAZ,CAAhB;AACH;;AAvCgB,CAArB;AA0CeN,qEAAf,E;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;AACAiB,+EAAW,CAAClC,SAAZ,CAAsBmC,SAAtB,GAAkC,UAAUxB,MAAV,EAAkByB,MAAlB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;AAC1E,OAAKC,MAAL,GAAc,IAAd;;AACA,MAAID,QAAQ,KAAKE,SAAb,IAA0BF,QAAQ,KAAK,IAA3C,EAAiD;AAC7CA,YAAQ,GAAG,KAAKG,MAAL,EAAX;AACH;;AACD,MAAI,CAAC,KAAKC,KAAL,CAAWC,WAAX,EAAL,EAA+B;AAC3B,UAAM,IAAIC,2EAAJ,CAAaC,4EAAS,CAACC,KAAvB,EAA8B,wCAA9B,CAAN;AACH;;AACD,MAAIC,GAAJ;;AACA,MAAI,CAACX,MAAD,IAAW,CAACE,QAAZ,IAAwBD,MAAM,KAAK1B,MAAM,CAAC0B,MAA9C,EAAsD;AAClD,SAAKW,KAAL,CAAWC,IAAX,GAAkBtC,MAAM,CAAC0B,MAAzB;AACA,SAAKa,OAAL,GAAevC,MAAf;AACAoC,OAAG,GAAGV,MAAN;AACH,GAJD,MAIO;AACH,UAAMc,KAAK,GAAGb,QAAQ,GAAGD,MAAzB;;AACA,QAAIc,KAAK,GAAG,KAAKH,KAAL,CAAWC,IAAvB,EAA6B;AACzB,WAAKD,KAAL,CAAWC,IAAX,GAAkBE,KAAlB;;AACA,UAAIA,KAAK,GAAG,KAAKD,OAAL,CAAab,MAAzB,EAAiC;AAC7B;AACA,cAAMe,OAAO,GAAGrD,MAAM,CAACsD,KAAP,CAAaF,KAAb,CAAhB;;AACA,aAAKD,OAAL,CAAaI,IAAb,CAAkBF,OAAlB;;AACA,aAAKF,OAAL,GAAeE,OAAf;AACH;AACJ;;AACDL,OAAG,GAAGpC,MAAM,CAAC2C,IAAP,CAAY,KAAKJ,OAAjB,EAA0BZ,QAA1B,EAAoCF,MAApC,EAA4CA,MAAM,GAAGC,MAArD,CAAN;AACH;;AACD,OAAKW,KAAL,CAAWO,KAAX,GAAmB,IAAIC,IAAJ,EAAnB;;AACA,MAAI,KAAKd,KAAL,CAAWe,aAAX,EAAJ,EAAgC;AAC5B,SAAKC,QAAL;AACA,WAAOX,GAAP;AACH;;AACD,OAAKY,MAAL,CAAYrB,QAAQ,GAAGS,GAAvB;AACA,SAAOA,GAAP;AACH,CAjCD,C","file":"js/f93eeb8c3f3b608a3d74.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/babel-loader/lib/index.js!./src/core/workers/FileMgr.worker.ts\");\n","/* eslint-disable no-new */\nimport IndexedDB from \"browserfs/dist/node/backend/IndexedDB\";\nimport { FileFlag } from \"browserfs/dist/node/core/file_flag\";\nimport { Buffer } from \"buffer\";\nimport \"../../scripts/PatchBrowserFSPreloadFile\";\nimport { IFileManagerWorker } from \"./FileMgrWorker.types\";\nimport ProxyWorker from \"./ProxyWorker\";\n\nclass FileMgr extends ProxyWorker<IFileManagerWorker> {\n    fs: IndexedDB;\n    init() {\n        return new Promise<true>((resolve, reject) => IndexedDB.Create({ storeName: \"JSPatcher\" }, (e, r) => {\n            if (e) {\n                reject(e);\n            } else {\n                this.fs = r;\n                resolve(true);\n            }\n        }));\n    }\n    mkdir(path: string) {\n        return new Promise<true>((resolve, reject) => this.fs.mkdir(path, 0o777, e => (e ? reject(e) : resolve(true))));\n    }\n    createFile(path: string, data: Uint8Array) {\n        Object.setPrototypeOf(data, Buffer.prototype);\n        return new Promise<true>((resolve, reject) => {\n            this.fs.createFile(path, new FileFlag(\"w\"), 0o777, (e, r) => (\n                e ? reject(e) : r.write((data as Buffer), 0, data.byteLength, null, e => (\n                    e ? reject(e) : r.close(e => (e ? reject(e) : resolve(true)))\n                ))\n            ));\n        });\n    }\n    rename(oldPath: string, newPath: string) {\n        return new Promise<true>((resolve, reject) => this.fs.rename(oldPath, newPath, e => (e ? reject(e) : resolve(true))));\n    }\n    exists(path: string) {\n        return new Promise<boolean>(resolve => this.fs.exists(path, resolve));\n    }\n    readdir(path: string) {\n        return new Promise<string[]>((resolve, reject) => this.fs.readdir(path, (e, r) => (e ? reject(e) : resolve(r))));\n    }\n    readFile(path: string) {\n        return new Promise<ArrayBuffer>((resolve, reject) => this.fs.readFile(path, null, new FileFlag(\"r\"), (e, r) => (e ? reject(e) : resolve((r as Buffer).buffer))));\n    }\n    unlink(path: string) {\n        return new Promise<true>((resolve, reject) => this.fs.unlink(path, e => (e ? reject(e) : resolve(true))));\n    }\n    rmdir(path: string) {\n        return new Promise<true>((resolve, reject) => this.fs.rmdir(path, e => (e ? reject(e) : resolve(true))));\n    }\n    isFile(path: string) {\n        return new Promise<boolean>((resolve, reject) => this.fs.stat(path, false, (e, r) => (e ? reject(e) : resolve(r.isFile()))));\n    }\n    empty() {\n        return new Promise<true>((resolve, reject) => this.fs.empty(e => (e ? reject(e) : resolve(true))));\n    }\n}\nnew FileMgr();\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar key_value_filesystem_1 = require(\"../generic/key_value_filesystem\");\nvar api_error_1 = require(\"../core/api_error\");\nvar global_1 = require(\"../core/global\");\nvar util_1 = require(\"../core/util\");\n/**\n * Get the indexedDB constructor for the current browser.\n * @hidden\n */\nvar indexedDB = global_1[\"default\"].indexedDB ||\n    global_1[\"default\"].mozIndexedDB ||\n    global_1[\"default\"].webkitIndexedDB ||\n    global_1[\"default\"].msIndexedDB;\n/**\n * Converts a DOMException or a DOMError from an IndexedDB event into a\n * standardized BrowserFS API error.\n * @hidden\n */\nfunction convertError(e, message) {\n    if (message === void 0) { message = e.toString(); }\n    switch (e.name) {\n        case \"NotFoundError\":\n            return new api_error_1.ApiError(api_error_1.ErrorCode.ENOENT, message);\n        case \"QuotaExceededError\":\n            return new api_error_1.ApiError(api_error_1.ErrorCode.ENOSPC, message);\n        default:\n            // The rest do not seem to map cleanly to standard error codes.\n            return new api_error_1.ApiError(api_error_1.ErrorCode.EIO, message);\n    }\n}\n/**\n * Produces a new onerror handler for IDB. Our errors are always fatal, so we\n * handle them generically: Call the user-supplied callback with a translated\n * version of the error, and let the error bubble up.\n * @hidden\n */\nfunction onErrorHandler(cb, code, message) {\n    if (code === void 0) { code = api_error_1.ErrorCode.EIO; }\n    if (message === void 0) { message = null; }\n    return function (e) {\n        // Prevent the error from canceling the transaction.\n        e.preventDefault();\n        cb(new api_error_1.ApiError(code, message !== null ? message : undefined));\n    };\n}\n/**\n * @hidden\n */\nvar IndexedDBROTransaction = (function () {\n    function IndexedDBROTransaction(tx, store) {\n        this.tx = tx;\n        this.store = store;\n    }\n    IndexedDBROTransaction.prototype.get = function (key, cb) {\n        try {\n            var r = this.store.get(key);\n            r.onerror = onErrorHandler(cb);\n            r.onsuccess = function (event) {\n                // IDB returns the value 'undefined' when you try to get keys that\n                // don't exist. The caller expects this behavior.\n                var result = event.target.result;\n                if (result === undefined) {\n                    cb(null, result);\n                }\n                else {\n                    // IDB data is stored as an ArrayBuffer\n                    cb(null, util_1.arrayBuffer2Buffer(result));\n                }\n            };\n        }\n        catch (e) {\n            cb(convertError(e));\n        }\n    };\n    return IndexedDBROTransaction;\n}());\nexports.IndexedDBROTransaction = IndexedDBROTransaction;\n/**\n * @hidden\n */\nvar IndexedDBRWTransaction = (function (_super) {\n    __extends(IndexedDBRWTransaction, _super);\n    function IndexedDBRWTransaction(tx, store) {\n        return _super.call(this, tx, store) || this;\n    }\n    IndexedDBRWTransaction.prototype.put = function (key, data, overwrite, cb) {\n        try {\n            var arraybuffer = util_1.buffer2ArrayBuffer(data);\n            var r = void 0;\n            if (overwrite) {\n                r = this.store.put(arraybuffer, key);\n            }\n            else {\n                // 'add' will never overwrite an existing key.\n                r = this.store.add(arraybuffer, key);\n            }\n            // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.\n            r.onerror = onErrorHandler(cb);\n            r.onsuccess = function (event) {\n                cb(null, true);\n            };\n        }\n        catch (e) {\n            cb(convertError(e));\n        }\n    };\n    IndexedDBRWTransaction.prototype.del = function (key, cb) {\n        try {\n            // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string\n            // like this.\n            // http://stackoverflow.com/a/26479152\n            var r = this.store['delete'](key);\n            r.onerror = onErrorHandler(cb);\n            r.onsuccess = function (event) {\n                cb();\n            };\n        }\n        catch (e) {\n            cb(convertError(e));\n        }\n    };\n    IndexedDBRWTransaction.prototype.commit = function (cb) {\n        // Return to the event loop to commit the transaction.\n        setTimeout(cb, 0);\n    };\n    IndexedDBRWTransaction.prototype.abort = function (cb) {\n        var _e = null;\n        try {\n            this.tx.abort();\n        }\n        catch (e) {\n            _e = convertError(e);\n        }\n        finally {\n            cb(_e);\n        }\n    };\n    return IndexedDBRWTransaction;\n}(IndexedDBROTransaction));\nexports.IndexedDBRWTransaction = IndexedDBRWTransaction;\nvar IndexedDBStore = (function () {\n    function IndexedDBStore(cb, storeName) {\n        if (storeName === void 0) { storeName = 'browserfs'; }\n        var _this = this;\n        this.storeName = storeName;\n        var openReq = indexedDB.open(this.storeName, 1);\n        openReq.onupgradeneeded = function (event) {\n            var db = event.target.result;\n            // Huh. This should never happen; we're at version 1. Why does another\n            // database exist?\n            if (db.objectStoreNames.contains(_this.storeName)) {\n                db.deleteObjectStore(_this.storeName);\n            }\n            db.createObjectStore(_this.storeName);\n        };\n        openReq.onsuccess = function (event) {\n            _this.db = event.target.result;\n            cb(null, _this);\n        };\n        openReq.onerror = onErrorHandler(cb, api_error_1.ErrorCode.EACCES);\n    }\n    IndexedDBStore.prototype.name = function () {\n        return IndexedDBFileSystem.Name + \" - \" + this.storeName;\n    };\n    IndexedDBStore.prototype.clear = function (cb) {\n        try {\n            var tx = this.db.transaction(this.storeName, 'readwrite'), objectStore = tx.objectStore(this.storeName), r = objectStore.clear();\n            r.onsuccess = function (event) {\n                // Use setTimeout to commit transaction.\n                setTimeout(cb, 0);\n            };\n            r.onerror = onErrorHandler(cb);\n        }\n        catch (e) {\n            cb(convertError(e));\n        }\n    };\n    IndexedDBStore.prototype.beginTransaction = function (type) {\n        if (type === void 0) { type = 'readonly'; }\n        var tx = this.db.transaction(this.storeName, type), objectStore = tx.objectStore(this.storeName);\n        if (type === 'readwrite') {\n            return new IndexedDBRWTransaction(tx, objectStore);\n        }\n        else if (type === 'readonly') {\n            return new IndexedDBROTransaction(tx, objectStore);\n        }\n        else {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid transaction type.');\n        }\n    };\n    return IndexedDBStore;\n}());\nexports.IndexedDBStore = IndexedDBStore;\n/**\n * A file system that uses the IndexedDB key value file system.\n */\nvar IndexedDBFileSystem = (function (_super) {\n    __extends(IndexedDBFileSystem, _super);\n    /**\n     * **Deprecated. Use IndexedDB.Create() method instead.**\n     *\n     * Constructs an IndexedDB file system.\n     * @param cb Called once the database is instantiated and ready for use.\n     *   Passes an error if there was an issue instantiating the database.\n     * @param storeName The name of this file system. You can have\n     *   multiple IndexedDB file systems operating at once, but each must have\n     *   a different name.\n     */\n    function IndexedDBFileSystem(cb, storeName, deprecateMsg) {\n        if (deprecateMsg === void 0) { deprecateMsg = true; }\n        var _this = _super.call(this) || this;\n        _this.store = new IndexedDBStore(function (e) {\n            if (e) {\n                cb(e);\n            }\n            else {\n                _this.init(_this.store, function (e) {\n                    cb(e, _this);\n                });\n            }\n        }, storeName);\n        util_1.deprecationMessage(deprecateMsg, IndexedDBFileSystem.Name, { storeName: storeName });\n        return _this;\n    }\n    /**\n     * Constructs an IndexedDB file system with the given options.\n     */\n    IndexedDBFileSystem.Create = function (opts, cb) {\n        // tslint:disable-next-line:no-unused-new\n        new IndexedDBFileSystem(cb, opts.storeName, false);\n        // tslint:enable-next-line:no-unused-new\n    };\n    IndexedDBFileSystem.isAvailable = function () {\n        // In Safari's private browsing mode, indexedDB.open returns NULL.\n        // In Firefox, it throws an exception.\n        // In Chrome, it \"just works\", and clears the database when you leave the page.\n        // Untested: Opera, IE.\n        try {\n            return typeof indexedDB !== 'undefined' && null !== indexedDB.open(\"__browserfs_test__\");\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    return IndexedDBFileSystem;\n}(key_value_filesystem_1.AsyncKeyValueFileSystem));\nIndexedDBFileSystem.Name = \"IndexedDB\";\nIndexedDBFileSystem.Options = {\n    storeName: {\n        type: \"string\",\n        optional: true,\n        description: \"The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name.\"\n    }\n};\nexports[\"default\"] = IndexedDBFileSystem;\n//# sourceMappingURL=IndexedDB.js.map","exports.__esModule = true;\nvar api_error_1 = require(\"./api_error\");\nvar file_flag_1 = require(\"./file_flag\");\nvar path = require(\"path\");\nvar node_fs_stats_1 = require(\"./node_fs_stats\");\n/**\n * Wraps a callback function. Used for unit testing. Defaults to a NOP.\n * @hidden\n */\nvar wrapCb = function (cb, numArgs) {\n    return cb;\n};\n/**\n * @hidden\n */\nfunction assertRoot(fs) {\n    if (fs) {\n        return fs;\n    }\n    throw new api_error_1.ApiError(api_error_1.ErrorCode.EIO, \"Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)\");\n}\n/**\n * @hidden\n */\nfunction normalizeMode(mode, def) {\n    switch (typeof mode) {\n        case 'number':\n            // (path, flag, mode, cb?)\n            return mode;\n        case 'string':\n            // (path, flag, modeString, cb?)\n            var trueMode = parseInt(mode, 8);\n            if (!isNaN(trueMode)) {\n                return trueMode;\n            }\n            // Invalid string.\n            return def;\n        default:\n            return def;\n    }\n}\n/**\n * @hidden\n */\nfunction normalizeTime(time) {\n    if (time instanceof Date) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        return new Date(time * 1000);\n    }\n    else {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid time.\");\n    }\n}\n/**\n * @hidden\n */\nfunction normalizePath(p) {\n    // Node doesn't allow null characters in paths.\n    if (p.indexOf('\\u0000') >= 0) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Path must be a string without null bytes.');\n    }\n    else if (p === '') {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Path must not be empty.');\n    }\n    return path.resolve(p);\n}\n/**\n * @hidden\n */\nfunction normalizeOptions(options, defEnc, defFlag, defMode) {\n    switch (typeof options) {\n        case 'object':\n            return {\n                encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,\n                flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,\n                mode: normalizeMode(options['mode'], defMode)\n            };\n        case 'string':\n            return {\n                encoding: options,\n                flag: defFlag,\n                mode: defMode\n            };\n        default:\n            return {\n                encoding: defEnc,\n                flag: defFlag,\n                mode: defMode\n            };\n    }\n}\n/**\n * The default callback is a NOP.\n * @hidden\n * @private\n */\nfunction nopCb() {\n    // NOP.\n}\n/**\n * The node frontend to all filesystems.\n * This layer handles:\n *\n * * Sanity checking inputs.\n * * Normalizing paths.\n * * Resetting stack depth for asynchronous operations which may not go through\n *   the browser by wrapping all input callbacks using `setImmediate`.\n * * Performing the requested operation through the filesystem or the file\n *   descriptor, as appropriate.\n * * Handling optional arguments and setting default arguments.\n * @see http://nodejs.org/api/fs.html\n */\nvar FS = (function () {\n    function FS() {\n        /* tslint:enable:variable-name */\n        this.F_OK = 0;\n        this.R_OK = 4;\n        this.W_OK = 2;\n        this.X_OK = 1;\n        this.root = null;\n        this.fdMap = {};\n        this.nextFd = 100;\n    }\n    FS.prototype.initialize = function (rootFS) {\n        if (!rootFS.constructor.isAvailable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');\n        }\n        return this.root = rootFS;\n    };\n    /**\n     * converts Date or number to a fractional UNIX timestamp\n     * Grabbed from NodeJS sources (lib/fs.js)\n     */\n    FS.prototype._toUnixTimestamp = function (time) {\n        if (typeof time === 'number') {\n            return time;\n        }\n        else if (time instanceof Date) {\n            return time.getTime() / 1000;\n        }\n        throw new Error(\"Cannot parse time: \" + time);\n    };\n    /**\n     * **NONSTANDARD**: Grab the FileSystem instance that backs this API.\n     * @return [BrowserFS.FileSystem | null] Returns null if the file system has\n     *   not been initialized.\n     */\n    FS.prototype.getRootFS = function () {\n        if (this.root) {\n            return this.root;\n        }\n        else {\n            return null;\n        }\n    };\n    // FILE OR DIRECTORY METHODS\n    /**\n     * Asynchronous rename. No arguments other than a possible exception are given\n     * to the completion callback.\n     * @param oldPath\n     * @param newPath\n     * @param callback\n     */\n    FS.prototype.rename = function (oldPath, newPath, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous rename.\n     * @param oldPath\n     * @param newPath\n     */\n    FS.prototype.renameSync = function (oldPath, newPath) {\n        assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));\n    };\n    /**\n     * Test whether or not the given path exists by checking with the file system.\n     * Then call the callback argument with either true or false.\n     * @example Sample invocation\n     *   fs.exists('/etc/passwd', function (exists) {\n     *     util.debug(exists ? \"it's there\" : \"no passwd!\");\n     *   });\n     * @param path\n     * @param callback\n     */\n    FS.prototype.exists = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            return assertRoot(this.root).exists(normalizePath(path), newCb);\n        }\n        catch (e) {\n            // Doesn't return an error. If something bad happens, we assume it just\n            // doesn't exist.\n            return newCb(false);\n        }\n    };\n    /**\n     * Test whether or not the given path exists by checking with the file system.\n     * @param path\n     * @return [boolean]\n     */\n    FS.prototype.existsSync = function (path) {\n        try {\n            return assertRoot(this.root).existsSync(normalizePath(path));\n        }\n        catch (e) {\n            // Doesn't return an error. If something bad happens, we assume it just\n            // doesn't exist.\n            return false;\n        }\n    };\n    /**\n     * Asynchronous `stat`.\n     * @param path\n     * @param callback\n     */\n    FS.prototype.stat = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 2);\n        try {\n            return assertRoot(this.root).stat(normalizePath(path), false, newCb);\n        }\n        catch (e) {\n            return newCb(e);\n        }\n    };\n    /**\n     * Synchronous `stat`.\n     * @param path\n     * @return [BrowserFS.node.fs.Stats]\n     */\n    FS.prototype.statSync = function (path) {\n        return assertRoot(this.root).statSync(normalizePath(path), false);\n    };\n    /**\n     * Asynchronous `lstat`.\n     * `lstat()` is identical to `stat()`, except that if path is a symbolic link,\n     * then the link itself is stat-ed, not the file that it refers to.\n     * @param path\n     * @param callback\n     */\n    FS.prototype.lstat = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 2);\n        try {\n            return assertRoot(this.root).stat(normalizePath(path), true, newCb);\n        }\n        catch (e) {\n            return newCb(e);\n        }\n    };\n    /**\n     * Synchronous `lstat`.\n     * `lstat()` is identical to `stat()`, except that if path is a symbolic link,\n     * then the link itself is stat-ed, not the file that it refers to.\n     * @param path\n     * @return [BrowserFS.node.fs.Stats]\n     */\n    FS.prototype.lstatSync = function (path) {\n        return assertRoot(this.root).statSync(normalizePath(path), true);\n    };\n    FS.prototype.truncate = function (path, arg2, cb) {\n        if (arg2 === void 0) { arg2 = 0; }\n        if (cb === void 0) { cb = nopCb; }\n        var len = 0;\n        if (typeof arg2 === 'function') {\n            cb = arg2;\n        }\n        else if (typeof arg2 === 'number') {\n            len = arg2;\n        }\n        var newCb = wrapCb(cb, 1);\n        try {\n            if (len < 0) {\n                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL);\n            }\n            return assertRoot(this.root).truncate(normalizePath(path), len, newCb);\n        }\n        catch (e) {\n            return newCb(e);\n        }\n    };\n    /**\n     * Synchronous `truncate`.\n     * @param path\n     * @param len\n     */\n    FS.prototype.truncateSync = function (path, len) {\n        if (len === void 0) { len = 0; }\n        if (len < 0) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL);\n        }\n        return assertRoot(this.root).truncateSync(normalizePath(path), len);\n    };\n    /**\n     * Asynchronous `unlink`.\n     * @param path\n     * @param callback\n     */\n    FS.prototype.unlink = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            return assertRoot(this.root).unlink(normalizePath(path), newCb);\n        }\n        catch (e) {\n            return newCb(e);\n        }\n    };\n    /**\n     * Synchronous `unlink`.\n     * @param path\n     */\n    FS.prototype.unlinkSync = function (path) {\n        return assertRoot(this.root).unlinkSync(normalizePath(path));\n    };\n    FS.prototype.open = function (path, flag, arg2, cb) {\n        var _this = this;\n        if (cb === void 0) { cb = nopCb; }\n        var mode = normalizeMode(arg2, 0x1a4);\n        cb = typeof arg2 === 'function' ? arg2 : cb;\n        var newCb = wrapCb(cb, 2);\n        try {\n            assertRoot(this.root).open(normalizePath(path), file_flag_1.FileFlag.getFileFlag(flag), mode, function (e, file) {\n                if (file) {\n                    newCb(e, _this.getFdForFile(file));\n                }\n                else {\n                    newCb(e);\n                }\n            });\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous file open.\n     * @see http://www.manpagez.com/man/2/open/\n     * @param path\n     * @param flags\n     * @param mode defaults to `0644`\n     * @return [BrowserFS.File]\n     */\n    FS.prototype.openSync = function (path, flag, mode) {\n        if (mode === void 0) { mode = 0x1a4; }\n        return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path), file_flag_1.FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));\n    };\n    FS.prototype.readFile = function (filename, arg2, cb) {\n        if (arg2 === void 0) { arg2 = {}; }\n        if (cb === void 0) { cb = nopCb; }\n        var options = normalizeOptions(arg2, null, 'r', null);\n        cb = typeof arg2 === 'function' ? arg2 : cb;\n        var newCb = wrapCb(cb, 2);\n        try {\n            var flag = file_flag_1.FileFlag.getFileFlag(options['flag']);\n            if (!flag.isReadable()) {\n                return newCb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));\n            }\n            return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);\n        }\n        catch (e) {\n            return newCb(e);\n        }\n    };\n    FS.prototype.readFileSync = function (filename, arg2) {\n        if (arg2 === void 0) { arg2 = {}; }\n        var options = normalizeOptions(arg2, null, 'r', null);\n        var flag = file_flag_1.FileFlag.getFileFlag(options.flag);\n        if (!flag.isReadable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');\n        }\n        return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);\n    };\n    FS.prototype.writeFile = function (filename, data, arg3, cb) {\n        if (arg3 === void 0) { arg3 = {}; }\n        if (cb === void 0) { cb = nopCb; }\n        var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);\n        cb = typeof arg3 === 'function' ? arg3 : cb;\n        var newCb = wrapCb(cb, 1);\n        try {\n            var flag = file_flag_1.FileFlag.getFileFlag(options.flag);\n            if (!flag.isWriteable()) {\n                return newCb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));\n            }\n            return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);\n        }\n        catch (e) {\n            return newCb(e);\n        }\n    };\n    FS.prototype.writeFileSync = function (filename, data, arg3) {\n        var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);\n        var flag = file_flag_1.FileFlag.getFileFlag(options.flag);\n        if (!flag.isWriteable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');\n        }\n        return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);\n    };\n    FS.prototype.appendFile = function (filename, data, arg3, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);\n        cb = typeof arg3 === 'function' ? arg3 : cb;\n        var newCb = wrapCb(cb, 1);\n        try {\n            var flag = file_flag_1.FileFlag.getFileFlag(options.flag);\n            if (!flag.isAppendable()) {\n                return newCb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));\n            }\n            assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    FS.prototype.appendFileSync = function (filename, data, arg3) {\n        var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);\n        var flag = file_flag_1.FileFlag.getFileFlag(options.flag);\n        if (!flag.isAppendable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');\n        }\n        return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);\n    };\n    // FILE DESCRIPTOR METHODS\n    /**\n     * Asynchronous `fstat`.\n     * `fstat()` is identical to `stat()`, except that the file to be stat-ed is\n     * specified by the file descriptor `fd`.\n     * @param fd\n     * @param callback\n     */\n    FS.prototype.fstat = function (fd, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 2);\n        try {\n            var file = this.fd2file(fd);\n            file.stat(newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `fstat`.\n     * `fstat()` is identical to `stat()`, except that the file to be stat-ed is\n     * specified by the file descriptor `fd`.\n     * @param fd\n     * @return [BrowserFS.node.fs.Stats]\n     */\n    FS.prototype.fstatSync = function (fd) {\n        return this.fd2file(fd).statSync();\n    };\n    /**\n     * Asynchronous close.\n     * @param fd\n     * @param callback\n     */\n    FS.prototype.close = function (fd, cb) {\n        var _this = this;\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            this.fd2file(fd).close(function (e) {\n                if (!e) {\n                    _this.closeFd(fd);\n                }\n                newCb(e);\n            });\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous close.\n     * @param fd\n     */\n    FS.prototype.closeSync = function (fd) {\n        this.fd2file(fd).closeSync();\n        this.closeFd(fd);\n    };\n    FS.prototype.ftruncate = function (fd, arg2, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var length = typeof arg2 === 'number' ? arg2 : 0;\n        cb = typeof arg2 === 'function' ? arg2 : cb;\n        var newCb = wrapCb(cb, 1);\n        try {\n            var file = this.fd2file(fd);\n            if (length < 0) {\n                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL);\n            }\n            file.truncate(length, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous ftruncate.\n     * @param fd\n     * @param len\n     */\n    FS.prototype.ftruncateSync = function (fd, len) {\n        if (len === void 0) { len = 0; }\n        var file = this.fd2file(fd);\n        if (len < 0) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL);\n        }\n        file.truncateSync(len);\n    };\n    /**\n     * Asynchronous fsync.\n     * @param fd\n     * @param callback\n     */\n    FS.prototype.fsync = function (fd, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            this.fd2file(fd).sync(newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous fsync.\n     * @param fd\n     */\n    FS.prototype.fsyncSync = function (fd) {\n        this.fd2file(fd).syncSync();\n    };\n    /**\n     * Asynchronous fdatasync.\n     * @param fd\n     * @param callback\n     */\n    FS.prototype.fdatasync = function (fd, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            this.fd2file(fd).datasync(newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous fdatasync.\n     * @param fd\n     */\n    FS.prototype.fdatasyncSync = function (fd) {\n        this.fd2file(fd).datasyncSync();\n    };\n    FS.prototype.write = function (fd, arg2, arg3, arg4, arg5, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var buffer, offset, length, position = null;\n        if (typeof arg2 === 'string') {\n            // Signature 1: (fd, string, [position?, [encoding?]], cb?)\n            var encoding = 'utf8';\n            switch (typeof arg3) {\n                case 'function':\n                    // (fd, string, cb)\n                    cb = arg3;\n                    break;\n                case 'number':\n                    // (fd, string, position, encoding?, cb?)\n                    position = arg3;\n                    encoding = typeof arg4 === 'string' ? arg4 : 'utf8';\n                    cb = typeof arg5 === 'function' ? arg5 : cb;\n                    break;\n                default:\n                    // ...try to find the callback and get out of here!\n                    cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;\n                    return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid arguments.'));\n            }\n            buffer = Buffer.from(arg2, encoding);\n            offset = 0;\n            length = buffer.length;\n        }\n        else {\n            // Signature 2: (fd, buffer, offset, length, position?, cb?)\n            buffer = arg2;\n            offset = arg3;\n            length = arg4;\n            position = typeof arg5 === 'number' ? arg5 : null;\n            cb = typeof arg5 === 'function' ? arg5 : cb;\n        }\n        var newCb = wrapCb(cb, 3);\n        try {\n            var file = this.fd2file(fd);\n            if (position === undefined || position === null) {\n                position = file.getPos();\n            }\n            file.write(buffer, offset, length, position, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    FS.prototype.writeSync = function (fd, arg2, arg3, arg4, arg5) {\n        var buffer, offset = 0, length, position;\n        if (typeof arg2 === 'string') {\n            // Signature 1: (fd, string, [position?, [encoding?]])\n            position = typeof arg3 === 'number' ? arg3 : null;\n            var encoding = typeof arg4 === 'string' ? arg4 : 'utf8';\n            offset = 0;\n            buffer = Buffer.from(arg2, encoding);\n            length = buffer.length;\n        }\n        else {\n            // Signature 2: (fd, buffer, offset, length, position?)\n            buffer = arg2;\n            offset = arg3;\n            length = arg4;\n            position = typeof arg5 === 'number' ? arg5 : null;\n        }\n        var file = this.fd2file(fd);\n        if (position === undefined || position === null) {\n            position = file.getPos();\n        }\n        return file.writeSync(buffer, offset, length, position);\n    };\n    FS.prototype.read = function (fd, arg2, arg3, arg4, arg5, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var position, offset, length, buffer, newCb;\n        if (typeof arg2 === 'number') {\n            // legacy interface\n            // (fd, length, position, encoding, callback)\n            length = arg2;\n            position = arg3;\n            var encoding_1 = arg4;\n            cb = typeof arg5 === 'function' ? arg5 : cb;\n            offset = 0;\n            buffer = Buffer.alloc(length);\n            // XXX: Inefficient.\n            // Wrap the cb so we shelter upper layers of the API from these\n            // shenanigans.\n            newCb = wrapCb(function (err, bytesRead, buf) {\n                if (err) {\n                    return cb(err);\n                }\n                cb(err, buf.toString(encoding_1), bytesRead);\n            }, 3);\n        }\n        else {\n            buffer = arg2;\n            offset = arg3;\n            length = arg4;\n            position = arg5;\n            newCb = wrapCb(cb, 3);\n        }\n        try {\n            var file = this.fd2file(fd);\n            if (position === undefined || position === null) {\n                position = file.getPos();\n            }\n            file.read(buffer, offset, length, position, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    FS.prototype.readSync = function (fd, arg2, arg3, arg4, arg5) {\n        var shenanigans = false;\n        var buffer, offset, length, position, encoding = 'utf8';\n        if (typeof arg2 === 'number') {\n            length = arg2;\n            position = arg3;\n            encoding = arg4;\n            offset = 0;\n            buffer = Buffer.alloc(length);\n            shenanigans = true;\n        }\n        else {\n            buffer = arg2;\n            offset = arg3;\n            length = arg4;\n            position = arg5;\n        }\n        var file = this.fd2file(fd);\n        if (position === undefined || position === null) {\n            position = file.getPos();\n        }\n        var rv = file.readSync(buffer, offset, length, position);\n        if (!shenanigans) {\n            return rv;\n        }\n        else {\n            return [buffer.toString(encoding), rv];\n        }\n    };\n    /**\n     * Asynchronous `fchown`.\n     * @param fd\n     * @param uid\n     * @param gid\n     * @param callback\n     */\n    FS.prototype.fchown = function (fd, uid, gid, callback) {\n        if (callback === void 0) { callback = nopCb; }\n        var newCb = wrapCb(callback, 1);\n        try {\n            this.fd2file(fd).chown(uid, gid, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `fchown`.\n     * @param fd\n     * @param uid\n     * @param gid\n     */\n    FS.prototype.fchownSync = function (fd, uid, gid) {\n        this.fd2file(fd).chownSync(uid, gid);\n    };\n    /**\n     * Asynchronous `fchmod`.\n     * @param fd\n     * @param mode\n     * @param callback\n     */\n    FS.prototype.fchmod = function (fd, mode, cb) {\n        var newCb = wrapCb(cb, 1);\n        try {\n            var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;\n            this.fd2file(fd).chmod(numMode, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `fchmod`.\n     * @param fd\n     * @param mode\n     */\n    FS.prototype.fchmodSync = function (fd, mode) {\n        var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;\n        this.fd2file(fd).chmodSync(numMode);\n    };\n    /**\n     * Change the file timestamps of a file referenced by the supplied file\n     * descriptor.\n     * @param fd\n     * @param atime\n     * @param mtime\n     * @param callback\n     */\n    FS.prototype.futimes = function (fd, atime, mtime, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            var file = this.fd2file(fd);\n            if (typeof atime === 'number') {\n                atime = new Date(atime * 1000);\n            }\n            if (typeof mtime === 'number') {\n                mtime = new Date(mtime * 1000);\n            }\n            file.utimes(atime, mtime, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Change the file timestamps of a file referenced by the supplied file\n     * descriptor.\n     * @param fd\n     * @param atime\n     * @param mtime\n     */\n    FS.prototype.futimesSync = function (fd, atime, mtime) {\n        this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));\n    };\n    // DIRECTORY-ONLY METHODS\n    /**\n     * Asynchronous `rmdir`.\n     * @param path\n     * @param callback\n     */\n    FS.prototype.rmdir = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).rmdir(path, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `rmdir`.\n     * @param path\n     */\n    FS.prototype.rmdirSync = function (path) {\n        path = normalizePath(path);\n        return assertRoot(this.root).rmdirSync(path);\n    };\n    /**\n     * Asynchronous `mkdir`.\n     * @param path\n     * @param mode defaults to `0777`\n     * @param callback\n     */\n    FS.prototype.mkdir = function (path, mode, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        if (typeof mode === 'function') {\n            cb = mode;\n            mode = 0x1ff;\n        }\n        var newCb = wrapCb(cb, 1);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).mkdir(path, mode, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `mkdir`.\n     * @param path\n     * @param mode defaults to `0777`\n     */\n    FS.prototype.mkdirSync = function (path, mode) {\n        assertRoot(this.root).mkdirSync(normalizePath(path), normalizeMode(mode, 0x1ff));\n    };\n    /**\n     * Asynchronous `readdir`. Reads the contents of a directory.\n     * The callback gets two arguments `(err, files)` where `files` is an array of\n     * the names of the files in the directory excluding `'.'` and `'..'`.\n     * @param path\n     * @param callback\n     */\n    FS.prototype.readdir = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 2);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).readdir(path, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `readdir`. Reads the contents of a directory.\n     * @param path\n     * @return [String[]]\n     */\n    FS.prototype.readdirSync = function (path) {\n        path = normalizePath(path);\n        return assertRoot(this.root).readdirSync(path);\n    };\n    // SYMLINK METHODS\n    /**\n     * Asynchronous `link`.\n     * @param srcpath\n     * @param dstpath\n     * @param callback\n     */\n    FS.prototype.link = function (srcpath, dstpath, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            srcpath = normalizePath(srcpath);\n            dstpath = normalizePath(dstpath);\n            assertRoot(this.root).link(srcpath, dstpath, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `link`.\n     * @param srcpath\n     * @param dstpath\n     */\n    FS.prototype.linkSync = function (srcpath, dstpath) {\n        srcpath = normalizePath(srcpath);\n        dstpath = normalizePath(dstpath);\n        return assertRoot(this.root).linkSync(srcpath, dstpath);\n    };\n    FS.prototype.symlink = function (srcpath, dstpath, arg3, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var type = typeof arg3 === 'string' ? arg3 : 'file';\n        cb = typeof arg3 === 'function' ? arg3 : cb;\n        var newCb = wrapCb(cb, 1);\n        try {\n            if (type !== 'file' && type !== 'dir') {\n                return newCb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid type: \" + type));\n            }\n            srcpath = normalizePath(srcpath);\n            dstpath = normalizePath(dstpath);\n            assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `symlink`.\n     * @param srcpath\n     * @param dstpath\n     * @param type can be either `'dir'` or `'file'` (default is `'file'`)\n     */\n    FS.prototype.symlinkSync = function (srcpath, dstpath, type) {\n        if (!type) {\n            type = 'file';\n        }\n        else if (type !== 'file' && type !== 'dir') {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid type: \" + type);\n        }\n        srcpath = normalizePath(srcpath);\n        dstpath = normalizePath(dstpath);\n        return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);\n    };\n    /**\n     * Asynchronous readlink.\n     * @param path\n     * @param callback\n     */\n    FS.prototype.readlink = function (path, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 2);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).readlink(path, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous readlink.\n     * @param path\n     * @return [String]\n     */\n    FS.prototype.readlinkSync = function (path) {\n        path = normalizePath(path);\n        return assertRoot(this.root).readlinkSync(path);\n    };\n    // PROPERTY OPERATIONS\n    /**\n     * Asynchronous `chown`.\n     * @param path\n     * @param uid\n     * @param gid\n     * @param callback\n     */\n    FS.prototype.chown = function (path, uid, gid, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).chown(path, false, uid, gid, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `chown`.\n     * @param path\n     * @param uid\n     * @param gid\n     */\n    FS.prototype.chownSync = function (path, uid, gid) {\n        path = normalizePath(path);\n        assertRoot(this.root).chownSync(path, false, uid, gid);\n    };\n    /**\n     * Asynchronous `lchown`.\n     * @param path\n     * @param uid\n     * @param gid\n     * @param callback\n     */\n    FS.prototype.lchown = function (path, uid, gid, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).chown(path, true, uid, gid, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `lchown`.\n     * @param path\n     * @param uid\n     * @param gid\n     */\n    FS.prototype.lchownSync = function (path, uid, gid) {\n        path = normalizePath(path);\n        assertRoot(this.root).chownSync(path, true, uid, gid);\n    };\n    /**\n     * Asynchronous `chmod`.\n     * @param path\n     * @param mode\n     * @param callback\n     */\n    FS.prototype.chmod = function (path, mode, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            var numMode = normalizeMode(mode, -1);\n            if (numMode < 0) {\n                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid mode.\");\n            }\n            assertRoot(this.root).chmod(normalizePath(path), false, numMode, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `chmod`.\n     * @param path\n     * @param mode\n     */\n    FS.prototype.chmodSync = function (path, mode) {\n        var numMode = normalizeMode(mode, -1);\n        if (numMode < 0) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid mode.\");\n        }\n        path = normalizePath(path);\n        assertRoot(this.root).chmodSync(path, false, numMode);\n    };\n    /**\n     * Asynchronous `lchmod`.\n     * @param path\n     * @param mode\n     * @param callback\n     */\n    FS.prototype.lchmod = function (path, mode, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            var numMode = normalizeMode(mode, -1);\n            if (numMode < 0) {\n                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid mode.\");\n            }\n            assertRoot(this.root).chmod(normalizePath(path), true, numMode, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `lchmod`.\n     * @param path\n     * @param mode\n     */\n    FS.prototype.lchmodSync = function (path, mode) {\n        var numMode = normalizeMode(mode, -1);\n        if (numMode < 1) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid mode.\");\n        }\n        assertRoot(this.root).chmodSync(normalizePath(path), true, numMode);\n    };\n    /**\n     * Change file timestamps of the file referenced by the supplied path.\n     * @param path\n     * @param atime\n     * @param mtime\n     * @param callback\n     */\n    FS.prototype.utimes = function (path, atime, mtime, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var newCb = wrapCb(cb, 1);\n        try {\n            assertRoot(this.root).utimes(normalizePath(path), normalizeTime(atime), normalizeTime(mtime), newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Change file timestamps of the file referenced by the supplied path.\n     * @param path\n     * @param atime\n     * @param mtime\n     */\n    FS.prototype.utimesSync = function (path, atime, mtime) {\n        assertRoot(this.root).utimesSync(normalizePath(path), normalizeTime(atime), normalizeTime(mtime));\n    };\n    FS.prototype.realpath = function (path, arg2, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        var cache = typeof (arg2) === 'object' ? arg2 : {};\n        cb = typeof (arg2) === 'function' ? arg2 : nopCb;\n        var newCb = wrapCb(cb, 2);\n        try {\n            path = normalizePath(path);\n            assertRoot(this.root).realpath(path, cache, newCb);\n        }\n        catch (e) {\n            newCb(e);\n        }\n    };\n    /**\n     * Synchronous `realpath`.\n     * @param path\n     * @param cache An object literal of mapped paths that can be used to\n     *   force a specific path resolution or avoid additional `fs.stat` calls for\n     *   known real paths.\n     * @return [String]\n     */\n    FS.prototype.realpathSync = function (path, cache) {\n        if (cache === void 0) { cache = {}; }\n        path = normalizePath(path);\n        return assertRoot(this.root).realpathSync(path, cache);\n    };\n    FS.prototype.watchFile = function (filename, arg2, listener) {\n        if (listener === void 0) { listener = nopCb; }\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    FS.prototype.unwatchFile = function (filename, listener) {\n        if (listener === void 0) { listener = nopCb; }\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    FS.prototype.watch = function (filename, arg2, listener) {\n        if (listener === void 0) { listener = nopCb; }\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    FS.prototype.access = function (path, arg2, cb) {\n        if (cb === void 0) { cb = nopCb; }\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    FS.prototype.accessSync = function (path, mode) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    FS.prototype.createReadStream = function (path, options) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    FS.prototype.createWriteStream = function (path, options) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    /**\n     * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.\n     */\n    FS.prototype.wrapCallbacks = function (cbWrapper) {\n        wrapCb = cbWrapper;\n    };\n    FS.prototype.getFdForFile = function (file) {\n        var fd = this.nextFd++;\n        this.fdMap[fd] = file;\n        return fd;\n    };\n    FS.prototype.fd2file = function (fd) {\n        var rv = this.fdMap[fd];\n        if (rv) {\n            return rv;\n        }\n        else {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EBADF, 'Invalid file descriptor.');\n        }\n    };\n    FS.prototype.closeFd = function (fd) {\n        delete this.fdMap[fd];\n    };\n    return FS;\n}());\n/* tslint:disable:variable-name */\n// Exported fs.Stats.\nFS.Stats = node_fs_stats_1[\"default\"];\nexports[\"default\"] = FS;\n//# sourceMappingURL=FS.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\n/**\n * Standard libc error codes. Add more to this enum and ErrorStrings as they are\n * needed.\n * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"EPERM\"] = 1] = \"EPERM\";\n    ErrorCode[ErrorCode[\"ENOENT\"] = 2] = \"ENOENT\";\n    ErrorCode[ErrorCode[\"EIO\"] = 5] = \"EIO\";\n    ErrorCode[ErrorCode[\"EBADF\"] = 9] = \"EBADF\";\n    ErrorCode[ErrorCode[\"EACCES\"] = 13] = \"EACCES\";\n    ErrorCode[ErrorCode[\"EBUSY\"] = 16] = \"EBUSY\";\n    ErrorCode[ErrorCode[\"EEXIST\"] = 17] = \"EEXIST\";\n    ErrorCode[ErrorCode[\"ENOTDIR\"] = 20] = \"ENOTDIR\";\n    ErrorCode[ErrorCode[\"EISDIR\"] = 21] = \"EISDIR\";\n    ErrorCode[ErrorCode[\"EINVAL\"] = 22] = \"EINVAL\";\n    ErrorCode[ErrorCode[\"EFBIG\"] = 27] = \"EFBIG\";\n    ErrorCode[ErrorCode[\"ENOSPC\"] = 28] = \"ENOSPC\";\n    ErrorCode[ErrorCode[\"EROFS\"] = 30] = \"EROFS\";\n    ErrorCode[ErrorCode[\"ENOTEMPTY\"] = 39] = \"ENOTEMPTY\";\n    ErrorCode[ErrorCode[\"ENOTSUP\"] = 95] = \"ENOTSUP\";\n})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));\n/* tslint:disable:variable-name */\n/**\n * Strings associated with each error code.\n * @hidden\n */\nexports.ErrorStrings = {};\nexports.ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';\nexports.ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';\nexports.ErrorStrings[ErrorCode.EIO] = 'Input/output error.';\nexports.ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';\nexports.ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';\nexports.ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';\nexports.ErrorStrings[ErrorCode.EEXIST] = 'File exists.';\nexports.ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';\nexports.ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';\nexports.ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';\nexports.ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';\nexports.ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';\nexports.ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';\nexports.ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';\nexports.ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';\n/* tslint:enable:variable-name */\n/**\n * Represents a BrowserFS error. Passed back to applications after a failed\n * call to the BrowserFS API.\n */\nvar ApiError = (function (_super) {\n    __extends(ApiError, _super);\n    /**\n     * Represents a BrowserFS error. Passed back to applications after a failed\n     * call to the BrowserFS API.\n     *\n     * Error codes mirror those returned by regular Unix file operations, which is\n     * what Node returns.\n     * @constructor ApiError\n     * @param type The type of the error.\n     * @param [message] A descriptive error message.\n     */\n    function ApiError(type, message, path) {\n        if (message === void 0) { message = exports.ErrorStrings[type]; }\n        var _this = _super.call(this, message) || this;\n        // Unsupported.\n        _this.syscall = \"\";\n        _this.errno = type;\n        _this.code = ErrorCode[type];\n        _this.path = path;\n        _this.stack = new Error().stack;\n        _this.message = \"Error: \" + _this.code + \": \" + message + (_this.path ? \", '\" + _this.path + \"'\" : '');\n        return _this;\n    }\n    ApiError.fromJSON = function (json) {\n        var err = new ApiError(0);\n        err.errno = json.errno;\n        err.code = json.code;\n        err.path = json.path;\n        err.stack = json.stack;\n        err.message = json.message;\n        return err;\n    };\n    /**\n     * Creates an ApiError object from a buffer.\n     */\n    ApiError.fromBuffer = function (buffer, i) {\n        if (i === void 0) { i = 0; }\n        return ApiError.fromJSON(JSON.parse(buffer.toString('utf8', i + 4, i + 4 + buffer.readUInt32LE(i))));\n    };\n    ApiError.FileError = function (code, p) {\n        return new ApiError(code, exports.ErrorStrings[code], p);\n    };\n    ApiError.ENOENT = function (path) {\n        return this.FileError(ErrorCode.ENOENT, path);\n    };\n    ApiError.EEXIST = function (path) {\n        return this.FileError(ErrorCode.EEXIST, path);\n    };\n    ApiError.EISDIR = function (path) {\n        return this.FileError(ErrorCode.EISDIR, path);\n    };\n    ApiError.ENOTDIR = function (path) {\n        return this.FileError(ErrorCode.ENOTDIR, path);\n    };\n    ApiError.EPERM = function (path) {\n        return this.FileError(ErrorCode.EPERM, path);\n    };\n    ApiError.ENOTEMPTY = function (path) {\n        return this.FileError(ErrorCode.ENOTEMPTY, path);\n    };\n    /**\n     * @return A friendly error message.\n     */\n    ApiError.prototype.toString = function () {\n        return this.message;\n    };\n    ApiError.prototype.toJSON = function () {\n        return {\n            errno: this.errno,\n            code: this.code,\n            path: this.path,\n            stack: this.stack,\n            message: this.message\n        };\n    };\n    /**\n     * Writes the API error into a buffer.\n     */\n    ApiError.prototype.writeToBuffer = function (buffer, i) {\n        if (buffer === void 0) { buffer = Buffer.alloc(this.bufferSize()); }\n        if (i === void 0) { i = 0; }\n        var bytesWritten = buffer.write(JSON.stringify(this.toJSON()), i + 4);\n        buffer.writeUInt32LE(bytesWritten, i);\n        return buffer;\n    };\n    /**\n     * The size of the API error in buffer-form in bytes.\n     */\n    ApiError.prototype.bufferSize = function () {\n        // 4 bytes for string length.\n        return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));\n    };\n    return ApiError;\n}(Error));\nexports.ApiError = ApiError;\n//# sourceMappingURL=api_error.js.map","exports.__esModule = true;\nvar api_error_1 = require(\"./api_error\");\n/**\n * Base class that contains shared implementations of functions for the file\n * object.\n */\nvar BaseFile = (function () {\n    function BaseFile() {\n    }\n    BaseFile.prototype.sync = function (cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFile.prototype.syncSync = function () {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFile.prototype.datasync = function (cb) {\n        this.sync(cb);\n    };\n    BaseFile.prototype.datasyncSync = function () {\n        return this.syncSync();\n    };\n    BaseFile.prototype.chown = function (uid, gid, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFile.prototype.chownSync = function (uid, gid) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFile.prototype.chmod = function (mode, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFile.prototype.chmodSync = function (mode) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFile.prototype.utimes = function (atime, mtime, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFile.prototype.utimesSync = function (atime, mtime) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    return BaseFile;\n}());\nexports.BaseFile = BaseFile;\n//# sourceMappingURL=file.js.map","exports.__esModule = true;\nvar api_error_1 = require(\"./api_error\");\nvar ActionType;\n(function (ActionType) {\n    // Indicates that the code should not do anything.\n    ActionType[ActionType[\"NOP\"] = 0] = \"NOP\";\n    // Indicates that the code should throw an exception.\n    ActionType[ActionType[\"THROW_EXCEPTION\"] = 1] = \"THROW_EXCEPTION\";\n    // Indicates that the code should truncate the file, but only if it is a file.\n    ActionType[ActionType[\"TRUNCATE_FILE\"] = 2] = \"TRUNCATE_FILE\";\n    // Indicates that the code should create the file.\n    ActionType[ActionType[\"CREATE_FILE\"] = 3] = \"CREATE_FILE\";\n})(ActionType = exports.ActionType || (exports.ActionType = {}));\n/**\n * Represents one of the following file flags. A convenience object.\n *\n * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\n * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\n * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\n * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\n * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n * * `'wx'` - Like 'w' but opens the file in exclusive mode.\n * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\n * * `'a'` - Open file for appending. The file is created if it does not exist.\n * * `'ax'` - Like 'a' but opens the file in exclusive mode.\n * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\n * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\n *\n * Exclusive mode ensures that the file path is newly created.\n */\nvar FileFlag = (function () {\n    /**\n     * This should never be called directly.\n     * @param modeStr The string representing the mode\n     * @throw when the mode string is invalid\n     */\n    function FileFlag(flagStr) {\n        this.flagStr = flagStr;\n        if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"Invalid flag: \" + flagStr);\n        }\n    }\n    /**\n     * Get an object representing the given file flag.\n     * @param modeStr The string representing the flag\n     * @return The FileFlag object representing the flag\n     * @throw when the flag string is invalid\n     */\n    FileFlag.getFileFlag = function (flagStr) {\n        // Check cache first.\n        if (FileFlag.flagCache.hasOwnProperty(flagStr)) {\n            return FileFlag.flagCache[flagStr];\n        }\n        return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);\n    };\n    /**\n     * Get the underlying flag string for this flag.\n     */\n    FileFlag.prototype.getFlagString = function () {\n        return this.flagStr;\n    };\n    /**\n     * Returns true if the file is readable.\n     */\n    FileFlag.prototype.isReadable = function () {\n        return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;\n    };\n    /**\n     * Returns true if the file is writeable.\n     */\n    FileFlag.prototype.isWriteable = function () {\n        return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;\n    };\n    /**\n     * Returns true if the file mode should truncate.\n     */\n    FileFlag.prototype.isTruncating = function () {\n        return this.flagStr.indexOf('w') !== -1;\n    };\n    /**\n     * Returns true if the file is appendable.\n     */\n    FileFlag.prototype.isAppendable = function () {\n        return this.flagStr.indexOf('a') !== -1;\n    };\n    /**\n     * Returns true if the file is open in synchronous mode.\n     */\n    FileFlag.prototype.isSynchronous = function () {\n        return this.flagStr.indexOf('s') !== -1;\n    };\n    /**\n     * Returns true if the file is open in exclusive mode.\n     */\n    FileFlag.prototype.isExclusive = function () {\n        return this.flagStr.indexOf('x') !== -1;\n    };\n    /**\n     * Returns one of the static fields on this object that indicates the\n     * appropriate response to the path existing.\n     */\n    FileFlag.prototype.pathExistsAction = function () {\n        if (this.isExclusive()) {\n            return ActionType.THROW_EXCEPTION;\n        }\n        else if (this.isTruncating()) {\n            return ActionType.TRUNCATE_FILE;\n        }\n        else {\n            return ActionType.NOP;\n        }\n    };\n    /**\n     * Returns one of the static fields on this object that indicates the\n     * appropriate response to the path not existing.\n     */\n    FileFlag.prototype.pathNotExistsAction = function () {\n        if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {\n            return ActionType.CREATE_FILE;\n        }\n        else {\n            return ActionType.THROW_EXCEPTION;\n        }\n    };\n    return FileFlag;\n}());\n// Contains cached FileMode instances.\nFileFlag.flagCache = {};\n// Array of valid mode strings.\nFileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];\nexports.FileFlag = FileFlag;\n//# sourceMappingURL=file_flag.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar api_error_1 = require(\"./api_error\");\nvar file_flag_1 = require(\"./file_flag\");\nvar path = require(\"path\");\nvar util_1 = require(\"./util\");\n/**\n * Basic filesystem class. Most filesystems should extend this class, as it\n * provides default implementations for a handful of methods.\n */\nvar BaseFileSystem = (function () {\n    function BaseFileSystem() {\n    }\n    BaseFileSystem.prototype.supportsLinks = function () {\n        return false;\n    };\n    BaseFileSystem.prototype.diskSpace = function (p, cb) {\n        cb(0, 0);\n    };\n    /**\n     * Opens the file at path p with the given flag. The file must exist.\n     * @param p The path to open.\n     * @param flag The flag to use when opening the file.\n     */\n    BaseFileSystem.prototype.openFile = function (p, flag, cb) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    /**\n     * Create the file at path p with the given mode. Then, open it with the given\n     * flag.\n     */\n    BaseFileSystem.prototype.createFile = function (p, flag, mode, cb) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.open = function (p, flag, mode, cb) {\n        var _this = this;\n        var mustBeFile = function (e, stats) {\n            if (e) {\n                // File does not exist.\n                switch (flag.pathNotExistsAction()) {\n                    case file_flag_1.ActionType.CREATE_FILE:\n                        // Ensure parent exists.\n                        return _this.stat(path.dirname(p), false, function (e, parentStats) {\n                            if (e) {\n                                cb(e);\n                            }\n                            else if (parentStats && !parentStats.isDirectory()) {\n                                cb(api_error_1.ApiError.ENOTDIR(path.dirname(p)));\n                            }\n                            else {\n                                _this.createFile(p, flag, mode, cb);\n                            }\n                        });\n                    case file_flag_1.ActionType.THROW_EXCEPTION:\n                        return cb(api_error_1.ApiError.ENOENT(p));\n                    default:\n                        return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileFlag object.'));\n                }\n            }\n            else {\n                // File exists.\n                if (stats && stats.isDirectory()) {\n                    return cb(api_error_1.ApiError.EISDIR(p));\n                }\n                switch (flag.pathExistsAction()) {\n                    case file_flag_1.ActionType.THROW_EXCEPTION:\n                        return cb(api_error_1.ApiError.EEXIST(p));\n                    case file_flag_1.ActionType.TRUNCATE_FILE:\n                        // NOTE: In a previous implementation, we deleted the file and\n                        // re-created it. However, this created a race condition if another\n                        // asynchronous request was trying to read the file, as the file\n                        // would not exist for a small period of time.\n                        return _this.openFile(p, flag, function (e, fd) {\n                            if (e) {\n                                cb(e);\n                            }\n                            else if (fd) {\n                                fd.truncate(0, function () {\n                                    fd.sync(function () {\n                                        cb(null, fd);\n                                    });\n                                });\n                            }\n                            else {\n                                util_1.fail();\n                            }\n                        });\n                    case file_flag_1.ActionType.NOP:\n                        return _this.openFile(p, flag, cb);\n                    default:\n                        return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileFlag object.'));\n                }\n            }\n        };\n        this.stat(p, false, mustBeFile);\n    };\n    BaseFileSystem.prototype.rename = function (oldPath, newPath, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.renameSync = function (oldPath, newPath) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.stat = function (p, isLstat, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.statSync = function (p, isLstat) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    /**\n     * Opens the file at path p with the given flag. The file must exist.\n     * @param p The path to open.\n     * @param flag The flag to use when opening the file.\n     * @return A File object corresponding to the opened file.\n     */\n    BaseFileSystem.prototype.openFileSync = function (p, flag, mode) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    /**\n     * Create the file at path p with the given mode. Then, open it with the given\n     * flag.\n     */\n    BaseFileSystem.prototype.createFileSync = function (p, flag, mode) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.openSync = function (p, flag, mode) {\n        // Check if the path exists, and is a file.\n        var stats;\n        try {\n            stats = this.statSync(p, false);\n        }\n        catch (e) {\n            // File does not exist.\n            switch (flag.pathNotExistsAction()) {\n                case file_flag_1.ActionType.CREATE_FILE:\n                    // Ensure parent exists.\n                    var parentStats = this.statSync(path.dirname(p), false);\n                    if (!parentStats.isDirectory()) {\n                        throw api_error_1.ApiError.ENOTDIR(path.dirname(p));\n                    }\n                    return this.createFileSync(p, flag, mode);\n                case file_flag_1.ActionType.THROW_EXCEPTION:\n                    throw api_error_1.ApiError.ENOENT(p);\n                default:\n                    throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileFlag object.');\n            }\n        }\n        // File exists.\n        if (stats.isDirectory()) {\n            throw api_error_1.ApiError.EISDIR(p);\n        }\n        switch (flag.pathExistsAction()) {\n            case file_flag_1.ActionType.THROW_EXCEPTION:\n                throw api_error_1.ApiError.EEXIST(p);\n            case file_flag_1.ActionType.TRUNCATE_FILE:\n                // Delete file.\n                this.unlinkSync(p);\n                // Create file. Use the same mode as the old file.\n                // Node itself modifies the ctime when this occurs, so this action\n                // will preserve that behavior if the underlying file system\n                // supports those properties.\n                return this.createFileSync(p, flag, stats.mode);\n            case file_flag_1.ActionType.NOP:\n                return this.openFileSync(p, flag, mode);\n            default:\n                throw new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, 'Invalid FileFlag object.');\n        }\n    };\n    BaseFileSystem.prototype.unlink = function (p, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.unlinkSync = function (p) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.rmdir = function (p, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.rmdirSync = function (p) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.mkdir = function (p, mode, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.mkdirSync = function (p, mode) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.readdir = function (p, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.readdirSync = function (p) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.exists = function (p, cb) {\n        this.stat(p, null, function (err) {\n            cb(!err);\n        });\n    };\n    BaseFileSystem.prototype.existsSync = function (p) {\n        try {\n            this.statSync(p, true);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    BaseFileSystem.prototype.realpath = function (p, cache, cb) {\n        if (this.supportsLinks()) {\n            // The path could contain symlinks. Split up the path,\n            // resolve any symlinks, return the resolved string.\n            var splitPath = p.split(path.sep);\n            // TODO: Simpler to just pass through file, find sep and such.\n            for (var i = 0; i < splitPath.length; i++) {\n                var addPaths = splitPath.slice(0, i + 1);\n                splitPath[i] = path.join.apply(null, addPaths);\n            }\n        }\n        else {\n            // No symlinks. We just need to verify that it exists.\n            this.exists(p, function (doesExist) {\n                if (doesExist) {\n                    cb(null, p);\n                }\n                else {\n                    cb(api_error_1.ApiError.ENOENT(p));\n                }\n            });\n        }\n    };\n    BaseFileSystem.prototype.realpathSync = function (p, cache) {\n        if (this.supportsLinks()) {\n            // The path could contain symlinks. Split up the path,\n            // resolve any symlinks, return the resolved string.\n            var splitPath = p.split(path.sep);\n            // TODO: Simpler to just pass through file, find sep and such.\n            for (var i = 0; i < splitPath.length; i++) {\n                var addPaths = splitPath.slice(0, i + 1);\n                splitPath[i] = path.join.apply(path, addPaths);\n            }\n            return splitPath.join(path.sep);\n        }\n        else {\n            // No symlinks. We just need to verify that it exists.\n            if (this.existsSync(p)) {\n                return p;\n            }\n            else {\n                throw api_error_1.ApiError.ENOENT(p);\n            }\n        }\n    };\n    BaseFileSystem.prototype.truncate = function (p, len, cb) {\n        this.open(p, file_flag_1.FileFlag.getFileFlag('r+'), 0x1a4, (function (er, fd) {\n            if (er) {\n                return cb(er);\n            }\n            fd.truncate(len, (function (er) {\n                fd.close((function (er2) {\n                    cb(er || er2);\n                }));\n            }));\n        }));\n    };\n    BaseFileSystem.prototype.truncateSync = function (p, len) {\n        var fd = this.openSync(p, file_flag_1.FileFlag.getFileFlag('r+'), 0x1a4);\n        // Need to safely close FD, regardless of whether or not truncate succeeds.\n        try {\n            fd.truncateSync(len);\n        }\n        catch (e) {\n            throw e;\n        }\n        finally {\n            fd.closeSync();\n        }\n    };\n    BaseFileSystem.prototype.readFile = function (fname, encoding, flag, cb) {\n        // Wrap cb in file closing code.\n        var oldCb = cb;\n        // Get file.\n        this.open(fname, flag, 0x1a4, function (err, fd) {\n            if (err) {\n                return cb(err);\n            }\n            cb = function (err, arg) {\n                fd.close(function (err2) {\n                    if (!err) {\n                        err = err2;\n                    }\n                    return oldCb(err, arg);\n                });\n            };\n            fd.stat(function (err, stat) {\n                if (err) {\n                    return cb(err);\n                }\n                // Allocate buffer.\n                var buf = Buffer.alloc(stat.size);\n                fd.read(buf, 0, stat.size, 0, function (err) {\n                    if (err) {\n                        return cb(err);\n                    }\n                    else if (encoding === null) {\n                        return cb(err, buf);\n                    }\n                    try {\n                        cb(null, buf.toString(encoding));\n                    }\n                    catch (e) {\n                        cb(e);\n                    }\n                });\n            });\n        });\n    };\n    BaseFileSystem.prototype.readFileSync = function (fname, encoding, flag) {\n        // Get file.\n        var fd = this.openSync(fname, flag, 0x1a4);\n        try {\n            var stat = fd.statSync();\n            // Allocate buffer.\n            var buf = Buffer.alloc(stat.size);\n            fd.readSync(buf, 0, stat.size, 0);\n            fd.closeSync();\n            if (encoding === null) {\n                return buf;\n            }\n            return buf.toString(encoding);\n        }\n        finally {\n            fd.closeSync();\n        }\n    };\n    BaseFileSystem.prototype.writeFile = function (fname, data, encoding, flag, mode, cb) {\n        // Wrap cb in file closing code.\n        var oldCb = cb;\n        // Get file.\n        this.open(fname, flag, 0x1a4, function (err, fd) {\n            if (err) {\n                return cb(err);\n            }\n            cb = function (err) {\n                fd.close(function (err2) {\n                    oldCb(err ? err : err2);\n                });\n            };\n            try {\n                if (typeof data === 'string') {\n                    data = Buffer.from(data, encoding);\n                }\n            }\n            catch (e) {\n                return cb(e);\n            }\n            // Write into file.\n            fd.write(data, 0, data.length, 0, cb);\n        });\n    };\n    BaseFileSystem.prototype.writeFileSync = function (fname, data, encoding, flag, mode) {\n        // Get file.\n        var fd = this.openSync(fname, flag, mode);\n        try {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            // Write into file.\n            fd.writeSync(data, 0, data.length, 0);\n        }\n        finally {\n            fd.closeSync();\n        }\n    };\n    BaseFileSystem.prototype.appendFile = function (fname, data, encoding, flag, mode, cb) {\n        // Wrap cb in file closing code.\n        var oldCb = cb;\n        this.open(fname, flag, mode, function (err, fd) {\n            if (err) {\n                return cb(err);\n            }\n            cb = function (err) {\n                fd.close(function (err2) {\n                    oldCb(err ? err : err2);\n                });\n            };\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            fd.write(data, 0, data.length, null, cb);\n        });\n    };\n    BaseFileSystem.prototype.appendFileSync = function (fname, data, encoding, flag, mode) {\n        var fd = this.openSync(fname, flag, mode);\n        try {\n            if (typeof data === 'string') {\n                data = Buffer.from(data, encoding);\n            }\n            fd.writeSync(data, 0, data.length, null);\n        }\n        finally {\n            fd.closeSync();\n        }\n    };\n    BaseFileSystem.prototype.chmod = function (p, isLchmod, mode, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.chmodSync = function (p, isLchmod, mode) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.chown = function (p, isLchown, uid, gid, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.chownSync = function (p, isLchown, uid, gid) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.utimes = function (p, atime, mtime, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.utimesSync = function (p, atime, mtime) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.link = function (srcpath, dstpath, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.linkSync = function (srcpath, dstpath) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.symlink = function (srcpath, dstpath, type, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.symlinkSync = function (srcpath, dstpath, type) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    BaseFileSystem.prototype.readlink = function (p, cb) {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP));\n    };\n    BaseFileSystem.prototype.readlinkSync = function (p) {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    return BaseFileSystem;\n}());\nexports.BaseFileSystem = BaseFileSystem;\n/**\n * Implements the asynchronous API in terms of the synchronous API.\n * @class SynchronousFileSystem\n */\nvar SynchronousFileSystem = (function (_super) {\n    __extends(SynchronousFileSystem, _super);\n    function SynchronousFileSystem() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SynchronousFileSystem.prototype.supportsSynch = function () {\n        return true;\n    };\n    SynchronousFileSystem.prototype.rename = function (oldPath, newPath, cb) {\n        try {\n            this.renameSync(oldPath, newPath);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.stat = function (p, isLstat, cb) {\n        try {\n            cb(null, this.statSync(p, isLstat));\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.open = function (p, flags, mode, cb) {\n        try {\n            cb(null, this.openSync(p, flags, mode));\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.unlink = function (p, cb) {\n        try {\n            this.unlinkSync(p);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.rmdir = function (p, cb) {\n        try {\n            this.rmdirSync(p);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.mkdir = function (p, mode, cb) {\n        try {\n            this.mkdirSync(p, mode);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.readdir = function (p, cb) {\n        try {\n            cb(null, this.readdirSync(p));\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.chmod = function (p, isLchmod, mode, cb) {\n        try {\n            this.chmodSync(p, isLchmod, mode);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.chown = function (p, isLchown, uid, gid, cb) {\n        try {\n            this.chownSync(p, isLchown, uid, gid);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.utimes = function (p, atime, mtime, cb) {\n        try {\n            this.utimesSync(p, atime, mtime);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.link = function (srcpath, dstpath, cb) {\n        try {\n            this.linkSync(srcpath, dstpath);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.symlink = function (srcpath, dstpath, type, cb) {\n        try {\n            this.symlinkSync(srcpath, dstpath, type);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    SynchronousFileSystem.prototype.readlink = function (p, cb) {\n        try {\n            cb(null, this.readlinkSync(p));\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    return SynchronousFileSystem;\n}(BaseFileSystem));\nexports.SynchronousFileSystem = SynchronousFileSystem;\n//# sourceMappingURL=file_system.js.map","exports.__esModule = true;\n/**\n * @hidden\n */\nvar toExport;\nif (typeof (window) !== 'undefined') {\n    toExport = window;\n}\nelse if (typeof (self) !== 'undefined') {\n    toExport = self;\n}\nelse {\n    toExport = global;\n}\nexports[\"default\"] = toExport;\n//# sourceMappingURL=global.js.map","/*\n * Levenshtein distance, from the `js-levenshtein` NPM module.\n * Copied here to avoid complexity of adding another CommonJS module dependency.\n */\nexports.__esModule = true;\nfunction _min(d0, d1, d2, bx, ay) {\n    return d0 < d1 || d2 < d1\n        ? d0 > d2\n            ? d2 + 1\n            : d0 + 1\n        : bx === ay\n            ? d1\n            : d1 + 1;\n}\n/**\n * Calculates levenshtein distance.\n * @param a\n * @param b\n */\nfunction levenshtein(a, b) {\n    if (a === b) {\n        return 0;\n    }\n    if (a.length > b.length) {\n        var tmp = a;\n        a = b;\n        b = tmp;\n    }\n    var la = a.length;\n    var lb = b.length;\n    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {\n        la--;\n        lb--;\n    }\n    var offset = 0;\n    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {\n        offset++;\n    }\n    la -= offset;\n    lb -= offset;\n    if (la === 0 || lb === 1) {\n        return lb;\n    }\n    var vector = new Array(la << 1);\n    for (var y = 0; y < la;) {\n        vector[la + y] = a.charCodeAt(offset + y);\n        vector[y] = ++y;\n    }\n    var x;\n    var d0;\n    var d1;\n    var d2;\n    var d3;\n    for (x = 0; (x + 3) < lb;) {\n        var bx0 = b.charCodeAt(offset + (d0 = x));\n        var bx1 = b.charCodeAt(offset + (d1 = x + 1));\n        var bx2 = b.charCodeAt(offset + (d2 = x + 2));\n        var bx3 = b.charCodeAt(offset + (d3 = x + 3));\n        var dd_1 = (x += 4);\n        for (var y = 0; y < la;) {\n            var ay = vector[la + y];\n            var dy = vector[y];\n            d0 = _min(dy, d0, d1, bx0, ay);\n            d1 = _min(d0, d1, d2, bx1, ay);\n            d2 = _min(d1, d2, d3, bx2, ay);\n            dd_1 = _min(d2, d3, dd_1, bx3, ay);\n            vector[y++] = dd_1;\n            d3 = d2;\n            d2 = d1;\n            d1 = d0;\n            d0 = dy;\n        }\n    }\n    var dd = 0;\n    for (; x < lb;) {\n        var bx0 = b.charCodeAt(offset + (d0 = x));\n        dd = ++x;\n        for (var y = 0; y < la; y++) {\n            var dy = vector[y];\n            vector[y] = dd = dy < d0 || dd < d0\n                ? dy > dd ? dd + 1 : dy + 1\n                : bx0 === vector[la + y]\n                    ? d0\n                    : d0 + 1;\n            d0 = dy;\n        }\n    }\n    return dd;\n}\nexports[\"default\"] = levenshtein;\n//# sourceMappingURL=levenshtein.js.map","exports.__esModule = true;\nvar FS_1 = require(\"./FS\");\n// Manually export the individual public functions of fs.\n// Required because some code will invoke functions off of the module.\n// e.g.:\n// let writeFile = fs.writeFile;\n// writeFile(...)\n/**\n * @hidden\n */\nvar fs = new FS_1[\"default\"]();\n/**\n * @hidden\n */\nvar _fsMock = {};\n/**\n * @hidden\n */\nvar fsProto = FS_1[\"default\"].prototype;\nObject.keys(fsProto).forEach(function (key) {\n    if (typeof fs[key] === 'function') {\n        _fsMock[key] = function () {\n            return fs[key].apply(fs, arguments);\n        };\n    }\n    else {\n        _fsMock[key] = fs[key];\n    }\n});\n_fsMock['changeFSModule'] = function (newFs) {\n    fs = newFs;\n};\n_fsMock['getFSModule'] = function () {\n    return fs;\n};\n_fsMock['FS'] = FS_1[\"default\"];\nexports[\"default\"] = _fsMock;\n//# sourceMappingURL=node_fs.js.map","exports.__esModule = true;\n/**\n * Indicates the type of the given file. Applied to 'mode'.\n */\nvar FileType;\n(function (FileType) {\n    FileType[FileType[\"FILE\"] = 32768] = \"FILE\";\n    FileType[FileType[\"DIRECTORY\"] = 16384] = \"DIRECTORY\";\n    FileType[FileType[\"SYMLINK\"] = 40960] = \"SYMLINK\";\n})(FileType = exports.FileType || (exports.FileType = {}));\n/**\n * Emulation of Node's `fs.Stats` object.\n *\n * Attribute descriptions are from `man 2 stat'\n * @see http://nodejs.org/api/fs.html#fs_class_fs_stats\n * @see http://man7.org/linux/man-pages/man2/stat.2.html\n */\nvar Stats = (function () {\n    /**\n     * Provides information about a particular entry in the file system.\n     * @param [Number] item_type type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)\n     * @param [Number] size Size of the item in bytes. For directories/symlinks,\n     *   this is normally the size of the struct that represents the item.\n     * @param [Number] mode Unix-style file mode (e.g. 0o644)\n     * @param [Date?] atime time of last access\n     * @param [Date?] mtime time of last modification\n     * @param [Date?] ctime time of creation\n     */\n    function Stats(itemType, size, mode, atime, mtime, ctime) {\n        if (atime === void 0) { atime = new Date(); }\n        if (mtime === void 0) { mtime = new Date(); }\n        if (ctime === void 0) { ctime = new Date(); }\n        this.size = size;\n        this.atime = atime;\n        this.mtime = mtime;\n        this.ctime = ctime;\n        /**\n         * UNSUPPORTED ATTRIBUTES\n         * I assume no one is going to need these details, although we could fake\n         * appropriate values if need be.\n         */\n        // ID of device containing file\n        this.dev = 0;\n        // inode number\n        this.ino = 0;\n        // device ID (if special file)\n        this.rdev = 0;\n        // number of hard links\n        this.nlink = 1;\n        // blocksize for file system I/O\n        this.blksize = 4096;\n        // @todo Maybe support these? atm, it's a one-user filesystem.\n        // user ID of owner\n        this.uid = 0;\n        // group ID of owner\n        this.gid = 0;\n        // time file was created (currently unsupported)\n        this.birthtime = new Date(0);\n        // XXX: Some file systems stash data on stats objects.\n        this.fileData = null;\n        if (!mode) {\n            switch (itemType) {\n                case FileType.FILE:\n                    this.mode = 0x1a4;\n                    break;\n                case FileType.DIRECTORY:\n                default:\n                    this.mode = 0x1ff;\n            }\n        }\n        else {\n            this.mode = mode;\n        }\n        // number of 512B blocks allocated\n        this.blocks = Math.ceil(size / 512);\n        // Check if mode also includes top-most bits, which indicate the file's\n        // type.\n        if (this.mode < 0x1000) {\n            this.mode |= itemType;\n        }\n    }\n    Stats.fromBuffer = function (buffer) {\n        var size = buffer.readUInt32LE(0), mode = buffer.readUInt32LE(4), atime = buffer.readDoubleLE(8), mtime = buffer.readDoubleLE(16), ctime = buffer.readDoubleLE(24);\n        return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));\n    };\n    Stats.prototype.toBuffer = function () {\n        var buffer = Buffer.alloc(32);\n        buffer.writeUInt32LE(this.size, 0);\n        buffer.writeUInt32LE(this.mode, 4);\n        buffer.writeDoubleLE(this.atime.getTime(), 8);\n        buffer.writeDoubleLE(this.mtime.getTime(), 16);\n        buffer.writeDoubleLE(this.ctime.getTime(), 24);\n        return buffer;\n    };\n    /**\n     * **Nonstandard**: Clone the stats object.\n     * @return [BrowserFS.node.fs.Stats]\n     */\n    Stats.prototype.clone = function () {\n        return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);\n    };\n    /**\n     * @return [Boolean] True if this item is a file.\n     */\n    Stats.prototype.isFile = function () {\n        return (this.mode & 0xF000) === FileType.FILE;\n    };\n    /**\n     * @return [Boolean] True if this item is a directory.\n     */\n    Stats.prototype.isDirectory = function () {\n        return (this.mode & 0xF000) === FileType.DIRECTORY;\n    };\n    /**\n     * @return [Boolean] True if this item is a symbolic link (only valid through lstat)\n     */\n    Stats.prototype.isSymbolicLink = function () {\n        return (this.mode & 0xF000) === FileType.SYMLINK;\n    };\n    /**\n     * Change the mode of the file. We use this helper function to prevent messing\n     * up the type of the file, which is encoded in mode.\n     */\n    Stats.prototype.chmod = function (mode) {\n        this.mode = (this.mode & 0xF000) | mode;\n    };\n    // We don't support the following types of files.\n    Stats.prototype.isSocket = function () {\n        return false;\n    };\n    Stats.prototype.isBlockDevice = function () {\n        return false;\n    };\n    Stats.prototype.isCharacterDevice = function () {\n        return false;\n    };\n    Stats.prototype.isFIFO = function () {\n        return false;\n    };\n    return Stats;\n}());\nexports[\"default\"] = Stats;\n//# sourceMappingURL=node_fs_stats.js.map","exports.__esModule = true;\nvar api_error_1 = require(\"./api_error\");\nvar levenshtein_1 = require(\"./levenshtein\");\nvar path = require(\"path\");\nfunction deprecationMessage(print, fsName, opts) {\n    if (print) {\n        console.warn(\"[\" + fsName + \"] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '\" + fsName + \".Create(\" + JSON.stringify(opts) + \", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.\");\n    }\n}\nexports.deprecationMessage = deprecationMessage;\n/**\n * Checks for any IE version, including IE11 which removed MSIE from the\n * userAgent string.\n * @hidden\n */\nexports.isIE = typeof navigator !== \"undefined\" && !!(/(msie) ([\\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf('Trident') !== -1);\n/**\n * Check if we're in a web worker.\n * @hidden\n */\nexports.isWebWorker = typeof window === \"undefined\";\n/**\n * Throws an exception. Called on code paths that should be impossible.\n * @hidden\n */\nfunction fail() {\n    throw new Error(\"BFS has reached an impossible code path; please file a bug.\");\n}\nexports.fail = fail;\n/**\n * Synchronous recursive makedir.\n * @hidden\n */\nfunction mkdirpSync(p, mode, fs) {\n    if (!fs.existsSync(p)) {\n        mkdirpSync(path.dirname(p), mode, fs);\n        fs.mkdirSync(p, mode);\n    }\n}\nexports.mkdirpSync = mkdirpSync;\n/**\n * Converts a buffer into an array buffer. Attempts to do so in a\n * zero-copy manner, e.g. the array references the same memory.\n * @hidden\n */\nfunction buffer2ArrayBuffer(buff) {\n    var u8 = buffer2Uint8array(buff), u8offset = u8.byteOffset, u8Len = u8.byteLength;\n    if (u8offset === 0 && u8Len === u8.buffer.byteLength) {\n        return u8.buffer;\n    }\n    else {\n        return u8.buffer.slice(u8offset, u8offset + u8Len);\n    }\n}\nexports.buffer2ArrayBuffer = buffer2ArrayBuffer;\n/**\n * Converts a buffer into a Uint8Array. Attempts to do so in a\n * zero-copy manner, e.g. the array references the same memory.\n * @hidden\n */\nfunction buffer2Uint8array(buff) {\n    if (buff instanceof Uint8Array) {\n        // BFS & Node v4.0 buffers *are* Uint8Arrays.\n        return buff;\n    }\n    else {\n        // Uint8Arrays can be constructed from arrayish numbers.\n        // At this point, we assume this isn't a BFS array.\n        return new Uint8Array(buff);\n    }\n}\nexports.buffer2Uint8array = buffer2Uint8array;\n/**\n * Converts the given arrayish object into a Buffer. Attempts to\n * be zero-copy.\n * @hidden\n */\nfunction arrayish2Buffer(arr) {\n    if (arr instanceof Buffer) {\n        return arr;\n    }\n    else if (arr instanceof Uint8Array) {\n        return uint8Array2Buffer(arr);\n    }\n    else {\n        return Buffer.from(arr);\n    }\n}\nexports.arrayish2Buffer = arrayish2Buffer;\n/**\n * Converts the given Uint8Array into a Buffer. Attempts to be zero-copy.\n * @hidden\n */\nfunction uint8Array2Buffer(u8) {\n    if (u8 instanceof Buffer) {\n        return u8;\n    }\n    else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {\n        return arrayBuffer2Buffer(u8.buffer);\n    }\n    else {\n        return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);\n    }\n}\nexports.uint8Array2Buffer = uint8Array2Buffer;\n/**\n * Converts the given array buffer into a Buffer. Attempts to be\n * zero-copy.\n * @hidden\n */\nfunction arrayBuffer2Buffer(ab) {\n    return Buffer.from(ab);\n}\nexports.arrayBuffer2Buffer = arrayBuffer2Buffer;\n/**\n * Copies a slice of the given buffer\n * @hidden\n */\nfunction copyingSlice(buff, start, end) {\n    if (start === void 0) { start = 0; }\n    if (end === void 0) { end = buff.length; }\n    if (start < 0 || end < 0 || end > buff.length || start > end) {\n        throw new TypeError(\"Invalid slice bounds on buffer of length \" + buff.length + \": [\" + start + \", \" + end + \"]\");\n    }\n    if (buff.length === 0) {\n        // Avoid s0 corner case in ArrayBuffer case.\n        return emptyBuffer();\n    }\n    else {\n        var u8 = buffer2Uint8array(buff), s0 = buff[0], newS0 = (s0 + 1) % 0xFF;\n        buff[0] = newS0;\n        if (u8[0] === newS0) {\n            // Same memory. Revert & copy.\n            u8[0] = s0;\n            return uint8Array2Buffer(u8.slice(start, end));\n        }\n        else {\n            // Revert.\n            buff[0] = s0;\n            return uint8Array2Buffer(u8.subarray(start, end));\n        }\n    }\n}\nexports.copyingSlice = copyingSlice;\n/**\n * @hidden\n */\nvar emptyBuff = null;\n/**\n * Returns an empty buffer.\n * @hidden\n */\nfunction emptyBuffer() {\n    if (emptyBuff) {\n        return emptyBuff;\n    }\n    return emptyBuff = Buffer.alloc(0);\n}\nexports.emptyBuffer = emptyBuffer;\n/**\n * Option validator for a Buffer file system option.\n * @hidden\n */\nfunction bufferValidator(v, cb) {\n    if (Buffer.isBuffer(v)) {\n        cb();\n    }\n    else {\n        cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"option must be a Buffer.\"));\n    }\n}\nexports.bufferValidator = bufferValidator;\n/**\n * Checks that the given options object is valid for the file system options.\n * @hidden\n */\nfunction checkOptions(fsType, opts, cb) {\n    var optsInfo = fsType.Options;\n    var fsName = fsType.Name;\n    var pendingValidators = 0;\n    var callbackCalled = false;\n    var loopEnded = false;\n    function validatorCallback(e) {\n        if (!callbackCalled) {\n            if (e) {\n                callbackCalled = true;\n                cb(e);\n            }\n            pendingValidators--;\n            if (pendingValidators === 0 && loopEnded) {\n                cb();\n            }\n        }\n    }\n    var _loop_1 = function (optName) {\n        if (optsInfo.hasOwnProperty(optName)) {\n            var opt = optsInfo[optName];\n            var providedValue = opts[optName];\n            if (providedValue === undefined || providedValue === null) {\n                if (!opt.optional) {\n                    // Required option, not provided.\n                    // Any incorrect options provided? Which ones are close to the provided one?\n                    // (edit distance 5 === close)\n                    var incorrectOptions = Object.keys(opts).filter(function (o) { return !(o in optsInfo); }).map(function (a) {\n                        return { str: a, distance: levenshtein_1[\"default\"](optName, a) };\n                    }).filter(function (o) { return o.distance < 5; }).sort(function (a, b) { return a.distance - b.distance; });\n                    // Validators may be synchronous.\n                    if (callbackCalled) {\n                        return { value: void 0 };\n                    }\n                    callbackCalled = true;\n                    return { value: cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"[\" + fsName + \"] Required option '\" + optName + \"' not provided.\" + (incorrectOptions.length > 0 ? \" You provided unrecognized option '\" + incorrectOptions[0].str + \"'; perhaps you meant to type '\" + optName + \"'.\" : '') + \"\\nOption description: \" + opt.description)) };\n                }\n                // Else: Optional option, not provided. That is OK.\n            }\n            else {\n                // Option provided! Check type.\n                var typeMatches = false;\n                if (Array.isArray(opt.type)) {\n                    typeMatches = opt.type.indexOf(typeof (providedValue)) !== -1;\n                }\n                else {\n                    typeMatches = typeof (providedValue) === opt.type;\n                }\n                if (!typeMatches) {\n                    // Validators may be synchronous.\n                    if (callbackCalled) {\n                        return { value: void 0 };\n                    }\n                    callbackCalled = true;\n                    return { value: cb(new api_error_1.ApiError(api_error_1.ErrorCode.EINVAL, \"[\" + fsName + \"] Value provided for option \" + optName + \" is not the proper type. Expected \" + (Array.isArray(opt.type) ? \"one of {\" + opt.type.join(\", \") + \"}\" : opt.type) + \", but received \" + typeof (providedValue) + \"\\nOption description: \" + opt.description)) };\n                }\n                else if (opt.validator) {\n                    pendingValidators++;\n                    opt.validator(providedValue, validatorCallback);\n                }\n                // Otherwise: All good!\n            }\n        }\n    };\n    // Check for required options.\n    for (var optName in optsInfo) {\n        var state_1 = _loop_1(optName);\n        if (typeof state_1 === \"object\")\n            return state_1.value;\n    }\n    loopEnded = true;\n    if (pendingValidators === 0 && !callbackCalled) {\n        cb();\n    }\n}\nexports.checkOptions = checkOptions;\n//# sourceMappingURL=util.js.map","exports.__esModule = true;\nvar node_fs_stats_1 = require(\"../core/node_fs_stats\");\n/**\n * Generic inode definition that can easily be serialized.\n */\nvar Inode = (function () {\n    function Inode(id, size, mode, atime, mtime, ctime) {\n        this.id = id;\n        this.size = size;\n        this.mode = mode;\n        this.atime = atime;\n        this.mtime = mtime;\n        this.ctime = ctime;\n    }\n    /**\n     * Converts the buffer into an Inode.\n     */\n    Inode.fromBuffer = function (buffer) {\n        if (buffer === undefined) {\n            throw new Error(\"NO\");\n        }\n        return new Inode(buffer.toString('ascii', 30), buffer.readUInt32LE(0), buffer.readUInt16LE(4), buffer.readDoubleLE(6), buffer.readDoubleLE(14), buffer.readDoubleLE(22));\n    };\n    /**\n     * Handy function that converts the Inode to a Node Stats object.\n     */\n    Inode.prototype.toStats = function () {\n        return new node_fs_stats_1[\"default\"]((this.mode & 0xF000) === node_fs_stats_1.FileType.DIRECTORY ? node_fs_stats_1.FileType.DIRECTORY : node_fs_stats_1.FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));\n    };\n    /**\n     * Get the size of this Inode, in bytes.\n     */\n    Inode.prototype.getSize = function () {\n        // ASSUMPTION: ID is ASCII (1 byte per char).\n        return 30 + this.id.length;\n    };\n    /**\n     * Writes the inode into the start of the buffer.\n     */\n    Inode.prototype.toBuffer = function (buff) {\n        if (buff === void 0) { buff = Buffer.alloc(this.getSize()); }\n        buff.writeUInt32LE(this.size, 0);\n        buff.writeUInt16LE(this.mode, 4);\n        buff.writeDoubleLE(this.atime, 6);\n        buff.writeDoubleLE(this.mtime, 14);\n        buff.writeDoubleLE(this.ctime, 22);\n        buff.write(this.id, 30, this.id.length, 'ascii');\n        return buff;\n    };\n    /**\n     * Updates the Inode using information from the stats object. Used by file\n     * systems at sync time, e.g.:\n     * - Program opens file and gets a File object.\n     * - Program mutates file. File object is responsible for maintaining\n     *   metadata changes locally -- typically in a Stats object.\n     * - Program closes file. File object's metadata changes are synced with the\n     *   file system.\n     * @return True if any changes have occurred.\n     */\n    Inode.prototype.update = function (stats) {\n        var hasChanged = false;\n        if (this.size !== stats.size) {\n            this.size = stats.size;\n            hasChanged = true;\n        }\n        if (this.mode !== stats.mode) {\n            this.mode = stats.mode;\n            hasChanged = true;\n        }\n        var atimeMs = stats.atime.getTime();\n        if (this.atime !== atimeMs) {\n            this.atime = atimeMs;\n            hasChanged = true;\n        }\n        var mtimeMs = stats.mtime.getTime();\n        if (this.mtime !== mtimeMs) {\n            this.mtime = mtimeMs;\n            hasChanged = true;\n        }\n        var ctimeMs = stats.ctime.getTime();\n        if (this.ctime !== ctimeMs) {\n            this.ctime = ctimeMs;\n            hasChanged = true;\n        }\n        return hasChanged;\n    };\n    // XXX: Copied from Stats. Should reconcile these two into something more\n    //      compact.\n    /**\n     * @return [Boolean] True if this item is a file.\n     */\n    Inode.prototype.isFile = function () {\n        return (this.mode & 0xF000) === node_fs_stats_1.FileType.FILE;\n    };\n    /**\n     * @return [Boolean] True if this item is a directory.\n     */\n    Inode.prototype.isDirectory = function () {\n        return (this.mode & 0xF000) === node_fs_stats_1.FileType.DIRECTORY;\n    };\n    return Inode;\n}());\nexports[\"default\"] = Inode;\n//# sourceMappingURL=inode.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar file_system_1 = require(\"../core/file_system\");\nvar api_error_1 = require(\"../core/api_error\");\nvar node_fs_stats_1 = require(\"../core/node_fs_stats\");\nvar path = require(\"path\");\nvar inode_1 = require(\"../generic/inode\");\nvar preload_file_1 = require(\"../generic/preload_file\");\nvar util_1 = require(\"../core/util\");\n/**\n * @hidden\n */\nvar ROOT_NODE_ID = \"/\";\n/**\n * @hidden\n */\nvar emptyDirNode = null;\n/**\n * Returns an empty directory node.\n * @hidden\n */\nfunction getEmptyDirNode() {\n    if (emptyDirNode) {\n        return emptyDirNode;\n    }\n    return emptyDirNode = Buffer.from(\"{}\");\n}\n/**\n * Generates a random ID.\n * @hidden\n */\nfunction GenerateRandomID() {\n    // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0;\n        var v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n/**\n * Helper function. Checks if 'e' is defined. If so, it triggers the callback\n * with 'e' and returns false. Otherwise, returns true.\n * @hidden\n */\nfunction noError(e, cb) {\n    if (e) {\n        cb(e);\n        return false;\n    }\n    return true;\n}\n/**\n * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,\n * triggers the callback with 'e', and returns false. Otherwise, returns true.\n * @hidden\n */\nfunction noErrorTx(e, tx, cb) {\n    if (e) {\n        tx.abort(function () {\n            cb(e);\n        });\n        return false;\n    }\n    return true;\n}\n/**\n * A simple RW transaction for simple synchronous key-value stores.\n */\nvar SimpleSyncRWTransaction = (function () {\n    function SimpleSyncRWTransaction(store) {\n        this.store = store;\n        /**\n         * Stores data in the keys we modify prior to modifying them.\n         * Allows us to roll back commits.\n         */\n        this.originalData = {};\n        /**\n         * List of keys modified in this transaction, if any.\n         */\n        this.modifiedKeys = [];\n    }\n    SimpleSyncRWTransaction.prototype.get = function (key) {\n        var val = this.store.get(key);\n        this.stashOldValue(key, val);\n        return val;\n    };\n    SimpleSyncRWTransaction.prototype.put = function (key, data, overwrite) {\n        this.markModified(key);\n        return this.store.put(key, data, overwrite);\n    };\n    SimpleSyncRWTransaction.prototype.del = function (key) {\n        this.markModified(key);\n        this.store.del(key);\n    };\n    SimpleSyncRWTransaction.prototype.commit = function () { };\n    SimpleSyncRWTransaction.prototype.abort = function () {\n        // Rollback old values.\n        for (var _i = 0, _a = this.modifiedKeys; _i < _a.length; _i++) {\n            var key = _a[_i];\n            var value = this.originalData[key];\n            if (!value) {\n                // Key didn't exist.\n                this.store.del(key);\n            }\n            else {\n                // Key existed. Store old value.\n                this.store.put(key, value, true);\n            }\n        }\n    };\n    /**\n     * Stashes given key value pair into `originalData` if it doesn't already\n     * exist. Allows us to stash values the program is requesting anyway to\n     * prevent needless `get` requests if the program modifies the data later\n     * on during the transaction.\n     */\n    SimpleSyncRWTransaction.prototype.stashOldValue = function (key, value) {\n        // Keep only the earliest value in the transaction.\n        if (!this.originalData.hasOwnProperty(key)) {\n            this.originalData[key] = value;\n        }\n    };\n    /**\n     * Marks the given key as modified, and stashes its value if it has not been\n     * stashed already.\n     */\n    SimpleSyncRWTransaction.prototype.markModified = function (key) {\n        if (this.modifiedKeys.indexOf(key) === -1) {\n            this.modifiedKeys.push(key);\n            if (!this.originalData.hasOwnProperty(key)) {\n                this.originalData[key] = this.store.get(key);\n            }\n        }\n    };\n    return SimpleSyncRWTransaction;\n}());\nexports.SimpleSyncRWTransaction = SimpleSyncRWTransaction;\nvar SyncKeyValueFile = (function (_super) {\n    __extends(SyncKeyValueFile, _super);\n    function SyncKeyValueFile(_fs, _path, _flag, _stat, contents) {\n        return _super.call(this, _fs, _path, _flag, _stat, contents) || this;\n    }\n    SyncKeyValueFile.prototype.syncSync = function () {\n        if (this.isDirty()) {\n            this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());\n            this.resetDirty();\n        }\n    };\n    SyncKeyValueFile.prototype.closeSync = function () {\n        this.syncSync();\n    };\n    return SyncKeyValueFile;\n}(preload_file_1[\"default\"]));\nexports.SyncKeyValueFile = SyncKeyValueFile;\n/**\n * A \"Synchronous key-value file system\". Stores data to/retrieves data from an\n * underlying key-value store.\n *\n * We use a unique ID for each node in the file system. The root node has a\n * fixed ID.\n * @todo Introduce Node ID caching.\n * @todo Check modes.\n */\nvar SyncKeyValueFileSystem = (function (_super) {\n    __extends(SyncKeyValueFileSystem, _super);\n    function SyncKeyValueFileSystem(options) {\n        var _this = _super.call(this) || this;\n        _this.store = options.store;\n        // INVARIANT: Ensure that the root exists.\n        _this.makeRootDirectory();\n        return _this;\n    }\n    SyncKeyValueFileSystem.isAvailable = function () { return true; };\n    SyncKeyValueFileSystem.prototype.getName = function () { return this.store.name(); };\n    SyncKeyValueFileSystem.prototype.isReadOnly = function () { return false; };\n    SyncKeyValueFileSystem.prototype.supportsSymlinks = function () { return false; };\n    SyncKeyValueFileSystem.prototype.supportsProps = function () { return false; };\n    SyncKeyValueFileSystem.prototype.supportsSynch = function () { return true; };\n    /**\n     * Delete all contents stored in the file system.\n     */\n    SyncKeyValueFileSystem.prototype.empty = function () {\n        this.store.clear();\n        // INVARIANT: Root always exists.\n        this.makeRootDirectory();\n    };\n    SyncKeyValueFileSystem.prototype.renameSync = function (oldPath, newPath) {\n        var tx = this.store.beginTransaction('readwrite'), oldParent = path.dirname(oldPath), oldName = path.basename(oldPath), newParent = path.dirname(newPath), newName = path.basename(newPath), \n        // Remove oldPath from parent's directory listing.\n        oldDirNode = this.findINode(tx, oldParent), oldDirList = this.getDirListing(tx, oldParent, oldDirNode);\n        if (!oldDirList[oldName]) {\n            throw api_error_1.ApiError.ENOENT(oldPath);\n        }\n        var nodeId = oldDirList[oldName];\n        delete oldDirList[oldName];\n        // Invariant: Can't move a folder inside itself.\n        // This funny little hack ensures that the check passes only if oldPath\n        // is a subpath of newParent. We append '/' to avoid matching folders that\n        // are a substring of the bottom-most folder in the path.\n        if ((newParent + '/').indexOf(oldPath + '/') === 0) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EBUSY, oldParent);\n        }\n        // Add newPath to parent's directory listing.\n        var newDirNode, newDirList;\n        if (newParent === oldParent) {\n            // Prevent us from re-grabbing the same directory listing, which still\n            // contains oldName.\n            newDirNode = oldDirNode;\n            newDirList = oldDirList;\n        }\n        else {\n            newDirNode = this.findINode(tx, newParent);\n            newDirList = this.getDirListing(tx, newParent, newDirNode);\n        }\n        if (newDirList[newName]) {\n            // If it's a file, delete it.\n            var newNameNode = this.getINode(tx, newPath, newDirList[newName]);\n            if (newNameNode.isFile()) {\n                try {\n                    tx.del(newNameNode.id);\n                    tx.del(newDirList[newName]);\n                }\n                catch (e) {\n                    tx.abort();\n                    throw e;\n                }\n            }\n            else {\n                // If it's a directory, throw a permissions error.\n                throw api_error_1.ApiError.EPERM(newPath);\n            }\n        }\n        newDirList[newName] = nodeId;\n        // Commit the two changed directory listings.\n        try {\n            tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);\n            tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);\n        }\n        catch (e) {\n            tx.abort();\n            throw e;\n        }\n        tx.commit();\n    };\n    SyncKeyValueFileSystem.prototype.statSync = function (p, isLstat) {\n        // Get the inode to the item, convert it into a Stats object.\n        return this.findINode(this.store.beginTransaction('readonly'), p).toStats();\n    };\n    SyncKeyValueFileSystem.prototype.createFileSync = function (p, flag, mode) {\n        var tx = this.store.beginTransaction('readwrite'), data = util_1.emptyBuffer(), newFile = this.commitNewFile(tx, p, node_fs_stats_1.FileType.FILE, mode, data);\n        // Open the file.\n        return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);\n    };\n    SyncKeyValueFileSystem.prototype.openFileSync = function (p, flag) {\n        var tx = this.store.beginTransaction('readonly'), node = this.findINode(tx, p), data = tx.get(node.id);\n        if (data === undefined) {\n            throw api_error_1.ApiError.ENOENT(p);\n        }\n        return new SyncKeyValueFile(this, p, flag, node.toStats(), data);\n    };\n    SyncKeyValueFileSystem.prototype.unlinkSync = function (p) {\n        this.removeEntry(p, false);\n    };\n    SyncKeyValueFileSystem.prototype.rmdirSync = function (p) {\n        // Check first if directory is empty.\n        if (this.readdirSync(p).length > 0) {\n            throw api_error_1.ApiError.ENOTEMPTY(p);\n        }\n        else {\n            this.removeEntry(p, true);\n        }\n    };\n    SyncKeyValueFileSystem.prototype.mkdirSync = function (p, mode) {\n        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');\n        this.commitNewFile(tx, p, node_fs_stats_1.FileType.DIRECTORY, mode, data);\n    };\n    SyncKeyValueFileSystem.prototype.readdirSync = function (p) {\n        var tx = this.store.beginTransaction('readonly');\n        return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));\n    };\n    SyncKeyValueFileSystem.prototype._syncSync = function (p, data, stats) {\n        // @todo Ensure mtime updates properly, and use that to determine if a data\n        //       update is required.\n        var tx = this.store.beginTransaction('readwrite'), \n        // We use the _findInode helper because we actually need the INode id.\n        fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)), fileInode = this.getINode(tx, p, fileInodeId), inodeChanged = fileInode.update(stats);\n        try {\n            // Sync data.\n            tx.put(fileInode.id, data, true);\n            // Sync metadata.\n            if (inodeChanged) {\n                tx.put(fileInodeId, fileInode.toBuffer(), true);\n            }\n        }\n        catch (e) {\n            tx.abort();\n            throw e;\n        }\n        tx.commit();\n    };\n    /**\n     * Checks if the root directory exists. Creates it if it doesn't.\n     */\n    SyncKeyValueFileSystem.prototype.makeRootDirectory = function () {\n        var tx = this.store.beginTransaction('readwrite');\n        if (tx.get(ROOT_NODE_ID) === undefined) {\n            // Create new inode.\n            var currTime = (new Date()).getTime(), \n            // Mode 0666\n            dirInode = new inode_1[\"default\"](GenerateRandomID(), 4096, 511 | node_fs_stats_1.FileType.DIRECTORY, currTime, currTime, currTime);\n            // If the root doesn't exist, the first random ID shouldn't exist,\n            // either.\n            tx.put(dirInode.id, getEmptyDirNode(), false);\n            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);\n            tx.commit();\n        }\n    };\n    /**\n     * Helper function for findINode.\n     * @param parent The parent directory of the file we are attempting to find.\n     * @param filename The filename of the inode we are attempting to find, minus\n     *   the parent.\n     * @return string The ID of the file's inode in the file system.\n     */\n    SyncKeyValueFileSystem.prototype._findINode = function (tx, parent, filename) {\n        var _this = this;\n        var readDirectory = function (inode) {\n            // Get the root's directory listing.\n            var dirList = _this.getDirListing(tx, parent, inode);\n            // Get the file's ID.\n            if (dirList[filename]) {\n                return dirList[filename];\n            }\n            else {\n                throw api_error_1.ApiError.ENOENT(path.resolve(parent, filename));\n            }\n        };\n        if (parent === '/') {\n            if (filename === '') {\n                // BASE CASE #1: Return the root's ID.\n                return ROOT_NODE_ID;\n            }\n            else {\n                // BASE CASE #2: Find the item in the root ndoe.\n                return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));\n            }\n        }\n        else {\n            return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));\n        }\n    };\n    /**\n     * Finds the Inode of the given path.\n     * @param p The path to look up.\n     * @return The Inode of the path p.\n     * @todo memoize/cache\n     */\n    SyncKeyValueFileSystem.prototype.findINode = function (tx, p) {\n        return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));\n    };\n    /**\n     * Given the ID of a node, retrieves the corresponding Inode.\n     * @param tx The transaction to use.\n     * @param p The corresponding path to the file (used for error messages).\n     * @param id The ID to look up.\n     */\n    SyncKeyValueFileSystem.prototype.getINode = function (tx, p, id) {\n        var inode = tx.get(id);\n        if (inode === undefined) {\n            throw api_error_1.ApiError.ENOENT(p);\n        }\n        return inode_1[\"default\"].fromBuffer(inode);\n    };\n    /**\n     * Given the Inode of a directory, retrieves the corresponding directory\n     * listing.\n     */\n    SyncKeyValueFileSystem.prototype.getDirListing = function (tx, p, inode) {\n        if (!inode.isDirectory()) {\n            throw api_error_1.ApiError.ENOTDIR(p);\n        }\n        var data = tx.get(inode.id);\n        if (data === undefined) {\n            throw api_error_1.ApiError.ENOENT(p);\n        }\n        return JSON.parse(data.toString());\n    };\n    /**\n     * Creates a new node under a random ID. Retries 5 times before giving up in\n     * the exceedingly unlikely chance that we try to reuse a random GUID.\n     * @return The GUID that the data was stored under.\n     */\n    SyncKeyValueFileSystem.prototype.addNewNode = function (tx, data) {\n        var retries = 0;\n        var currId;\n        while (retries < 5) {\n            try {\n                currId = GenerateRandomID();\n                tx.put(currId, data, false);\n                return currId;\n            }\n            catch (e) {\n                // Ignore and reroll.\n            }\n        }\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.EIO, 'Unable to commit data to key-value store.');\n    };\n    /**\n     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n     * the given mode.\n     * Note: This will commit the transaction.\n     * @param p The path to the new file.\n     * @param type The type of the new file.\n     * @param mode The mode to create the new file with.\n     * @param data The data to store at the file's data node.\n     * @return The Inode for the new file.\n     */\n    SyncKeyValueFileSystem.prototype.commitNewFile = function (tx, p, type, mode, data) {\n        var parentDir = path.dirname(p), fname = path.basename(p), parentNode = this.findINode(tx, parentDir), dirListing = this.getDirListing(tx, parentDir, parentNode), currTime = (new Date()).getTime();\n        // Invariant: The root always exists.\n        // If we don't check this prior to taking steps below, we will create a\n        // file with name '' in root should p == '/'.\n        if (p === '/') {\n            throw api_error_1.ApiError.EEXIST(p);\n        }\n        // Check if file already exists.\n        if (dirListing[fname]) {\n            throw api_error_1.ApiError.EEXIST(p);\n        }\n        var fileNode;\n        try {\n            // Commit data.\n            var dataId = this.addNewNode(tx, data);\n            fileNode = new inode_1[\"default\"](dataId, data.length, mode | type, currTime, currTime, currTime);\n            // Commit file node.\n            var fileNodeId = this.addNewNode(tx, fileNode.toBuffer());\n            // Update and commit parent directory listing.\n            dirListing[fname] = fileNodeId;\n            tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);\n        }\n        catch (e) {\n            tx.abort();\n            throw e;\n        }\n        tx.commit();\n        return fileNode;\n    };\n    /**\n     * Remove all traces of the given path from the file system.\n     * @param p The path to remove from the file system.\n     * @param isDir Does the path belong to a directory, or a file?\n     * @todo Update mtime.\n     */\n    SyncKeyValueFileSystem.prototype.removeEntry = function (p, isDir) {\n        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), parentNode = this.findINode(tx, parent), parentListing = this.getDirListing(tx, parent, parentNode), fileName = path.basename(p);\n        if (!parentListing[fileName]) {\n            throw api_error_1.ApiError.ENOENT(p);\n        }\n        // Remove from directory listing of parent.\n        var fileNodeId = parentListing[fileName];\n        delete parentListing[fileName];\n        // Get file inode.\n        var fileNode = this.getINode(tx, p, fileNodeId);\n        if (!isDir && fileNode.isDirectory()) {\n            throw api_error_1.ApiError.EISDIR(p);\n        }\n        else if (isDir && !fileNode.isDirectory()) {\n            throw api_error_1.ApiError.ENOTDIR(p);\n        }\n        try {\n            // Delete data.\n            tx.del(fileNode.id);\n            // Delete node.\n            tx.del(fileNodeId);\n            // Update directory listing.\n            tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);\n        }\n        catch (e) {\n            tx.abort();\n            throw e;\n        }\n        // Success.\n        tx.commit();\n    };\n    return SyncKeyValueFileSystem;\n}(file_system_1.SynchronousFileSystem));\nexports.SyncKeyValueFileSystem = SyncKeyValueFileSystem;\nvar AsyncKeyValueFile = (function (_super) {\n    __extends(AsyncKeyValueFile, _super);\n    function AsyncKeyValueFile(_fs, _path, _flag, _stat, contents) {\n        return _super.call(this, _fs, _path, _flag, _stat, contents) || this;\n    }\n    AsyncKeyValueFile.prototype.sync = function (cb) {\n        var _this = this;\n        if (this.isDirty()) {\n            this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function (e) {\n                if (!e) {\n                    _this.resetDirty();\n                }\n                cb(e);\n            });\n        }\n        else {\n            cb();\n        }\n    };\n    AsyncKeyValueFile.prototype.close = function (cb) {\n        this.sync(cb);\n    };\n    return AsyncKeyValueFile;\n}(preload_file_1[\"default\"]));\nexports.AsyncKeyValueFile = AsyncKeyValueFile;\n/**\n * An \"Asynchronous key-value file system\". Stores data to/retrieves data from\n * an underlying asynchronous key-value store.\n */\nvar AsyncKeyValueFileSystem = (function (_super) {\n    __extends(AsyncKeyValueFileSystem, _super);\n    function AsyncKeyValueFileSystem() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsyncKeyValueFileSystem.isAvailable = function () { return true; };\n    /**\n     * Initializes the file system. Typically called by subclasses' async\n     * constructors.\n     */\n    AsyncKeyValueFileSystem.prototype.init = function (store, cb) {\n        this.store = store;\n        // INVARIANT: Ensure that the root exists.\n        this.makeRootDirectory(cb);\n    };\n    AsyncKeyValueFileSystem.prototype.getName = function () { return this.store.name(); };\n    AsyncKeyValueFileSystem.prototype.isReadOnly = function () { return false; };\n    AsyncKeyValueFileSystem.prototype.supportsSymlinks = function () { return false; };\n    AsyncKeyValueFileSystem.prototype.supportsProps = function () { return false; };\n    AsyncKeyValueFileSystem.prototype.supportsSynch = function () { return false; };\n    /**\n     * Delete all contents stored in the file system.\n     */\n    AsyncKeyValueFileSystem.prototype.empty = function (cb) {\n        var _this = this;\n        this.store.clear(function (e) {\n            if (noError(e, cb)) {\n                // INVARIANT: Root always exists.\n                _this.makeRootDirectory(cb);\n            }\n        });\n    };\n    AsyncKeyValueFileSystem.prototype.rename = function (oldPath, newPath, cb) {\n        var _this = this;\n        var tx = this.store.beginTransaction('readwrite');\n        var oldParent = path.dirname(oldPath), oldName = path.basename(oldPath);\n        var newParent = path.dirname(newPath), newName = path.basename(newPath);\n        var inodes = {};\n        var lists = {};\n        var errorOccurred = false;\n        // Invariant: Can't move a folder inside itself.\n        // This funny little hack ensures that the check passes only if oldPath\n        // is a subpath of newParent. We append '/' to avoid matching folders that\n        // are a substring of the bottom-most folder in the path.\n        if ((newParent + '/').indexOf(oldPath + '/') === 0) {\n            return cb(new api_error_1.ApiError(api_error_1.ErrorCode.EBUSY, oldParent));\n        }\n        /**\n         * Responsible for Phase 2 of the rename operation: Modifying and\n         * committing the directory listings. Called once we have successfully\n         * retrieved both the old and new parent's inodes and listings.\n         */\n        var theOleSwitcharoo = function () {\n            // Sanity check: Ensure both paths are present, and no error has occurred.\n            if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {\n                return;\n            }\n            var oldParentList = lists[oldParent], oldParentINode = inodes[oldParent], newParentList = lists[newParent], newParentINode = inodes[newParent];\n            // Delete file from old parent.\n            if (!oldParentList[oldName]) {\n                cb(api_error_1.ApiError.ENOENT(oldPath));\n            }\n            else {\n                var fileId_1 = oldParentList[oldName];\n                delete oldParentList[oldName];\n                // Finishes off the renaming process by adding the file to the new\n                // parent.\n                var completeRename_1 = function () {\n                    newParentList[newName] = fileId_1;\n                    // Commit old parent's list.\n                    tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, function (e) {\n                        if (noErrorTx(e, tx, cb)) {\n                            if (oldParent === newParent) {\n                                // DONE!\n                                tx.commit(cb);\n                            }\n                            else {\n                                // Commit new parent's list.\n                                tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, function (e) {\n                                    if (noErrorTx(e, tx, cb)) {\n                                        tx.commit(cb);\n                                    }\n                                });\n                            }\n                        }\n                    });\n                };\n                if (newParentList[newName]) {\n                    // 'newPath' already exists. Check if it's a file or a directory, and\n                    // act accordingly.\n                    _this.getINode(tx, newPath, newParentList[newName], function (e, inode) {\n                        if (noErrorTx(e, tx, cb)) {\n                            if (inode.isFile()) {\n                                // Delete the file and continue.\n                                tx.del(inode.id, function (e) {\n                                    if (noErrorTx(e, tx, cb)) {\n                                        tx.del(newParentList[newName], function (e) {\n                                            if (noErrorTx(e, tx, cb)) {\n                                                completeRename_1();\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                            else {\n                                // Can't overwrite a directory using rename.\n                                tx.abort(function (e) {\n                                    cb(api_error_1.ApiError.EPERM(newPath));\n                                });\n                            }\n                        }\n                    });\n                }\n                else {\n                    completeRename_1();\n                }\n            }\n        };\n        /**\n         * Grabs a path's inode and directory listing, and shoves it into the\n         * inodes and lists hashes.\n         */\n        var processInodeAndListings = function (p) {\n            _this.findINodeAndDirListing(tx, p, function (e, node, dirList) {\n                if (e) {\n                    if (!errorOccurred) {\n                        errorOccurred = true;\n                        tx.abort(function () {\n                            cb(e);\n                        });\n                    }\n                    // If error has occurred already, just stop here.\n                }\n                else {\n                    inodes[p] = node;\n                    lists[p] = dirList;\n                    theOleSwitcharoo();\n                }\n            });\n        };\n        processInodeAndListings(oldParent);\n        if (oldParent !== newParent) {\n            processInodeAndListings(newParent);\n        }\n    };\n    AsyncKeyValueFileSystem.prototype.stat = function (p, isLstat, cb) {\n        var tx = this.store.beginTransaction('readonly');\n        this.findINode(tx, p, function (e, inode) {\n            if (noError(e, cb)) {\n                cb(null, inode.toStats());\n            }\n        });\n    };\n    AsyncKeyValueFileSystem.prototype.createFile = function (p, flag, mode, cb) {\n        var _this = this;\n        var tx = this.store.beginTransaction('readwrite'), data = util_1.emptyBuffer();\n        this.commitNewFile(tx, p, node_fs_stats_1.FileType.FILE, mode, data, function (e, newFile) {\n            if (noError(e, cb)) {\n                cb(null, new AsyncKeyValueFile(_this, p, flag, newFile.toStats(), data));\n            }\n        });\n    };\n    AsyncKeyValueFileSystem.prototype.openFile = function (p, flag, cb) {\n        var _this = this;\n        var tx = this.store.beginTransaction('readonly');\n        // Step 1: Grab the file's inode.\n        this.findINode(tx, p, function (e, inode) {\n            if (noError(e, cb)) {\n                // Step 2: Grab the file's data.\n                tx.get(inode.id, function (e, data) {\n                    if (noError(e, cb)) {\n                        if (data === undefined) {\n                            cb(api_error_1.ApiError.ENOENT(p));\n                        }\n                        else {\n                            cb(null, new AsyncKeyValueFile(_this, p, flag, inode.toStats(), data));\n                        }\n                    }\n                });\n            }\n        });\n    };\n    AsyncKeyValueFileSystem.prototype.unlink = function (p, cb) {\n        this.removeEntry(p, false, cb);\n    };\n    AsyncKeyValueFileSystem.prototype.rmdir = function (p, cb) {\n        var _this = this;\n        // Check first if directory is empty.\n        this.readdir(p, function (err, files) {\n            if (err) {\n                cb(err);\n            }\n            else if (files.length > 0) {\n                cb(api_error_1.ApiError.ENOTEMPTY(p));\n            }\n            else {\n                _this.removeEntry(p, true, cb);\n            }\n        });\n    };\n    AsyncKeyValueFileSystem.prototype.mkdir = function (p, mode, cb) {\n        var tx = this.store.beginTransaction('readwrite'), data = Buffer.from('{}');\n        this.commitNewFile(tx, p, node_fs_stats_1.FileType.DIRECTORY, mode, data, cb);\n    };\n    AsyncKeyValueFileSystem.prototype.readdir = function (p, cb) {\n        var _this = this;\n        var tx = this.store.beginTransaction('readonly');\n        this.findINode(tx, p, function (e, inode) {\n            if (noError(e, cb)) {\n                _this.getDirListing(tx, p, inode, function (e, dirListing) {\n                    if (noError(e, cb)) {\n                        cb(null, Object.keys(dirListing));\n                    }\n                });\n            }\n        });\n    };\n    AsyncKeyValueFileSystem.prototype._sync = function (p, data, stats, cb) {\n        var _this = this;\n        // @todo Ensure mtime updates properly, and use that to determine if a data\n        //       update is required.\n        var tx = this.store.beginTransaction('readwrite');\n        // Step 1: Get the file node's ID.\n        this._findINode(tx, path.dirname(p), path.basename(p), function (e, fileInodeId) {\n            if (noErrorTx(e, tx, cb)) {\n                // Step 2: Get the file inode.\n                _this.getINode(tx, p, fileInodeId, function (e, fileInode) {\n                    if (noErrorTx(e, tx, cb)) {\n                        var inodeChanged_1 = fileInode.update(stats);\n                        // Step 3: Sync the data.\n                        tx.put(fileInode.id, data, true, function (e) {\n                            if (noErrorTx(e, tx, cb)) {\n                                // Step 4: Sync the metadata (if it changed)!\n                                if (inodeChanged_1) {\n                                    tx.put(fileInodeId, fileInode.toBuffer(), true, function (e) {\n                                        if (noErrorTx(e, tx, cb)) {\n                                            tx.commit(cb);\n                                        }\n                                    });\n                                }\n                                else {\n                                    // No need to sync metadata; return.\n                                    tx.commit(cb);\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Checks if the root directory exists. Creates it if it doesn't.\n     */\n    AsyncKeyValueFileSystem.prototype.makeRootDirectory = function (cb) {\n        var tx = this.store.beginTransaction('readwrite');\n        tx.get(ROOT_NODE_ID, function (e, data) {\n            if (e || data === undefined) {\n                // Create new inode.\n                var currTime = (new Date()).getTime(), \n                // Mode 0666\n                dirInode_1 = new inode_1[\"default\"](GenerateRandomID(), 4096, 511 | node_fs_stats_1.FileType.DIRECTORY, currTime, currTime, currTime);\n                // If the root doesn't exist, the first random ID shouldn't exist,\n                // either.\n                tx.put(dirInode_1.id, getEmptyDirNode(), false, function (e) {\n                    if (noErrorTx(e, tx, cb)) {\n                        tx.put(ROOT_NODE_ID, dirInode_1.toBuffer(), false, function (e) {\n                            if (e) {\n                                tx.abort(function () { cb(e); });\n                            }\n                            else {\n                                tx.commit(cb);\n                            }\n                        });\n                    }\n                });\n            }\n            else {\n                // We're good.\n                tx.commit(cb);\n            }\n        });\n    };\n    /**\n     * Helper function for findINode.\n     * @param parent The parent directory of the file we are attempting to find.\n     * @param filename The filename of the inode we are attempting to find, minus\n     *   the parent.\n     * @param cb Passed an error or the ID of the file's inode in the file system.\n     */\n    AsyncKeyValueFileSystem.prototype._findINode = function (tx, parent, filename, cb) {\n        var _this = this;\n        var handleDirectoryListings = function (e, inode, dirList) {\n            if (e) {\n                cb(e);\n            }\n            else if (dirList[filename]) {\n                cb(null, dirList[filename]);\n            }\n            else {\n                cb(api_error_1.ApiError.ENOENT(path.resolve(parent, filename)));\n            }\n        };\n        if (parent === '/') {\n            if (filename === '') {\n                // BASE CASE #1: Return the root's ID.\n                cb(null, ROOT_NODE_ID);\n            }\n            else {\n                // BASE CASE #2: Find the item in the root node.\n                this.getINode(tx, parent, ROOT_NODE_ID, function (e, inode) {\n                    if (noError(e, cb)) {\n                        _this.getDirListing(tx, parent, inode, function (e, dirList) {\n                            // handle_directory_listings will handle e for us.\n                            handleDirectoryListings(e, inode, dirList);\n                        });\n                    }\n                });\n            }\n        }\n        else {\n            // Get the parent directory's INode, and find the file in its directory\n            // listing.\n            this.findINodeAndDirListing(tx, parent, handleDirectoryListings);\n        }\n    };\n    /**\n     * Finds the Inode of the given path.\n     * @param p The path to look up.\n     * @param cb Passed an error or the Inode of the path p.\n     * @todo memoize/cache\n     */\n    AsyncKeyValueFileSystem.prototype.findINode = function (tx, p, cb) {\n        var _this = this;\n        this._findINode(tx, path.dirname(p), path.basename(p), function (e, id) {\n            if (noError(e, cb)) {\n                _this.getINode(tx, p, id, cb);\n            }\n        });\n    };\n    /**\n     * Given the ID of a node, retrieves the corresponding Inode.\n     * @param tx The transaction to use.\n     * @param p The corresponding path to the file (used for error messages).\n     * @param id The ID to look up.\n     * @param cb Passed an error or the inode under the given id.\n     */\n    AsyncKeyValueFileSystem.prototype.getINode = function (tx, p, id, cb) {\n        tx.get(id, function (e, data) {\n            if (noError(e, cb)) {\n                if (data === undefined) {\n                    cb(api_error_1.ApiError.ENOENT(p));\n                }\n                else {\n                    cb(null, inode_1[\"default\"].fromBuffer(data));\n                }\n            }\n        });\n    };\n    /**\n     * Given the Inode of a directory, retrieves the corresponding directory\n     * listing.\n     */\n    AsyncKeyValueFileSystem.prototype.getDirListing = function (tx, p, inode, cb) {\n        if (!inode.isDirectory()) {\n            cb(api_error_1.ApiError.ENOTDIR(p));\n        }\n        else {\n            tx.get(inode.id, function (e, data) {\n                if (noError(e, cb)) {\n                    try {\n                        cb(null, JSON.parse(data.toString()));\n                    }\n                    catch (e) {\n                        // Occurs when data is undefined, or corresponds to something other\n                        // than a directory listing. The latter should never occur unless\n                        // the file system is corrupted.\n                        cb(api_error_1.ApiError.ENOENT(p));\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Given a path to a directory, retrieves the corresponding INode and\n     * directory listing.\n     */\n    AsyncKeyValueFileSystem.prototype.findINodeAndDirListing = function (tx, p, cb) {\n        var _this = this;\n        this.findINode(tx, p, function (e, inode) {\n            if (noError(e, cb)) {\n                _this.getDirListing(tx, p, inode, function (e, listing) {\n                    if (noError(e, cb)) {\n                        cb(null, inode, listing);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Adds a new node under a random ID. Retries 5 times before giving up in\n     * the exceedingly unlikely chance that we try to reuse a random GUID.\n     * @param cb Passed an error or the GUID that the data was stored under.\n     */\n    AsyncKeyValueFileSystem.prototype.addNewNode = function (tx, data, cb) {\n        var retries = 0, currId;\n        var reroll = function () {\n            if (++retries === 5) {\n                // Max retries hit. Return with an error.\n                cb(new api_error_1.ApiError(api_error_1.ErrorCode.EIO, 'Unable to commit data to key-value store.'));\n            }\n            else {\n                // Try again.\n                currId = GenerateRandomID();\n                tx.put(currId, data, false, function (e, committed) {\n                    if (e || !committed) {\n                        reroll();\n                    }\n                    else {\n                        // Successfully stored under 'currId'.\n                        cb(null, currId);\n                    }\n                });\n            }\n        };\n        reroll();\n    };\n    /**\n     * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n     * the given mode.\n     * Note: This will commit the transaction.\n     * @param p The path to the new file.\n     * @param type The type of the new file.\n     * @param mode The mode to create the new file with.\n     * @param data The data to store at the file's data node.\n     * @param cb Passed an error or the Inode for the new file.\n     */\n    AsyncKeyValueFileSystem.prototype.commitNewFile = function (tx, p, type, mode, data, cb) {\n        var _this = this;\n        var parentDir = path.dirname(p), fname = path.basename(p), currTime = (new Date()).getTime();\n        // Invariant: The root always exists.\n        // If we don't check this prior to taking steps below, we will create a\n        // file with name '' in root should p == '/'.\n        if (p === '/') {\n            return cb(api_error_1.ApiError.EEXIST(p));\n        }\n        // Let's build a pyramid of code!\n        // Step 1: Get the parent directory's inode and directory listing\n        this.findINodeAndDirListing(tx, parentDir, function (e, parentNode, dirListing) {\n            if (noErrorTx(e, tx, cb)) {\n                if (dirListing[fname]) {\n                    // File already exists.\n                    tx.abort(function () {\n                        cb(api_error_1.ApiError.EEXIST(p));\n                    });\n                }\n                else {\n                    // Step 2: Commit data to store.\n                    _this.addNewNode(tx, data, function (e, dataId) {\n                        if (noErrorTx(e, tx, cb)) {\n                            // Step 3: Commit the file's inode to the store.\n                            var fileInode_1 = new inode_1[\"default\"](dataId, data.length, mode | type, currTime, currTime, currTime);\n                            _this.addNewNode(tx, fileInode_1.toBuffer(), function (e, fileInodeId) {\n                                if (noErrorTx(e, tx, cb)) {\n                                    // Step 4: Update parent directory's listing.\n                                    dirListing[fname] = fileInodeId;\n                                    tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, function (e) {\n                                        if (noErrorTx(e, tx, cb)) {\n                                            // Step 5: Commit and return the new inode.\n                                            tx.commit(function (e) {\n                                                if (noErrorTx(e, tx, cb)) {\n                                                    cb(null, fileInode_1);\n                                                }\n                                            });\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            }\n        });\n    };\n    /**\n     * Remove all traces of the given path from the file system.\n     * @param p The path to remove from the file system.\n     * @param isDir Does the path belong to a directory, or a file?\n     * @todo Update mtime.\n     */\n    AsyncKeyValueFileSystem.prototype.removeEntry = function (p, isDir, cb) {\n        var _this = this;\n        var tx = this.store.beginTransaction('readwrite'), parent = path.dirname(p), fileName = path.basename(p);\n        // Step 1: Get parent directory's node and directory listing.\n        this.findINodeAndDirListing(tx, parent, function (e, parentNode, parentListing) {\n            if (noErrorTx(e, tx, cb)) {\n                if (!parentListing[fileName]) {\n                    tx.abort(function () {\n                        cb(api_error_1.ApiError.ENOENT(p));\n                    });\n                }\n                else {\n                    // Remove from directory listing of parent.\n                    var fileNodeId_1 = parentListing[fileName];\n                    delete parentListing[fileName];\n                    // Step 2: Get file inode.\n                    _this.getINode(tx, p, fileNodeId_1, function (e, fileNode) {\n                        if (noErrorTx(e, tx, cb)) {\n                            if (!isDir && fileNode.isDirectory()) {\n                                tx.abort(function () {\n                                    cb(api_error_1.ApiError.EISDIR(p));\n                                });\n                            }\n                            else if (isDir && !fileNode.isDirectory()) {\n                                tx.abort(function () {\n                                    cb(api_error_1.ApiError.ENOTDIR(p));\n                                });\n                            }\n                            else {\n                                // Step 3: Delete data.\n                                tx.del(fileNode.id, function (e) {\n                                    if (noErrorTx(e, tx, cb)) {\n                                        // Step 4: Delete node.\n                                        tx.del(fileNodeId_1, function (e) {\n                                            if (noErrorTx(e, tx, cb)) {\n                                                // Step 5: Update directory listing.\n                                                tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, function (e) {\n                                                    if (noErrorTx(e, tx, cb)) {\n                                                        tx.commit(cb);\n                                                    }\n                                                });\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    };\n    return AsyncKeyValueFileSystem;\n}(file_system_1.BaseFileSystem));\nexports.AsyncKeyValueFileSystem = AsyncKeyValueFileSystem;\n//# sourceMappingURL=key_value_filesystem.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar file_1 = require(\"../core/file\");\nvar api_error_1 = require(\"../core/api_error\");\nvar node_fs_1 = require(\"../core/node_fs\");\nvar util_1 = require(\"../core/util\");\n/**\n * An implementation of the File interface that operates on a file that is\n * completely in-memory. PreloadFiles are backed by a Buffer.\n *\n * This is also an abstract class, as it lacks an implementation of 'sync' and\n * 'close'. Each filesystem that wishes to use this file representation must\n * extend this class and implement those two methods.\n * @todo 'close' lever that disables functionality once closed.\n */\nvar PreloadFile = (function (_super) {\n    __extends(PreloadFile, _super);\n    /**\n     * Creates a file with the given path and, optionally, the given contents. Note\n     * that, if contents is specified, it will be mutated by the file!\n     * @param _fs The file system that created the file.\n     * @param _path\n     * @param _mode The mode that the file was opened using.\n     *   Dictates permissions and where the file pointer starts.\n     * @param _stat The stats object for the given file.\n     *   PreloadFile will mutate this object. Note that this object must contain\n     *   the appropriate mode that the file was opened as.\n     * @param contents A buffer containing the entire\n     *   contents of the file. PreloadFile will mutate this buffer. If not\n     *   specified, we assume it is a new file.\n     */\n    function PreloadFile(_fs, _path, _flag, _stat, contents) {\n        var _this = _super.call(this) || this;\n        _this._pos = 0;\n        _this._dirty = false;\n        _this._fs = _fs;\n        _this._path = _path;\n        _this._flag = _flag;\n        _this._stat = _stat;\n        if (contents) {\n            _this._buffer = contents;\n        }\n        else {\n            // Empty buffer. It'll expand once we write stuff to it.\n            _this._buffer = util_1.emptyBuffer();\n        }\n        // Note: This invariant is *not* maintained once the file starts getting\n        // modified.\n        // Note: Only actually matters if file is readable, as writeable modes may\n        // truncate/append to file.\n        if (_this._stat.size !== _this._buffer.length && _this._flag.isReadable()) {\n            throw new Error(\"Invalid buffer: Buffer is \" + _this._buffer.length + \" long, yet Stats object specifies that file is \" + _this._stat.size + \" long.\");\n        }\n        return _this;\n    }\n    /**\n     * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.\n     */\n    PreloadFile.prototype.getBuffer = function () {\n        return this._buffer;\n    };\n    /**\n     * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!\n     */\n    PreloadFile.prototype.getStats = function () {\n        return this._stat;\n    };\n    PreloadFile.prototype.getFlag = function () {\n        return this._flag;\n    };\n    /**\n     * Get the path to this file.\n     * @return [String] The path to the file.\n     */\n    PreloadFile.prototype.getPath = function () {\n        return this._path;\n    };\n    /**\n     * Get the current file position.\n     *\n     * We emulate the following bug mentioned in the Node documentation:\n     * > On Linux, positional writes don't work when the file is opened in append\n     *   mode. The kernel ignores the position argument and always appends the data\n     *   to the end of the file.\n     * @return [Number] The current file position.\n     */\n    PreloadFile.prototype.getPos = function () {\n        if (this._flag.isAppendable()) {\n            return this._stat.size;\n        }\n        return this._pos;\n    };\n    /**\n     * Advance the current file position by the indicated number of positions.\n     * @param [Number] delta\n     */\n    PreloadFile.prototype.advancePos = function (delta) {\n        return this._pos += delta;\n    };\n    /**\n     * Set the file position.\n     * @param [Number] newPos\n     */\n    PreloadFile.prototype.setPos = function (newPos) {\n        return this._pos = newPos;\n    };\n    /**\n     * **Core**: Asynchronous sync. Must be implemented by subclasses of this\n     * class.\n     * @param [Function(BrowserFS.ApiError)] cb\n     */\n    PreloadFile.prototype.sync = function (cb) {\n        try {\n            this.syncSync();\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    /**\n     * **Core**: Synchronous sync.\n     */\n    PreloadFile.prototype.syncSync = function () {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    /**\n     * **Core**: Asynchronous close. Must be implemented by subclasses of this\n     * class.\n     * @param [Function(BrowserFS.ApiError)] cb\n     */\n    PreloadFile.prototype.close = function (cb) {\n        try {\n            this.closeSync();\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    /**\n     * **Core**: Synchronous close.\n     */\n    PreloadFile.prototype.closeSync = function () {\n        throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n    };\n    /**\n     * Asynchronous `stat`.\n     * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb\n     */\n    PreloadFile.prototype.stat = function (cb) {\n        try {\n            cb(null, this._stat.clone());\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    /**\n     * Synchronous `stat`.\n     */\n    PreloadFile.prototype.statSync = function () {\n        return this._stat.clone();\n    };\n    /**\n     * Asynchronous truncate.\n     * @param [Number] len\n     * @param [Function(BrowserFS.ApiError)] cb\n     */\n    PreloadFile.prototype.truncate = function (len, cb) {\n        try {\n            this.truncateSync(len);\n            if (this._flag.isSynchronous() && !node_fs_1[\"default\"].getRootFS().supportsSynch()) {\n                this.sync(cb);\n            }\n            cb();\n        }\n        catch (e) {\n            return cb(e);\n        }\n    };\n    /**\n     * Synchronous truncate.\n     * @param [Number] len\n     */\n    PreloadFile.prototype.truncateSync = function (len) {\n        this._dirty = true;\n        if (!this._flag.isWriteable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, 'File not opened with a writeable mode.');\n        }\n        this._stat.mtime = new Date();\n        if (len > this._buffer.length) {\n            var buf = Buffer.alloc(len - this._buffer.length, 0);\n            // Write will set @_stat.size for us.\n            this.writeSync(buf, 0, buf.length, this._buffer.length);\n            if (this._flag.isSynchronous() && node_fs_1[\"default\"].getRootFS().supportsSynch()) {\n                this.syncSync();\n            }\n            return;\n        }\n        this._stat.size = len;\n        // Truncate buffer to 'len'.\n        var newBuff = Buffer.alloc(len);\n        this._buffer.copy(newBuff, 0, 0, len);\n        this._buffer = newBuff;\n        if (this._flag.isSynchronous() && node_fs_1[\"default\"].getRootFS().supportsSynch()) {\n            this.syncSync();\n        }\n    };\n    /**\n     * Write buffer to the file.\n     * Note that it is unsafe to use fs.write multiple times on the same file\n     * without waiting for the callback.\n     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to\n     *  the file.\n     * @param [Number] offset Offset in the buffer to start reading data from.\n     * @param [Number] length The amount of bytes to write to the file.\n     * @param [Number] position Offset from the beginning of the file where this\n     *   data should be written. If position is null, the data will be written at\n     *   the current position.\n     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]\n     *   cb The number specifies the number of bytes written into the file.\n     */\n    PreloadFile.prototype.write = function (buffer, offset, length, position, cb) {\n        try {\n            cb(null, this.writeSync(buffer, offset, length, position), buffer);\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    /**\n     * Write buffer to the file.\n     * Note that it is unsafe to use fs.writeSync multiple times on the same file\n     * without waiting for the callback.\n     * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to\n     *  the file.\n     * @param [Number] offset Offset in the buffer to start reading data from.\n     * @param [Number] length The amount of bytes to write to the file.\n     * @param [Number] position Offset from the beginning of the file where this\n     *   data should be written. If position is null, the data will be written at\n     *   the current position.\n     * @return [Number]\n     */\n    PreloadFile.prototype.writeSync = function (buffer, offset, length, position) {\n        this._dirty = true;\n        if (position === undefined || position === null) {\n            position = this.getPos();\n        }\n        if (!this._flag.isWriteable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, 'File not opened with a writeable mode.');\n        }\n        var endFp = position + length;\n        if (endFp > this._stat.size) {\n            this._stat.size = endFp;\n            if (endFp > this._buffer.length) {\n                // Extend the buffer!\n                var newBuff = Buffer.alloc(endFp);\n                this._buffer.copy(newBuff);\n                this._buffer = newBuff;\n            }\n        }\n        var len = buffer.copy(this._buffer, position, offset, offset + length);\n        this._stat.mtime = new Date();\n        if (this._flag.isSynchronous()) {\n            this.syncSync();\n            return len;\n        }\n        this.setPos(position + len);\n        return len;\n    };\n    /**\n     * Read data from the file.\n     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be\n     *   written to.\n     * @param [Number] offset The offset within the buffer where writing will\n     *   start.\n     * @param [Number] length An integer specifying the number of bytes to read.\n     * @param [Number] position An integer specifying where to begin reading from\n     *   in the file. If position is null, data will be read from the current file\n     *   position.\n     * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The\n     *   number is the number of bytes read\n     */\n    PreloadFile.prototype.read = function (buffer, offset, length, position, cb) {\n        try {\n            cb(null, this.readSync(buffer, offset, length, position), buffer);\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    /**\n     * Read data from the file.\n     * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be\n     *   written to.\n     * @param [Number] offset The offset within the buffer where writing will\n     *   start.\n     * @param [Number] length An integer specifying the number of bytes to read.\n     * @param [Number] position An integer specifying where to begin reading from\n     *   in the file. If position is null, data will be read from the current file\n     *   position.\n     * @return [Number]\n     */\n    PreloadFile.prototype.readSync = function (buffer, offset, length, position) {\n        if (!this._flag.isReadable()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.EPERM, 'File not opened with a readable mode.');\n        }\n        if (position === undefined || position === null) {\n            position = this.getPos();\n        }\n        var endRead = position + length;\n        if (endRead > this._stat.size) {\n            length = this._stat.size - position;\n        }\n        var rv = this._buffer.copy(buffer, offset, position, position + length);\n        this._stat.atime = new Date();\n        this._pos = position + length;\n        return rv;\n    };\n    /**\n     * Asynchronous `fchmod`.\n     * @param [Number|String] mode\n     * @param [Function(BrowserFS.ApiError)] cb\n     */\n    PreloadFile.prototype.chmod = function (mode, cb) {\n        try {\n            this.chmodSync(mode);\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    };\n    /**\n     * Asynchronous `fchmod`.\n     * @param [Number] mode\n     */\n    PreloadFile.prototype.chmodSync = function (mode) {\n        if (!this._fs.supportsProps()) {\n            throw new api_error_1.ApiError(api_error_1.ErrorCode.ENOTSUP);\n        }\n        this._dirty = true;\n        this._stat.chmod(mode);\n        this.syncSync();\n    };\n    PreloadFile.prototype.isDirty = function () {\n        return this._dirty;\n    };\n    /**\n     * Resets the dirty bit. Should only be called after a sync has completed successfully.\n     */\n    PreloadFile.prototype.resetDirty = function () {\n        this._dirty = false;\n    };\n    return PreloadFile;\n}(file_1.BaseFile));\nexports[\"default\"] = PreloadFile;\n/**\n * File class for the InMemory and XHR file systems.\n * Doesn't sync to anything, so it works nicely for memory-only files.\n */\nvar NoSyncFile = (function (_super) {\n    __extends(NoSyncFile, _super);\n    function NoSyncFile(_fs, _path, _flag, _stat, contents) {\n        return _super.call(this, _fs, _path, _flag, _stat, contents) || this;\n    }\n    /**\n     * Asynchronous sync. Doesn't do anything, simply calls the cb.\n     * @param [Function(BrowserFS.ApiError)] cb\n     */\n    NoSyncFile.prototype.sync = function (cb) {\n        cb();\n    };\n    /**\n     * Synchronous sync. Doesn't do anything.\n     */\n    NoSyncFile.prototype.syncSync = function () {\n        // NOP.\n    };\n    /**\n     * Asynchronous close. Doesn't do anything, simply calls the cb.\n     * @param [Function(BrowserFS.ApiError)] cb\n     */\n    NoSyncFile.prototype.close = function (cb) {\n        cb();\n    };\n    /**\n     * Synchronous close. Doesn't do anything.\n     */\n    NoSyncFile.prototype.closeSync = function () {\n        // NOP.\n    };\n    return NoSyncFile;\n}(PreloadFile));\nexports.NoSyncFile = NoSyncFile;\n//# sourceMappingURL=preload_file.js.map","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { TypedMessageEvent, MessagePortResponse } from \"../worklets/AudioWorklet\";\nimport { ProxyWorker } from \"./ProxyWorker.types\";\n\nconst Worker = class {\n    static get fnNames(): string[] {\n        return [];\n    }\n    constructor() {\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = -1;\n        const handleMessage = async (e: TypedMessageEvent) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                postMessage(r as any);\n            } else {\n                if (error) {\n                    if (rejects[id]) rejects[id](error);\n                    delete rejects[id];\n                    return;\n                }\n                if (resolves[id]) {\n                    resolves[id](value);\n                    delete resolves[id];\n                }\n            }\n        };\n        const call = (call: string, ...args: any[]) => new Promise<any>((resolve, reject) => {\n            const id = messagePortRequestId--;\n            resolves[id] = resolve;\n            rejects[id] = reject;\n            postMessage({ id, call, args });\n        });\n        const Ctor = (this.constructor as typeof ProxyWorker);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        addEventListener(\"message\", handleMessage);\n    }\n} as typeof ProxyWorker;\n\nexport default Worker;\n","import PreloadFile from \"browserfs/dist/node/generic/preload_file\";\nimport { ApiError, ErrorCode } from \"browserfs/dist/node/core/api_error\";\n\n/* eslint-disable no-param-reassign */\n// eslint-disable-next-line func-names\nPreloadFile.prototype.writeSync = function (buffer, offset, length, position) {\n    this._dirty = true;\n    if (position === undefined || position === null) {\n        position = this.getPos();\n    }\n    if (!this._flag.isWriteable()) {\n        throw new ApiError(ErrorCode.EPERM, \"File not opened with a writeable mode.\");\n    }\n    let len;\n    if (!offset && !position && length === buffer.length) {\n        this._stat.size = buffer.length;\n        this._buffer = buffer;\n        len = length;\n    } else {\n        const endFp = position + length;\n        if (endFp > this._stat.size) {\n            this._stat.size = endFp;\n            if (endFp > this._buffer.length) {\n                // Extend the buffer!\n                const newBuff = Buffer.alloc(endFp);\n                this._buffer.copy(newBuff);\n                this._buffer = newBuff;\n            }\n        }\n        len = buffer.copy(this._buffer, position, offset, offset + length);\n    }\n    this._stat.mtime = new Date();\n    if (this._flag.isSynchronous()) {\n        this.syncSync();\n        return len;\n    }\n    this.setPos(position + len);\n    return len;\n};\n"],"sourceRoot":""}