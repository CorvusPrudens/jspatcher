{"version":3,"sources":["webpack://JSPatcher/JSPatcher/JSPatcher/JSPatcher/JSPatcher/./src/core/text/TextEditor.ts"],"names":["TextEditor","FileEditor","fromProjectItem","file","env","project","instanceId","text","TempTextFile","data","instantiate","editor","init","fileExtension","fileIcon","instance","value","isReady","Promise","resolve","reject","handleReady","off","on","_isReady","emit","editorLanguage","name","endsWith","bindEditor","didChanged","onDidChangeModelContent","e","oldText","getValue","didDispose","onDidDispose","dispose","undefined","addAction","id","label","keybindings","run","save","copy","focus","document","execCommand","cut","paste","navigator","clipboard","readText","executeEdits","range","getSelection","forceMoveMarkers","deleteSelected","selectAll","getModel","getFullModelRange","setSelection","onUiResized"],"mappings":"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","file":"src_core_text_TextEditor_ts.js/ff5b9ebb2570e528fa11.worklet.js","sourcesContent":["import type { SemanticICONS } from \"semantic-ui-react\";\nimport type MonacoEditor from \"react-monaco-editor\";\nimport type { editor } from \"monaco-editor/esm/vs/editor/editor.api\";\nimport FileEditor from \"../file/FileEditor\";\nimport TempTextFile from \"./TempTextFile\";\nimport type PatcherText from \"./PatcherText\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\n\nexport interface TextEditorEventMap {\n    \"textModified\": { text: string; oldText: string };\n}\n\nexport interface TextHistoryEventMap extends TextEditorEventMap {}\n\nexport default class TextEditor extends FileEditor<PatcherText, TextEditorEventMap> {\n    static async fromProjectItem({ file, env, project, instanceId }: { file: PersistentProjectFile | TempTextFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }) {\n        const text = file instanceof TempTextFile ? file.data : await file.instantiate({ env, project, instanceId }) as PatcherText;\n        const editor = new this(text);\n        return editor.init();\n    }\n    editor: editor.IStandaloneCodeEditor;\n    editorJSX: typeof MonacoEditor;\n    get fileExtension() {\n        return \"txt\";\n    }\n    get fileIcon(): SemanticICONS {\n        return \"code\";\n    }\n    get text() {\n        return this.instance.text;\n    }\n    set text(value: string) {\n        this.instance.text = value;\n    }\n    async init() {\n        if (!this.instance.isReady) {\n            await new Promise<void>((resolve, reject) => {\n                const handleReady = () => {\n                    resolve();\n                    this.instance.off(\"ready\", handleReady);\n                };\n                this.instance.on(\"ready\", handleReady);\n            });\n        }\n        this._isReady = true;\n        this.emit(\"ready\");\n        return this;\n    }\n    get editorLanguage() {\n        if (!this.file) return \"none\";\n        if (this.file.name.endsWith(\".js\")) return \"js\";\n        if (this.file.name.endsWith(\".json\")) return \"json\";\n        if (this.file.name.endsWith(\".html\")) return \"html\";\n        if (this.file.name.endsWith(\".dsp\")) return \"faust\";\n        return \"none\";\n    }\n    bindEditor(editor: editor.IStandaloneCodeEditor) {\n        this.editor = editor;\n        const didChanged = editor.onDidChangeModelContent((e) => {\n            const oldText = this.text;\n            const text = editor.getValue();\n            this.text = text;\n            this.emit(\"textModified\", { text, oldText });\n            this.emit(\"changed\");\n        });\n        const didDispose = editor.onDidDispose(() => {\n            didChanged.dispose();\n            didDispose.dispose();\n            this.editor = undefined;\n            this.emit(\"destroy\");\n        });\n        editor.addAction({\n            id: \"editor.action.save\",\n            label: \"Save\",\n            keybindings: [/* KeyMod.CtrlCmd */2048 | /* KeyCode.KEY_S */49],\n            run: () => this.save()\n        });\n    }\n    async copy() {\n        if (!this.editor) return;\n        this.editor.focus();\n        document.execCommand(\"copy\");\n    }\n    async cut() {\n        if (!this.editor) return;\n        this.editor.focus();\n        document.execCommand(\"cut\");\n    }\n    async paste() {\n        if (!this.editor) return;\n        this.editor.focus();\n        const text = await navigator.clipboard.readText();\n        this.editor.executeEdits(\"\", [{ range: this.editor.getSelection(), text, forceMoveMarkers: true }]);\n    }\n    async deleteSelected() {\n        if (!this.editor) return;\n        this.editor.executeEdits(\"\", [{ range: this.editor.getSelection(), text: null }]);\n    }\n    async selectAll() {\n        if (!this.editor) return;\n        const range = this.editor.getModel().getFullModelRange();\n        this.editor.setSelection(range);\n    }\n    onUiResized() {}\n}\n"],"sourceRoot":""}