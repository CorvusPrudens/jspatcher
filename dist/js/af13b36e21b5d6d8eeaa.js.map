{"version":3,"file":"js/af13b36e21b5d6d8eeaa.js","mappings":"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","sources":["webpack://JSPatcher/./src/misc/monaco-faust/Faust2Doc.ts","webpack://JSPatcher/./src/misc/monaco-faust/Faust2MD.ts","webpack://JSPatcher/./src/misc/monaco-faust/FaustLang.ts"],"sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { Faust2MD } from \"./Faust2MD\";\n/*\nRetrive faust2md doc by parsing .dsp file\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\n--------------------------------------------------------\n*/\nexport type TFaustDocs = Record<string, TFaustDoc>;\nexport type TFaustDoc = { path: string[]; name: string; doc: string };\n/**\n *\n * @class Faust2Doc\n */\nexport class Faust2Doc {\n    private static readonly REGEX_DEF_LIB = /\\b(\\w+)\\s*=\\s*library\\(\"(.+)\"\\);/;\n    private static readonly REGEX_DEF_IMP = /\\bimport\\(\"(.+)\"\\);/;\n    private static readonly REGEX_FUNC_NAME = /`.*?([\\w[\\]|]+)`/;\n    private static readonly REGEX_FUNC_NAME_COND = /\\[(.+?)(\\|.+?)*?]/;\n    /**\n     * Retrieve a library definition\n     *\n     * @static\n     * @param {string} line\n     * @returns {{ namespace: string, fileName: string }[]}\n     * @memberof Faust2Doc\n     */\n    static matchLibrary(line: string): { namespace: string; fileName: string }[] {\n        const libs = [] as { namespace: string; fileName: string }[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_LIB, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_LIB);\n                if (matched) libs.push({ namespace: matched[1], fileName: matched[2] });\n            });\n        }\n        return libs;\n    }\n    /**\n     * Retrieve an import expression\n     *\n     * @static\n     * @param {string} line\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static matchImport(line: string): string[] {\n        const imps = [] as string[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_IMP, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_IMP);\n                if (matched) imps.push(matched[1]);\n            });\n        }\n        return imps;\n    }\n    /**\n     * Retrieve true function name from string in comments\n     * `(si.)bus`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchFuncName(str: string): string {\n        const matched = str.match(this.REGEX_FUNC_NAME);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Get all conditions in func name like `[third|half]_octave_[analyzer|filterbank][n]`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static getAllConditions(str: string): string[] {\n        return this.getCondition([str]);\n    }\n    /**\n     * getAllConditions Recursive body\n     *\n     * @static\n     * @param {string[]} [condsIn]\n     * @param {RegExp} [regexp]\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    private static getCondition(condsIn?: string[]): string[] {\n        const conds = [] as string[];\n        condsIn.forEach((cond) => {\n            const regexp = new RegExp(this.REGEX_FUNC_NAME_COND, \"g\");\n            const result = regexp.exec(cond);\n            if (!result) return;\n            const found = result[0];\n            const index = result.index;\n            const subConds = result.splice(1).filter(el => typeof el === \"string\").map(str => str.replace(/^\\|/, \"\"));\n            const before = cond.substring(0, index);\n            const after = cond.substring(index + found.length);\n            if (subConds.length === 1) {\n                conds.push(before + after);\n                conds.push(before + subConds + after);\n            } else {\n                subConds.forEach(subCond => conds.push(before + subCond + after));\n            }\n        });\n        return conds.length ? this.getCondition(conds) : condsIn;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} fileName fileName to be fetch using getFile\n     * @param {string} getFile callback used for import and library expressions\n     * @param {string[]} [depthIn] current Depth, stop when 0;\n     * @param {string[]} [pathIn] path of current namespace\n     * @param {string} [docIn] recursive accum object for output\n     * @returns {Promise<TFaustDocs>}\n     * @memberof Faust2MD\n     */\n    static async parse(fileName: string, getFile: (fileName: string) => Promise<string>, depthIn?: number, pathIn?: string[], docIn?: TFaustDocs): Promise<TFaustDocs> {\n        if (depthIn === 0) return docIn;\n        const depth = depthIn || 2;\n        const strIn = await getFile(fileName);\n        const doc: TFaustDocs = docIn || {};\n        const path = pathIn || [];\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        let curName = \"\"; // current function name\n        let strBuffer = \"\"; // current function doc\n        const lines = strIn.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (!Faust2MD.isComment(line)) {\n                if (inComment) inComment = false; // we are closing a md-comment\n                const libs = this.matchLibrary(line);\n                const imps = this.matchImport(line);\n                for (let j = 0; j < libs.length; j++) {\n                    const lib = libs[j];\n                    await this.parse(lib.fileName, getFile, depth - 1, [...path, lib.namespace], doc);\n                }\n                for (let j = 0; j < imps.length; j++) {\n                    const imp = imps[j];\n                    await this.parse(imp, getFile, depth - 1, path, doc);\n                }\n                continue;\n            }\n            if (inComment) { // we are in a md-comment (not first line)\n                if (idt === 0) idt = Faust2MD.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: Faust2MD.matchEndComment(line), endS: Faust2MD.matchEndSection(line), endT: Faust2MD.matchEndTitle(line) };\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strBuffer += Faust2MD.outdent(line, idt) + \"\\n\";\n                if (endC) { // pop buffer\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                continue;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: Faust2MD.matchBeginComment(line), s: Faust2MD.matchBeginSection(line), t: Faust2MD.matchBeginTitle(line) };\n            if (c) curName = this.matchFuncName(c);\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n                strBuffer = \"\";\n            }\n        }\n        return doc;\n    }\n}\n","/*\n\nUltra simple automatic documentation system for Faust.\nCreates a markdown file by extracting the comments from\na Faust file. The option -t n can be used to change the\ndefault (4) tab setting. The option -c can be used to\ninclude the Faust code itself into the generated doc.\nAnd the option -f can be used to include a YAML front\nmatter with the name of the file and the date.\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\nThe translation is the following:\n  ## foo(x,y)\n    markdown text....\n    markdown text....\n--------------------------------------------------------\n*/\ntype Faust2MDOptions = { tabsize: number; code: boolean; front: boolean };\n/**\n * faust2md ts port\n *\n * @class Faust2MD\n */\nexport class Faust2MD {\n    private static readonly REGEX_BEG_TITLE = /^\\s*\\/\\/#{3,}\\s*([^#]*[^#\\s])\\s*#{3,}$/;\n    private static readonly REGEX_END_TITLE = /^\\s*((\\/\\/#{3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_SECTION = /^\\s*\\/\\/={3,}\\s*([^=]*[^=\\s])\\s*={3,}$/;\n    private static readonly REGEX_END_SECTION = /^\\s*((\\/\\/={3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_COMMENT = /^\\s*\\/\\/-{3,}\\s*([^-]*[^=\\s])\\s*-{3,}$/;\n    private static readonly REGEX_END_COMMENT = /^\\s*((\\/\\/-{3,})|(\\s*))$/;\n    private static readonly REGEX_INDENT = /(^\\s*\\/\\/\\s*)[^\\s]/;\n    private static readonly REGEX_COMMENT = /^\\s*\\/\\//;\n    /**\n     * Print the front matter of the file\n     *\n     * @static\n     * @param {string} fileName\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static frontMatter(fileName: string): string {\n        return \"---\\n\"\n        + `file: ${fileName}\\n`\n        + `date: ${new Date().toLocaleDateString()}\\n`\n        + \"---\\n\";\n    }\n    /**\n     * Outdent a comment line by n characters in\n     * order to remove the prefix \"//   \"\n     *\n     * @static\n     * @param {string} line\n     * @param {number} idt\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static outdent(line: string, idt: number): string {\n        return line.length <= idt ? \"\\n\" : line.substr(idt);\n    }\n    /**\n     * Match the first line of a title\n     * of type \"//#### Title ####\"\n     * at least 3 # are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginTitle(line: string): string {\n        const matched = line.match(this.REGEX_BEG_TITLE);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a title\n     * of type \"//########\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndTitle(line: string): boolean {\n        const matched = line.match(this.REGEX_END_TITLE);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a section\n     * of type \"//==== Section ====\"\n     * at least 3 = are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginSection(line: string): string {\n        const matched = line.match(this.REGEX_BEG_SECTION);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a section\n     * of type \"//=======\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndSection(line: string): boolean {\n        const matched = line.match(this.REGEX_END_SECTION);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a comment\n     * of type \"//--- foo(x,y) ----\"\n     * at least 3 - are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginComment(line: string): string {\n        const matched = line.match(this.REGEX_BEG_COMMENT);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a comment\n     * of type \"//-----------------\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndComment(line: string): boolean {\n        const matched = line.match(this.REGEX_END_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Measure the indentation of a md-comment line\n     * that is the len of the prefix '//   '\n     *\n     * @static\n     * @param {string} line\n     * @returns {number}\n     * @memberof Faust2MD\n     */\n    static indentation(line: string): number {\n        const matched = line.match(this.REGEX_INDENT);\n        return matched ? matched[1].length : 0;\n    }\n    /**\n     * Indicates if a line is a comment\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static isComment(line: string): boolean {\n        const matched = line.match(this.REGEX_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} strIn\n     * @param {string} [fileName]\n     * @param {{ tabsize?: number, code?: boolean, front?: boolean }} [optionsIn]\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static parse(strIn: string, fileName?: string, optionsIn?: { tabsize?: number; code?: boolean; front?: boolean }): string {\n        const options: Faust2MDOptions = { tabsize: 4, code: false, front: false, ...optionsIn };\n        let strOut = \"\";\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        if (options.front && fileName) strOut += this.frontMatter(fileName);\n        strIn.split(\"\\n\").forEach((line) => {\n            if (!this.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    strOut += \"\\n\";\n                    inComment = false;\n                }\n                if (options.code) strOut += `\\t${line}\\n`;\n                return;\n            }\n            if (inComment) { // we are in a md-comment\n                if (idt === 0) idt = this.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: this.matchEndComment(line), endS: this.matchEndSection(line), endT: this.matchEndTitle(line) };\n                if (endC) strOut += \"\\n---\\n\\n\";\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strOut += this.outdent(line, idt) + \"\\n\";\n                return;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: this.matchBeginComment(line), s: this.matchBeginSection(line), t: this.matchBeginTitle(line) };\n            if (c) strOut += `\\n### ${c}\\n`;\n            else if (s) strOut += `\\n## ${s}\\n`;\n            else if (t) strOut += `\\n# ${t}\\n`;\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n            } else if (options.code) strOut += `\\t${line}\\n`;\n        });\n        return strOut;\n    }\n}\n","import { languages, editor, Position, Range } from \"monaco-editor/esm/vs/editor/editor.api\";\nimport { Faust } from \"faust2webaudio\";\nimport { Faust2Doc, TFaustDocs, TFaustDoc } from \"./Faust2Doc\";\n\nexport type FaustLanguageProviders = {\n    hoverProvider: languages.HoverProvider;\n    tokensProvider: languages.IMonarchLanguage;\n    completionItemProvider: languages.CompletionItemProvider;\n    docs: TFaustDocs;\n};\nexport const language: languages.ILanguageExtensionPoint = {\n    id: \"faust\",\n    extensions: [\"dsp\", \"lib\"],\n    mimetypes: [\"application/faust\"]\n};\nexport const config: languages.LanguageConfiguration = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\"/*\", \"*/\"]\n    },\n    brackets: [\n        [\"{\", \"}\"],\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    autoClosingPairs: [\n        { open: \"{\", close: \"}\" },\n        { open: \"[\", close: \"]\" },\n        { open: \"(\", close: \")\" },\n        { open: '\"', close: '\"', notIn: [\"string\"] },\n        { open: \"/*\", close: \"*/\", notIn: [\"string\"] }\n    ]\n};\nexport const theme: editor.IStandaloneThemeData = {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n        { token: \"faustFunctions\", foreground: \"DDDD99\" },\n        { token: \"faustKeywords\", foreground: \"4499CC\" },\n        { token: \"faustLib\", foreground: \"CCCCBB\" },\n        { token: \"faustCompOperators\", foreground: \"FFDDFF\" },\n        { token: \"identifier\", foreground: \"77CCFF\" }\n    ],\n    colors: null\n};\nconst faustKeywords = [\n    \"import\", \"component\", \"declare\", \"library\", \"environment\", \"int\", \"float\",\n    \"letrec\", \"with\", \"class\", \"process\", \"effect\", \"inputs\", \"outputs\"\n];\nconst faustFunctions = [\n    \"mem\", \"prefix\", \"rdtable\", \"rwtable\",\n    \"select2\", \"select3\", \"ffunction\", \"fconstant\", \"fvariable\",\n    \"button\", \"checkbox\", \"vslider\", \"hslider\", \"nentry\",\n    \"vgroup\", \"hgroup\", \"tgroup\", \"vbargraph\", \"hbargraph\", \"attach\",\n    \"acos\", \"asin\", \"atan\", \"atan2\", \"cos\", \"sin\", \"tan\", \"exp\",\n    \"log\", \"log10\", \"pow\", \"sqrt\", \"abs\", \"min\", \"max\", \"fmod\",\n    \"remainder\", \"floor\", \"ceil\", \"rint\",\n    \"seq\", \"par\", \"sum\", \"prod\"\n];\nconst getFile = async (fileName: string, faust: Faust) => {\n    if (faust) return faust.fs.readFile(\"libraries/\" + fileName, { encoding: \"utf8\" }) as string;\n    const libPath = \"https://faust.grame.fr/tools/editor/libraries/\";\n    const res = await fetch(libPath + fileName);\n    return res.text();\n};\ntype TMatchedFaustDoc = { nameArray: string[]; name: string; range: Range; doc: TFaustDoc };\n/**\n * Match an available doc key from monaco editor\n *\n * @param {TFaustDocs} doc\n * @param {editor.ITextModel} model\n * @param {Position} position\n * @returns {TMatchedFaustDoc} full: [...prefixes, name], range: a monaco range object, doc: a FaustDoc object\n */\nexport const matchDocKey = (doc: TFaustDocs, model: editor.ITextModel, position: Position): TMatchedFaustDoc => {\n    const line$ = position.lineNumber;\n    const line = model.getLineContent(line$);\n    const wordAtPosition = model.getWordAtPosition(position);\n    if (!wordAtPosition) return null;\n    let column$ = wordAtPosition.startColumn - 1;\n    const name = wordAtPosition.word;\n    const prefixes: string[] = [];\n    while (column$ - 2 >= 0 && line[column$ - 1] === \".\") {\n        column$ -= 2;\n        const prefixWord = model.getWordAtPosition(new Position(line$, column$));\n        prefixes.splice(0, 0, prefixWord.word);\n        column$ = prefixWord.startColumn - 1;\n    }\n    const nameArray = [...prefixes, name];\n    while (nameArray.length) {\n        const name = nameArray.join(\".\");\n        const e = doc[name];\n        if (e) {\n            return {\n                nameArray,\n                name,\n                range: new Range(line$, column$ + 1, line$, wordAtPosition.endColumn),\n                doc: e\n            };\n        }\n        column$ += nameArray.splice(0, 1)[0].length + 1;\n    }\n    return null;\n};\nexport const getProviders = async (faust: Faust): Promise<FaustLanguageProviders> => {\n    let libDocs: TFaustDocs = {};\n    let primDocs: TFaustDocs = {};\n    try {\n        libDocs = await Faust2Doc.parse(\"stdfaust.lib\", async (fileName: string) => getFile(fileName, faust));\n        primDocs = await Faust2Doc.parse(\"primitives.lib\", async (fileName: string) => getFile(fileName, faust));\n    } catch (e) { console.error(e); } // eslint-disable-line no-empty, no-console\n    const faustLib = Object.keys(libDocs);\n    const allDocs = { ...primDocs, ...libDocs };\n    const hoverProvider: languages.HoverProvider = {\n        provideHover: (model, position) => {\n            const matched = matchDocKey(allDocs, model, position);\n            if (matched) {\n                const prefix = matched.nameArray.slice();\n                const name = prefix.pop();\n                const doc = matched.doc;\n                return {\n                    range: matched.range,\n                    contents: [\n                        { value: `\\`\\`\\`\\n${prefix.length ? \"(\" + prefix.join(\".\") + \".)\" : \"\"}${name}\\n\\`\\`\\`` },\n                        { value: doc.doc.replace(/#+/g, \"######\") },\n                        { value: prefix.length ? `[Detail...](https://faust.grame.fr/doc/libraries/#${prefix.join(\".\") + \".\"}${doc.name.replace(/[[\\]|]/g, \"\").toLowerCase()})` : \"[Detail...](https://faust.grame.fr/doc/manual/index.html#faust-syntax)\" }\n                    ]\n                };\n            }\n            return null;\n        }\n    };\n    const tokensProvider: languages.IMonarchLanguage = ({\n        faustKeywords,\n        faustFunctions,\n        faustLib,\n        defaultToken: \"invalid\",\n        tokenPostfix: \".dsp\",\n        faustCompOperators: [\n            \"~\", \",\", \":\", \"<:\", \":>\"\n        ],\n        operators: [\n            \"=\",\n            \"+\", \"-\", \"*\", \"/\", \"%\", \"^\",\n            \"&\", \"|\", \"xor\", \"<<\", \">>\",\n            \">\", \"<\", \"==\", \"<=\", \">=\", \"!=\",\n            \"@\", \"'\"\n        ],\n        // we include these common regular expressions\n        symbols: /[=><!~?:&|+\\-*/^%]+/,\n        // C# style strings\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n        // The main tokenizer for our languages\n        tokenizer: {\n            root: [\n                // identifiers and keywords\n                [/!|_/, \"keyword\"],\n                [/[a-z_$]([\\w.$]*[\\w$])?/, {\n                    cases: {\n                        \"@faustFunctions\": \"faustFunctions\",\n                        \"@faustKeywords\": \"faustKeywords\",\n                        \"@faustLib\": \"faustLib\",\n                        \"@default\": \"identifier\"\n                    }\n                }],\n                [/[A-Z][\\w$]*/, \"type.identifier\"],\n                // whitespace\n                { include: \"@whitespace\" },\n                // delimiters and operators\n                [/[{}()[\\]]/, \"@brackets\"],\n                [/~|,|<:|:>|:/, \"faustCompOperators\"],\n                [/[<>](?!@symbols)/, \"@brackets\"],\n                [/=|\\+|-|\\*|\\/|%|\\^|&|\\||xor|<<|>>|>|<|==|<=|>=|!=|@|'/, {\n                    cases: {\n                        \"@operators\": \"operators\",\n                        \"@default\": \"\"\n                    }\n                }],\n                // numbers\n                [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                [/\\d+/, \"number\"],\n                // delimiter: after number because of .\\d floats\n                [/[;.]/, \"delimiter\"],\n                // strings\n                [/\"/, { token: \"string\", next: \"@string\" }]\n            ],\n            comment: [\n                [/[^/*]+/, \"comment\"],\n                [/\\/\\*/, \"comment\", \"@push\"],\n                [/\\*\\//, \"comment\", \"@pop\"],\n                [/[/*]/, \"comment\"]\n            ],\n            string: [\n                [/[^\\\\\"$]+/, \"string\"],\n                [/@escapes/, \"string.escape\"],\n                [/\\\\./, \"string.escape.invalid\"],\n                [/\"/, \"string\", \"@pop\"]\n            ],\n            whitespace: [\n                [/[ \\t\\r\\n]+/, \"white\"],\n                [/\\/\\*/, \"comment\", \"@comment\"],\n                [/\\/\\/.*$/, \"comment\"]\n            ]\n        }\n    } as any);\n    const completionItemProvider: languages.CompletionItemProvider = {\n        provideCompletionItems: () => {\n            const suggestions: languages.CompletionItem[] = [];\n            [...faustKeywords, ...faustFunctions, ...faustLib].forEach((e) => {\n                suggestions.push({\n                    label: e,\n                    kind: languages.CompletionItemKind.Text,\n                    insertText: e,\n                    range: null\n                });\n            });\n            return { suggestions };\n        }\n    };\n    return { hoverProvider, tokensProvider, completionItemProvider, docs: libDocs };\n};\n"],"names":["Faust2MD","Faust2Doc","matchLibrary","line","libs","exps","match","RegExp","REGEX_DEF_LIB","forEach","exp","matched","push","namespace","fileName","matchImport","imps","REGEX_DEF_IMP","matchFuncName","str","REGEX_FUNC_NAME","getAllConditions","getCondition","condsIn","conds","cond","regexp","REGEX_FUNC_NAME_COND","result","exec","found","index","subConds","splice","filter","el","map","replace","before","substring","after","length","subCond","parse","getFile","depthIn","pathIn","docIn","depth","strIn","doc","path","inComment","idt","curName","strBuffer","lines","split","i","isComment","j","lib","imp","indentation","endC","endS","endT","matchEndComment","matchEndSection","matchEndTitle","outdent","name","concat","join","c","s","t","matchBeginComment","matchBeginSection","matchBeginTitle","frontMatter","Date","toLocaleDateString","substr","REGEX_BEG_TITLE","REGEX_END_TITLE","REGEX_BEG_SECTION","REGEX_END_SECTION","REGEX_BEG_COMMENT","REGEX_END_COMMENT","REGEX_INDENT","REGEX_COMMENT","optionsIn","options","tabsize","code","front","strOut","languages","Position","Range","language","id","extensions","mimetypes","config","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","theme","base","inherit","rules","token","foreground","colors","faustKeywords","faustFunctions","faust","fs","readFile","encoding","libPath","res","fetch","text","matchDocKey","model","position","line$","lineNumber","getLineContent","wordAtPosition","getWordAtPosition","column$","startColumn","word","prefixes","prefixWord","nameArray","e","range","endColumn","getProviders","libDocs","primDocs","console","error","faustLib","Object","keys","allDocs","hoverProvider","provideHover","prefix","slice","pop","contents","value","toLowerCase","tokensProvider","defaultToken","tokenPostfix","faustCompOperators","operators","symbols","escapes","tokenizer","root","cases","include","next","comment","string","whitespace","completionItemProvider","provideCompletionItems","suggestions","label","kind","CompletionItemKind","Text","insertText","docs"],"sourceRoot":""}