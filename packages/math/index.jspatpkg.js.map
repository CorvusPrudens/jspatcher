{"version":3,"file":"index.jspatpkg.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AAGlC,MAAM,OAAO,gEAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,aAAa,EAAE;AAEtE,MAAM,EAAE,QAAQ,SAAS,UAAU,SAAS,aAAa,cAAc,qDAAW;AAEzF,iEAAe,iBAAE,MAAM,QAAQ,SAAS,UAAU,SAAS,eAAgB;;;;;;;;;;;;;;;;;;ACP3E;AACA;AAEqD;AAErD,MAAM,iBAAiB;AAAA,EAGnB,cAAsB;AAAA,EAAE;AAAA,EAExB,OAAO,SAAsB;AACzB,QAAI,CAAC,iBAAiB,oBAAoB;AACtC,uBAAiB,qBAAqB,oBAAI,IAAY;AAAA,IAC1D;AAEA,WAAO,iBAAiB;AAAA,EAC5B;AAAA,EAEA,aAAoB,UAAU,UAAe,MAAc,KAAa;AACpE,QAAI,MAAM,iBAAiB,OAAO;AAClC,QAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAChB,UAAI,IAAI,IAAI;AACZ,YAAM,SAAS,aAAa,UAAU,GAAG;AAAA,IAC7C;AAAA,EACJ;AACJ;AAEO,wBAAwB,WAAkC,MAAc,cAAsB,OAAuC;AA3B5I;AA4CI,SAAO,mBAMG,+CAAa,CAA4B;AAAA,IAN5C;AAAA;AAmBH,eAAiC;AAAA,QAC7B,OAAO;AAAA,QACP,eAAe,CAAC;AAAA,QAChB,WAAW,CAAC;AAAA,QACZ,oBAAoB,CAAC;AAAA,QACrB,YAAY,UAAU,cAAc;AAAA,MACxC;AAAA;AAAA,IACA,IAAI,mBAAmB;AACnB,aAAO,KAAK,WAAW,IAAI,SAAO,CAAC,GAAG,GAAG,EAAE,KAAK,OAAK,CAAC,EAAE,YAAY,EAAE,oBAAoB,CAAC,EAAE,IAAI,OAAK,CAAC,CAAC,CAAC;AAAA,IAC7G;AAAA,IACA,0BAA0B;AACtB,YAAM,EAAE,qBAAqB;AAC7B,YAAM,EAAE,WAAW,uBAAuB,KAAK;AAC/C,UAAI,CAAC,KAAK;AAAQ;AAClB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAI,iBAAiB,OAAO,mBAAmB;AAAI;AACnD,cAAM,WAAW,UAAU;AAC3B,YAAI,iBAAiB,IAAI;AACrB,mBAAS,OAAO,QAAQ;AAAA,QAC5B,WAAW,CAAC,iBAAiB,MAAM,CAAC,mBAAmB,IAAI;AACvD,mBAAS,OAAO,QAAQ,KAAK,EAAE,cAAc,MAAM;AAAA,QACvD;AACA,2BAAmB,KAAK,iBAAiB;AAAA,MAC7C;AAAA,IACJ;AAAA,IACA,YAAY;AACR,YAAM,UAAU;AAChB,WAAK,GAAG,WAAW,MAAM;AACrB,cAAM,EAAE,QAAQ,YAAY,EAAE,QAAQ,UAAU,OAAO,QAAQ,SAAS,UAAU,QAAQ,OAAO;AAEjG,YAAI,QAAQ;AACR,gBAAM,SAAS,KAAK,SAAS,oBAAoB,MAAM;AACvD,eAAK,EAAE,SAAS;AAChB,mBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,kBAAM,WAAW,KAAK,SAAS,qBAAqB;AACpD,iBAAK,EAAE,UAAU,KAAK;AACtB,qBAAS,QAAQ,QAAQ,GAAG,CAAC;AAC7B,iBAAK,EAAE,mBAAmB,KAAK;AAAA,UACnC;AAAA,QACJ;AACA,cAAM,WAAW,KAAK,SAAS,sBAAsB,OAAO;AAC5D,aAAK,EAAE,WAAW;AAElB,aAAK,SAAS;AACd,aAAK,UAAU;AACf,aAAK,gBAAgB;AACrB,aAAK,wBAAwB,KAAK,EAAE,UAAU,IAAI,CAAC,SAAU,GAAE,MAAM,KAAK,QAAQ,OAAO,EAAE,EAAE;AAC7F,aAAK,yBAAyB,IAAI,MAAM,OAAO,EAAE,KAAK,IAAI,EAAE,IAAI,CAAC,GAAG,MAAO,GAAE,MAAM,UAAU,OAAO,EAAE,EAAE;AACxG,aAAK,aAAa;AAAA,MACtB,CAAC;AACD,WAAK,GAAG,YAAY,YAAY;AAE5B,cAAM,EAAE,OAAO,WAAW,QAAQ,UAAU,eAAe,KAAK;AAChE,cAAM,MAAM,2DAAqB,CAAC,WAAW,OAAO,KAAK,SAAS,YAAY,cAAc,KAAK;AACjG,cAAM,iBAAiB,UAAU,KAAK,UAAU,OAAO,GAAG;AAC1D,cAAM,OAAO,IAAI,iBAAiB,KAAK,UAAU,KAAK;AACtD,aAAK,EAAE,OAAO;AACd,aAAK,wBAAwB;AAC7B,yCAAQ,QAAQ;AAChB,aAAK,QAAQ,QAAQ;AACrB,kBAAU,QAAQ,CAAC,UAAU,MAAM;AA3HnD;AA4HoB,gBAAM,WAAW,KAAK,KAAK,IAAI;AAC/B,cAAI,CAAC,KAAK,EAAE,mBAAmB;AAAI,qBAAS,OAAO,QAAQ,OAAO,aAAa,WAAW,CAAC,WAAY,YAAK,EAAE,cAAc,OAArB,aAA2B;AAClI,mBAAS,MAAM;AAAA,QACnB,CAAC;AAAA,MACL,CAAC;AACD,WAAK,GAAG,eAAe,MAAM;AACzB,aAAK,EAAE,UAAU,QAAQ,CAAC,UAAU,MAAM;AAlI1D;AAmIoB,gBAAM,WAAW,KAAK,KAAK,IAAI,KAAK,EAAE;AACtC,cAAI,CAAC,KAAK,EAAE,mBAAmB;AAAI,qBAAS,OAAO,QAAQ,OAAO,aAAa,WAAW,CAAC,WAAY,YAAK,EAAE,cAAc,OAArB,aAA2B;AAAA,QACtI,CAAC;AAAA,MACL,CAAC;AACD,WAAK,GAAG,SAAS,CAAC,EAAE,OAAO,WAAW;AAClC,YAAI,OAAO,SAAS,UAAU;AAC1B,cAAI,KAAK,EAAE,UAAU,UAAU,CAAC,KAAK,EAAE,mBAAmB,QAAQ;AAC9D,kBAAM,WAAW,KAAK,EAAE,UAAU;AAClC,qBAAS,OAAO,QAAQ,SAAS,OAAO;AACxC,qBAAS,OAAO,wBAAwB,MAAM,KAAK,SAAS,cAAc,KAAK,QAAQ,aAAa,CAAC;AAAA,UACzG;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,WAAK,GAAG,kBAAkB,MAAM,KAAK,wBAAwB,CAAC;AAC9D,WAAK,GAAG,qBAAqB,MAAM,KAAK,wBAAwB,CAAC;AACjE,WAAK,GAAG,WAAW,MAAM;AACrB,cAAM,EAAE,WAAW,QAAQ,UAAU,SAAS,KAAK;AACnD,kBAAU,QAAQ,cAAY,qCAAU,YAAY;AACpD,yCAAQ;AACR,6CAAU;AACV,qCAAM;AAAA,MAEV,CAAC;AAAA,IACL;AAAA,EACJ,GAvGI,GAAO,UAAU,wCAAY,EAC7B,GAAO,SAAS,0CAAM,EACtB,GAAO,UAAU,2CAAO,EACxB,GAAO,cAAc,UAAU,aAC/B,GAAO,SAAS,UAAU,QAC1B,GAAO,UAAU,UAAU,SAC3B,GAAO,OAAO,UAAU,MACxB,GAAO,QAAQ,UAAU,OACzB,GAAO,OAAO,UAAU,MAExB,GAAO,KAAK,2CAAS,EAlBlB;AAgHX;;;;;;;;;;;;;;;;AC1JO,MAAM,kBAAkB;AAM/B;AAEe,MAAM,eAAe;AAAA,EAkBhC,WAAW,uBAAuB;AAC9B,UAAM,SAAS,CAAC;AAChB,eAAW,QAAQ,KAAK,kBAAkB;AACtC,aAAO,KAAK,KAAK,iBAAiB,KAAK;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AAAA,EAEzB;AAAA,EAEA,QAAQ,QAA0B,SAA2B,YAAmD;AAC5G,WAAO;AAAA,EACX;AAEJ;AAhCI,eAAO,mBAAsD,CAAC;AAG9D,eAAO,SAAsB,CAAC;AAC9B,eAAO,UAAwB,CAAC;AAChC,eAAO,OAAkB,CAAC;AAC1B,eAAO,QAAoB;AAAA,EACvB,aAAa;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACjB;AACJ;;;;;;;;;;;;;;;;;ACxBmC;AAEvC,iEAAe,iNAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApB,MAAM,MAAO,WAAmB,aAAa;AACtC,MAAM;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACA;;;;;;;;;;;;;;;;AClB0C;AAE9C,MAAM,wBAAwB,CAAC,WAAkC,OAAe,YAAoB,cAAsB,UAAkD;AAExK,QAAM,mBAAmB,UAAU,SAAS,EAAE,QAAQ,mBAAmB,WAAW,4DAAmB,IAAI;AAE3G,QAAM,WAAW,QAAQ,MAAM,IAAI,CAAC,MAAM,SAAS,EAAE,UAAU,KAAK,UAAU,EAAE,IAAI,GAAG,EAAE,KAAK,IAAI,IAAI;AAEtG,QAAM,OAAO,eAAe,aAAa,IAAI,CAAC,QAAQ,SAAS,IAAI,UAAU,IAAI,SAAS,GAAG,EACxF,KAAK,IAAI,IAAI;AAElB,QAAM,gBAAgB;AAAA;AAAA,UAEhB;AAAA;AAAA,UAEA;AAAA;AAAA,gBAEM,4DAAmB,MAAM,gEAAuB,CAAC;AAAA;AAAA,iCAEhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAOK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAaT;AAAA;AAAA;AAKzB,QAAM,uBAAuB,cAAc,QAAQ,0CAA0C,EAAE;AAE/F,QAAM,MAAM,IAAI,gBAAgB,IAAI,KAAK,CAAC,oBAAoB,GAAG,EAAE,MAAM,kBAAkB,CAAC,CAAC;AAC7F,SAAO;AACX;AAEA,iEAAe,qBAAqB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDI;AAGlC,MAAM,OAAO,gEAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,aAAa,EAAE;AAEtE,MAAM,EAAE,QAAQ,SAAS,UAAU,SAAS,aAAa,cAAc,qDAAW;AAEzF,iEAAe,iBAAE,MAAM,QAAQ,SAAS,UAAU,SAAS,eAAgB;;;;;;;;;;;;;;;;;ACPV;AAC1B;AAExB,MAAM,WAA8F,4CAAU,CAAqB;AAKlJ;AAJI,GAAO,UAAU,wCAAI;AACrB,GAAO,SAAS,0CAAM;AACtB,GAAO,UAAU,2CAAO;AACxB,GAAO,cAAc,+CAAW;;;;;;;;;;;;;;;;;ACPD;AACX;AAGT,MAAM,eAAe,6CAAE,CAA2B;AAAA,EAAjE;AAAA;AAsBI,aAAI,EAAE,KAAK,KAAK,KAAK,IAAI,QAAQ,OAAiB;AAAA;AAAA,EAClD,YAAY;AACR,UAAM,UAAU;AAChB,SAAK,GAAG,WAAW,MAAM;AACrB,WAAK,SAAS;AACd,WAAK,UAAU;AAAA,IACnB,CAAC;AACD,SAAK,GAAG,cAAc,CAAC,SAAS;AAC5B,WAAK,EAAE,MAAM;AACb,WAAK,EAAE,SAAS;AAChB,UAAI,CAAC,QAAQ,KAAK,WAAW;AAAG;AAChC,WAAK,EAAE,MAAM,KAAK;AAAA,IACtB,CAAC;AACD,SAAK,GAAG,SAAS,CAAC,EAAE,MAAM,YAAY;AAClC,UAAI,UAAU,GAAG;AACb,YAAI,CAAC,4CAAM,CAAC,IAAI,GAAG;AACf,cAAI;AACA,iBAAK,EAAE,SAAS,KAAK,QAAQ,MAAM,KAAK,EAAE,GAAG;AAAA,UACjD,SAAS,GAAP;AACE,iBAAK,MAAM,CAAC;AACZ;AAAA,UACJ;AAAA,QACJ;AACA,aAAK,OAAO,GAAG,KAAK,EAAE,MAAM;AAAA,MAChC,WAAW,UAAU,GAAG;AACpB,aAAK,EAAE,MAAM;AAAA,MACjB;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAlDI,OAAO,cAAc;AACrB,OAAO,SAAsB,CAAC;AAAA,EAC1B,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AACjB,GAAG;AAAA,EACC,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AACjB,CAAC;AACD,OAAO,UAAwB,CAAC;AAAA,EAC5B,MAAM;AAAA,EACN,aAAa;AACjB,CAAC;AACD,OAAO,OAAkB,CAAC;AAAA,EACtB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AAAA,EACT,aAAa;AACjB,CAAC;;;;;;;;;;;;;;;;;ACxB8B;AACX;AAGT,MAAM,cAAc,6CAAE,CAAsB;AAAA,EAA3D;AAAA;AAYI,aAAI,EAAE,QAAQ,OAAiB;AAAA;AAAA,EAC/B,YAAY;AACR,UAAM,UAAU;AAChB,SAAK,GAAG,WAAW,MAAM;AACrB,WAAK,SAAS;AACd,WAAK,UAAU;AAAA,IACnB,CAAC;AACD,SAAK,GAAG,SAAS,CAAC,EAAE,MAAM,YAAY;AAClC,UAAI,UAAU,GAAG;AACb,YAAI,CAAC,4CAAM,CAAC,IAAI,GAAG;AACf,cAAI;AACA,iBAAK,EAAE,SAAS,KAAK,QAAQ,IAAI;AAAA,UACrC,SAAS,GAAP;AACE,iBAAK,MAAM,CAAC;AACZ;AAAA,UACJ;AAAA,QACJ;AACA,aAAK,OAAO,GAAG,KAAK,EAAE,MAAM;AAAA,MAChC;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAhCI,MAAO,cAAc;AACrB,MAAO,SAAsB,CAAC;AAAA,EAC1B,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AACjB,CAAC;AACD,MAAO,UAAwB,CAAC;AAAA,EAC5B,MAAM;AAAA,EACN,aAAa;AACjB,CAAC;;;;;;;;;;;;;;;;ACdiE;AAGvD,MAAM,YAAY,kEAAc,CAAC;AAAA,EAkC5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAa,KAAK,IAAI,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AACJ;AA7CI,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;;;;;;;;;;;;;;;;ACjCsC;AAGvD,MAAM,YAAY,kEAAc,CAAC;AAAA,EAkC5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAa,KAAK,IAAI,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AACJ;AA7CI,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;;;;;;;;;;;;;;;;ACjCsC;AAGvD,MAAM,YAAY,kEAAc,CAAC;AAAA,EAsC5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,cAAc,OAAO,GAAG;AAC5B,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,SAAS;AACb,QAAI,SAAS;AAEb,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAEzC,WAAK,MAAM,UAAU;AAErB,UAAI,KAAK,MAAM,GAAI;AACf,aAAK,MAAM;AAAA,MACf;AAEA,WAAK,QAAQ,IAAK,KAAK,MAAO,KAAI,KAAK,MAAO,KAAK;AAEnD,UAAI,KAAK,QAAQ,GAAI;AACjB,aAAK,QAAQ;AAAA,MACjB,WACS,KAAK,QAAQ,GAAI;AACtB,aAAK,QAAQ;AAAA,MACjB;AAEA,aAAO,KAAK;AACZ,aAAO,KAAK;AAEZ,UAAI,OAAO,GAAG;AAEV,iBAAS,MAAO,KAAI;AACpB,iBAAS,YAAY,KAAK,OAAO;AAEjC,qBAAa,KAAK,SAAU,UAAS;AAErC,eAAO;AACP,aAAK,QAAQ;AAAA,MACjB,OACK;AACD,qBAAa,KAAK,YAAY;AAC9B,aAAK,QAAQ;AAAA,MACjB;AAAA,IAGJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AAErB,SAAK,eAAe;AACpB,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,EAEjB;AACJ;AAjGI,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;AAC5B,IAAO,OAAe;;;;;;;;;;;;;;;;AClC4C;AAGvD,MAAM,YAAY,kEAAc,CAAC;AAAA,EAwC5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,cAAc,OAAO,GAAG;AAC5B,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,SAAK,cAAe,IAAK,KAAK,KAAM,KAAK;AAEzC,QAAI,OAAO;AACX,QAAI,WAAW;AACf,QAAI,OAAO,KAAK;AAEhB,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAEzC,aAAO,KAAK;AAEZ,UAAI,UAAU,MAAM,KAAK,KAAK;AAE1B,aAAK,MAAM,UAAU;AACrB,eAAO,UAAU,KAAK,KAAK;AAE3B,YAAI,OAAO,GAAG;AACV,iBAAO;AAAA,QACX,WACS,OAAO,GAAG;AACf,iBAAO;AAAA,QACX;AAEA,aAAK,QAAQ;AAAA,MAEjB,OACK;AACD,eAAO,KAAK;AAAA,MAChB;AAEA,iBAAW,IAAK;AAEhB,aAAO,OAAO,YAAY,KAAK,WAAW;AAC1C,mBAAa,KAAK;AAElB,WAAK,QAAQ;AAAA,IAEjB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AAErB,SAAK,eAAe;AACpB,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACjB;AACJ;AA9FI,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;AAC5B,IAAO,OAAe;;;;;;;;;;;;;;;;AClC4C;AAGvD,MAAM,YAAY,kEAAc,CAAC;AAAA,EAkC5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAa,KAAK,IAAI,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AACJ;AA7CI,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;;;;;;;;;;;;;;;;ACjCsC;AAGvD,MAAM,mBAAmB,kEAAc,CAAC;AAAA,EAkCnD,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAa,KAAK,IAAI,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AACJ;AA7CI,WAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,WAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,WAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,WAAO,aAAqB;;;;;;;;;;;;;;;;ACjCsC;AAGvD,MAAM,mBAAmB,kEAAc,CAAC;AAAA,EAkCnD,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAa,KAAK,IAAI,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AACJ;AA7CI,WAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,WAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,WAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,WAAO,aAAqB;;;;;;;;;;;;;;;;ACjCsC;AAGvD,MAAM,YAAY,kEAAc,CAAC;AAAA,EAkC5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,mBAAa,KAAK,IAAI,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AACJ;AA7CI,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;;;;;;;;;;;;;;;;;ACjCQ;AAExC,iEAAe,iNAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApB,MAAM,MAAO,WAAmB,aAAa;AACtC,MAAM;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;UCnBJ;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN6C;AAEF;AAC3C;AAEiE;AAC7B;AACA;AACA;AACA;AACW;AACA;AACX;AACA;AAIpC,MAAM,SAAS,2DAAqB,CAAC,6DAA4B;AACjE,MAAM,QAAQ,2DAAqB,CAAC,4DAA2B;AAE/D,MAAM,gBAA+C,CAAC;AAEtD,MAAM,mBAA8E;AAAA,EAChF,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,MAAM;AAAA,EAC9C,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,MAAM;AAAA,EAC9C,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,cAAc;AAAA,EACvD,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,MAAM;AAAA,EAC9C,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,MAAM;AAAA,EAC9C,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,cAAc;AAAA,EACvD,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,QAAQ;AAAA,EAClD,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,YAAY;AAAA,EACtD,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,UAAU;AAAA,EAClD,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,mBAAmB;AAAA,EAC7D,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,OAAO;AAAA,EAC/C,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,gBAAgB;AAAA,EAC1D,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,cAAc;AAAA,EACxD,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,aAAa;AAAA,EACvD,OAAO,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,IAAI,IAAI,GAAG,GAAG,MAAM;AAAA,EACxD,OAAO,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,IAAI,IAAI,GAAG,GAAG,MAAM;AAAA,EACxD,OAAO,EAAE,GAAG,CAAC,GAAQ,MAAW,KAAK,GAAG,GAAG,QAAQ;AAAA,EACnD,KAAK,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,MAAM;AAAA,EAC9C,MAAM,EAAE,GAAG,CAAC,GAAQ,MAAW,IAAI,GAAG,GAAG,cAAc;AAC3D;AAEA,WAAW,OAAO,kBAAkB;AAChC,gBAAc,OAAO,cAAc,OAAO;AAAA,IAArB;AAAA;AAEjB,qBAAU,iBAAiB,KAAK;AAAA;AAAA,IADhC,WAAW,QAAQ;AAAE,aAAO,iBAAiB,KAAK;AAAA,IAAG;AAAA,EAEzD;AACJ;AAEA,MAAM,eAA6C,CAAC;AAEpD,MAAM,kBAA6E;AAAA,EAC/E,KAAK,EAAE,GAAG,CAAC,MAAW,CAAC,GAAG,GAAG,MAAM;AAAA,EACnC,KAAK,EAAE,GAAG,CAAC,MAAW,CAAC,GAAG,GAAG,SAAS;AAC1C;AAEA,WAAW,OAAO,iBAAiB;AAC/B,eAAa,OAAO,cAAc,MAAM;AAAA,IAApB;AAAA;AAEhB,qBAAU,gBAAgB,KAAK;AAAA;AAAA,IAD/B,WAAW,QAAQ;AAAE,aAAO,gBAAgB,KAAK;AAAA,IAAG;AAAA,EAExD;AACJ;AAwCA,MAAM,qBAA0C;AAAA,EAC5C,MAAM,uEAAc,CAAC,wDAAG,EAAE,KAAK;AAAA,EAC/B,MAAM,uEAAc,CAAC,wDAAG,EAAE,KAAK;AAAA,EAC/B,MAAM,uEAAc,CAAC,wDAAG,EAAE,KAAK;AAAA,EAC/B,MAAM,uEAAc,CAAC,wDAAG,EAAE,KAAK;AAAA,EAC/B,OAAO,uEAAc,CAAC,4DAAU,EAAE,aAAa;AAAA,EAC/C,OAAO,uEAAc,CAAC,4DAAU,EAAE,aAAa;AACnD;AAEA,MAAM,qBAA0C;AAAA,EAC5C,QAAQ,uEAAc,CAAC,yDAAG,EAAE,KAAK;AAAA,EACjC,QAAQ,uEAAc,CAAC,yDAAG,EAAE,KAAK;AACrC;AAGA,iEAAe,YAAa,gEACrB,gBACA,eACA,qBACA","sources":["webpack://@electrosmith/package-math/../../common/web/index.ts","webpack://@electrosmith/package-math/../../common/web/jsDspObject.ts","webpack://@electrosmith/package-math/../../common/web/jsDspProcessor.ts","webpack://@electrosmith/package-math/../../common/web/package-info.ts","webpack://@electrosmith/package-math/../../common/web/sdk.ts","webpack://@electrosmith/package-math/../../common/web/workletCreator.ts","webpack://@electrosmith/package-math/./src/index.ts","webpack://@electrosmith/package-math/./src/objects/block/base.ts","webpack://@electrosmith/package-math/./src/objects/block/binary.ts","webpack://@electrosmith/package-math/./src/objects/block/unary.ts","webpack://@electrosmith/package-math/./src/objects/dsp/add.ts","webpack://@electrosmith/package-math/./src/objects/dsp/div.ts","webpack://@electrosmith/package-math/./src/objects/dsp/hip.ts","webpack://@electrosmith/package-math/./src/objects/dsp/lop.ts","webpack://@electrosmith/package-math/./src/objects/dsp/mul.ts","webpack://@electrosmith/package-math/./src/objects/dsp/rev_div.ts","webpack://@electrosmith/package-math/./src/objects/dsp/rev_sub.ts","webpack://@electrosmith/package-math/./src/objects/dsp/sub.ts","webpack://@electrosmith/package-math/./src/package-info.ts","webpack://@electrosmith/package-math/./src/sdk.ts","webpack://@electrosmith/package-math/webpack/bootstrap","webpack://@electrosmith/package-math/webpack/runtime/create fake namespace object","webpack://@electrosmith/package-math/webpack/runtime/define property getters","webpack://@electrosmith/package-math/webpack/runtime/hasOwnProperty shorthand","webpack://@electrosmith/package-math/webpack/runtime/make namespace object","webpack://@electrosmith/package-math/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\n\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\n\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\n\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;\n","import { author, name as package_name, version, description } from \"./index\";\nimport { Bang, DefaultObject, DefaultUI } from \"./sdk\";\nimport JsDspProcessor from \"./jsDspProcessor\";\nimport getJsWorkletProcessor from \"./workletCreator\";\n\nclass JsWorkletManager {\n    static registered_modules: Set<string>;\n\n    private constructor() { }\n\n    static getSet(): Set<string> {\n        if (!JsWorkletManager.registered_modules) {\n            JsWorkletManager.registered_modules = new Set<string>();\n        }\n\n        return JsWorkletManager.registered_modules;\n    }\n\n    public static async addModule(audioCtx: any, name: string, url: string) {\n        let set = JsWorkletManager.getSet();\n        if (!set.has(name)) {\n            set.add(name);\n            await audioCtx.audioWorklet.addModule(url);\n        }\n    }\n}\n\nexport function generateObject(Processor: typeof JsDspProcessor, name: string, dependencies?: any[], enums?: { name: string, item: any }[]) {\n\n    interface JsDspInternalState {\n        dspId: string;\n        merger: ChannelMergerNode;\n        node: AudioWorkletNode;\n        splitter: ChannelSplitterNode;\n        defaultInputs: [];\n        constants: ConstantSourceNode[];\n        constantsConnected: boolean[];\n        argsOffset: number;\n    }\n\n    interface Props {\n        smoothInput: number;\n    }\n\n    return class JsDspObject<\n        S = {},\n        I extends [Bang | any, ...any[]] = [Bang],\n        O extends any[] = [],\n        A extends any[] = any[],\n        P = Partial<Props> & Record<string, any>\n    > extends DefaultObject<{}, S, I, O, A, P & Props> {\n\n        static package = package_name;\n        static author = author;\n        static version = version;\n        static description = Processor.description;\n        static inlets = Processor.inlets;\n        static outlets = Processor.outlets;\n        static args = Processor.args;\n        static props = Processor.props;\n        static docs = Processor.docs;\n\n        static UI = DefaultUI;\n        _: Partial<JsDspInternalState> = {\n            dspId: name,\n            defaultInputs: [],\n            constants: [],\n            constantsConnected: [],\n            argsOffset: Processor.argsOffset || 0\n        };\n        get audioConnections() {\n            return this.inletLines.map(set => [...set].find(l => !l.disabled && l.isConnectableByAudio)).map(l => !!l);\n        }\n        checkAndFillUnconnected() {\n            const { audioConnections } = this;\n            const { constants, constantsConnected } = this._;\n            if (!this.inlets) return;\n            for (let i = 0; i < this.inlets; i++) {\n                if (audioConnections[i] === constantsConnected[i]) continue;\n                const constant = constants[i];\n                if (audioConnections[i]) {\n                    constant.offset.value = 0;\n                } else if (!audioConnections[i] && !constantsConnected[i]) {\n                    constant.offset.value = this._.defaultInputs[i] || 0;\n                }\n                constantsConnected[i] = audioConnections[i];\n            }\n        }\n        subscribe() {\n            super.subscribe();\n            this.on(\"preInit\", () => {\n                const { inputs, outputs } = { inputs: Processor.inlets.length, outputs: Processor.outlets.length };\n\n                if (inputs) {\n                    const merger = this.audioCtx.createChannelMerger(inputs);\n                    this._.merger = merger;\n                    for (let i = 0; i < inputs; i++) {\n                        const constant = this.audioCtx.createConstantSource();\n                        this._.constants[i] = constant;\n                        constant.connect(merger, 0, i);\n                        this._.constantsConnected[i] = false;\n                    }\n                }\n                const splitter = this.audioCtx.createChannelSplitter(outputs);\n                this._.splitter = splitter;\n\n                this.inlets = inputs;\n                this.outlets = outputs;\n                this.disconnectAudio();\n                this.inletAudioConnections = this._.constants.map((node) => ({ node: node.offset, index: 0 }));\n                this.outletAudioConnections = new Array(outputs).fill(null).map((v, i) => ({ node: splitter, index: i }));\n                this.connectAudio();\n            });\n            this.on(\"postInit\", async () => {\n                // const { dspFactory, faustDspGenerator, dspId, constants, merger, splitter, argsOffset } = this._;\n                const { dspId, constants, merger, splitter, argsOffset } = this._;\n                const url = getJsWorkletProcessor(Processor, dspId, this.audioCtx.sampleRate, dependencies, enums);\n                await JsWorkletManager.addModule(this.audioCtx, dspId, url);\n                const node = new AudioWorkletNode(this.audioCtx, dspId);\n                this._.node = node;\n                this.checkAndFillUnconnected();\n                merger?.connect(node);\n                node.connect(splitter);\n                constants.forEach((constant, i) => {\n                    const argValue = this.args[i - argsOffset];\n                    if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                    constant.start();\n                });\n            });\n            this.on(\"argsUpdated\", () => {\n                this._.constants.forEach((constant, i) => {\n                    const argValue = this.args[i - this._.argsOffset];\n                    if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                });\n            })\n            this.on(\"inlet\", ({ inlet, data }) => {\n                if (typeof data === \"number\") {\n                    if (this._.constants[inlet] && !this._.constantsConnected[inlet]) {\n                        const constant = this._.constants[inlet];\n                        constant.offset.value = constant.offset.value;\n                        constant.offset.linearRampToValueAtTime(data, this.audioCtx.currentTime + this.getProp(\"smoothInput\"));\n                    }\n                }\n            });\n            this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\n            this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\n            this.on(\"destroy\", () => {\n                const { constants, merger, splitter, node } = this._;\n                constants.forEach(constant => constant?.disconnect());\n                merger?.disconnect();\n                splitter?.disconnect();\n                node?.disconnect();\n                // node?.destroy();\n            })\n        }\n    }\n}\n","import { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class JsParamDescriptor {\n    name: string;\n    automationRate?: \"a-rate\" | \"k-rate\";\n    minValue?: number;\n    maxValue?: number;\n    defaultValue?: number;\n}\n\nexport default class JsDspProcessor {\n\n    static paramDescriptors: Record<string, JsParamDescriptor> = {};\n    static description: string;\n\n    static inlets: IInletsMeta = [];\n    static outlets: IOutletsMeta = [];\n    static args: IArgsMeta = [];\n    static props: IPropsMeta = {\n        smoothInput: {\n            type: \"number\",\n            default: 0.00267,\n            description: \"Linear interpolation coefficient to block-rate input values in seconds\"\n        }\n    };\n    static argsOffset: number;\n    static docs: string;\n\n    static get parameterDescriptors() {\n        const params = [] as JsParamDescriptor[];\n        for (const name in this.paramDescriptors) {\n            params.push(this.paramDescriptors[name]);\n        }\n        return params;\n    }\n\n    init(sampleRate: number) {\n\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        return true;\n    }\n\n}\n","import * as JSON from \"./package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","\nimport JsDspProcessor from \"./jsDspProcessor\";\n\nconst getJsWorkletProcessor = (processor: typeof JsDspProcessor, dspId: string, sampleRate: number, dependencies?: any[], enums?: { name: string, item: any }[]): string => {\n\n    const inherited_string = processor.toString().replace(/extends (.*?) {/, `extends ${JsDspProcessor.name} {`);\n\n    const js_enums = enums ? enums.map((e) => `const ${e.name} = ${JSON.stringify(e.item)}`).join(\"\\n\") : \"\";\n\n    const deps = dependencies ? dependencies.map((dep) => `const ${dep.name} = ${dep.toString()}`)\n        .join(\"\\n\") : \"\";\n\n    const processorCode = `\n\n        ${js_enums}\n\n        ${deps}\n\n        const ${JsDspProcessor.name} = ${JsDspProcessor.toString()}\n\n        const ProcessorClass = ${inherited_string}\n\n        class JsWorkletProcessor extends AudioWorkletProcessor {\n\n            constructor(options) {\n                super(options);\n                this.processor = new ProcessorClass();\n                this.processor.init(${sampleRate});\n            }\n\n            process(inputs, outputs, parameters) {\n                return this.processor.process(inputs, outputs, parameters);\n            }\n\n            static get parameterDescriptors() {\n                return ProcessorClass.parameterDescriptors;\n            }\n        }\n\n        // TODO -- fix already registered error\n        registerProcessor(\"${dspId}\", JsWorkletProcessor);\n\n    `;\n\n    // replace any webpack-style name spacing\n    const processorCodeCleaned = processorCode.replace(/_.+?__WEBPACK_IMPORTED_MODULE_\\d+__\\./g, \"\");\n\n    const url = URL.createObjectURL(new Blob([processorCodeCleaned], { type: \"text/javascript\" }));\n    return url;\n}\n\nexport default getJsWorkletProcessor;\n","import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../../index\";\r\nimport { BaseObject } from \"../../sdk\";\r\n\r\nexport default class Op<I extends any[] = any[], O extends any[] = [any], A extends any[] = any[], P = {}> extends BaseObject<{}, {}, I, O, A, P> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import { isBang } from \"../../sdk\";\nimport Op from \"./base\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Binary extends Op<[any, any], [any], [any]> {\n    static description = \"Binary Operation\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"First element\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"Second element\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: true,\n        default: 0,\n        description: \"Initial second element\"\n    }];\n    execute: (a: any, b: any) => any;\n    _ = { arg: this.args[0], result: undefined as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 1;\n        });\n        this.on(\"updateArgs\", (args) => {\n            this._.arg = undefined;\n            this._.result = undefined;\n            if (!args || args.length === 0) return;\n            this._.arg = args[0];\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this._.result = this.execute(data, this._.arg);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.result);\n            } else if (inlet === 1) {\n                this._.arg = data;\n            }\n        });\n    }\n}\n","import { isBang } from \"../../sdk\";\nimport Op from \"./base\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Unary extends Op<[any], [any], [any]> {\n    static description = \"Unary Operation\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"First element\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    execute: (a: any) => any;\n    _ = { result: undefined as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this._.result = this.execute(data);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.result);\n            }\n        });\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Add extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] + in2[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Div extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] / in2[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Hip extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio signal\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"rolloff frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"rolloff frequency\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 0;\n    static docs: string = \"math/docs/hip.html\";\n\n    sample_rate_: number;\n    hz_: number;\n    last_: number;\n    coef_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let inputStream = inputs[0][0];\n        let frequency = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        let last = 0.;\n        let coef = 0.;\n        let normal = 0.;\n        let newval = 0.;\n\n        for (let i = 0; i < inputStream.length; i++) {\n\n            this.hz_ = frequency[i];\n\n            if (this.hz_ < 0.) {\n                this.hz_ = 0.;\n            }\n\n            this.coef_ = 1 - (this.hz_ * (2 * Math.PI)) / this.sample_rate_;\n\n            if (this.coef_ < 0.) {\n                this.coef_ = 0.;\n            }\n            else if (this.coef_ > 1.) {\n                this.coef_ = 1.;\n            }\n\n            coef = this.coef_;\n            last = this.last_;\n\n            if (coef < 1) {\n\n                normal = 0.5 * (1 + coef);\n                newval = inputStream[i] + coef * last;\n\n                outputStream[i] = normal * (newval - last);\n\n                last = newval;\n                this.last_ = last;\n            }\n            else {\n                outputStream[i] = inputStream[i];\n                this.last_ = 0.;\n            }\n\n\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n\n        this.sample_rate_ = sampleRate;\n        this.hz_ = 0.;\n        this.coef_ = 0.;\n        this.last_ = 0.;\n\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Lop extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio signal\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"rolloff frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"rolloff frequency\",\n            default: 1000\n        }\n    ]\n    static argsOffset: number = 0;\n    static docs: string = \"math/docs/lop.html\";\n\n\n    sample_rate_: number;\n    conversion_: number;\n    last_: number;\n    hz_: number;\n    coef_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let inputStream = inputs[0][0];\n        let frequency = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        this.conversion_ = (2. * Math.PI) / this.sample_rate_;\n\n        let coef = 0.;\n        let feedback = 0.;\n        let last = this.last_;\n\n        for (let i = 0; i < inputStream.length; i++) {\n\n            last = this.last_;\n\n            if (frequency[i] != this.hz_) {\n\n                this.hz_ = frequency[i];\n                coef = frequency[i] * this.conversion_;\n\n                if (coef > 1) {\n                    coef = 1.;\n                }\n                else if (coef < 0) {\n                    coef = 0.;\n                }\n\n                this.coef_ = coef;\n\n            }\n            else {\n                coef = this.coef_;\n            }\n\n            feedback = 1. - coef;\n\n            last = coef * inputStream[i] + feedback * last;\n            outputStream[i] = last;\n\n            this.last_ = last;\n\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n\n        this.sample_rate_ = sampleRate;\n        this.conversion_ = 0.;\n        this.last_ = 0.;\n        this.hz_ = 0.;\n        this.coef_ = 0.;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Mul extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] * in2[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class ReverseDiv extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in2[i] / in1[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class ReverseSub extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in2[i] - in1[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Sub extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] - in2[i];\n        }\n\n        return true;\n    }\n}\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import _Binary from \"./objects/block/binary\";\nimport BinaryAudio from \"./objects/dsp/binary\";\nimport _Unary from \"./objects/block/unary\";\nimport { BaseObject, generateDefaultObject } from \"./sdk\";\n// import \"./objects/ui/ui.scss\";\nimport { generateObject } from \"../../../common/web/jsDspObject\";\nimport Add from \"./objects/dsp/add\";\nimport Mul from \"./objects/dsp/mul\";\nimport Sub from \"./objects/dsp/sub\";\nimport Div from \"./objects/dsp/div\";\nimport ReverseDiv from \"./objects/dsp/rev_div\";\nimport ReverseSub from \"./objects/dsp/rev_sub\";\nimport Hip from \"./objects/dsp/hip\";\nimport Lop from \"./objects/dsp/lop\";\n\n\n// Generated objects\nconst Binary = generateDefaultObject(_Binary as typeof BaseObject);\nconst Unary = generateDefaultObject(_Unary as typeof BaseObject);\n\nconst BinaryObjects: Record<string, typeof Binary> = {};\n\nconst binary_functions: Record<string, { f: (...args: any[]) => any, n: string }> = {\n    \"+\": { f: (a: any, b: any) => a + b, n: \"Add\" },\n    \"-\": { f: (a: any, b: any) => a - b, n: \"Sub\" },\n    \"!-\": { f: (a: any, b: any) => b - a, n: \"Reverse Sub\" },\n    \"*\": { f: (a: any, b: any) => a * b, n: \"Mul\" },\n    \"/\": { f: (a: any, b: any) => a / b, n: \"Div\" },\n    \"!/\": { f: (a: any, b: any) => b / a, n: \"Reverse Div\" },\n    \"==\": { f: (a: any, b: any) => a == b, n: \"Equal\" },\n    \"!=\": { f: (a: any, b: any) => a != b, n: \"Not equal\" },\n    \">\": { f: (a: any, b: any) => a > b, n: \"Greater\" },\n    \">=\": { f: (a: any, b: any) => a >= b, n: \"Greater or equal\" },\n    \"<\": { f: (a: any, b: any) => a < b, n: \"Less\" },\n    \"<=\": { f: (a: any, b: any) => a <= b, n: \"Less or equal\" },\n    \"&&\": { f: (a: any, b: any) => a && b, n: \"Boolean AND\" },\n    \"||\": { f: (a: any, b: any) => a || b, n: \"Boolean OR\" },\n    \"max\": { f: (a: any, b: any) => a > b ? a : b, n: \"Max\" },\n    \"min\": { f: (a: any, b: any) => a < b ? a : b, n: \"Min\" },\n    \"pow\": { f: (a: any, b: any) => a ** b, n: \"Power\" },\n    \"%\": { f: (a: any, b: any) => a % b, n: \"Mod\" },\n    \"!%\": { f: (a: any, b: any) => b % a, n: \"Reverse Mod\" },\n}\n\nfor (const key in binary_functions) {\n    BinaryObjects[key] = class extends Binary {\n        static get _name() { return binary_functions[key].n; }\n        execute = binary_functions[key].f;\n    }\n}\n\nconst UnaryObjects: Record<string, typeof Unary> = {};\n\nconst unary_functions: Record<string, { f: (...args: any[]) => any, n: string }> = {\n    \"!\": { f: (a: any) => !a, n: \"Not\" },\n    \"~\": { f: (a: any) => ~a, n: \"Invert\" }\n}\n\nfor (const key in unary_functions) {\n    UnaryObjects[key] = class extends Unary {\n        static get _name() { return unary_functions[key].n; }\n        execute = unary_functions[key].f;\n    }\n}\n\n// const binary_audio_functions: Record<string, { f: (...args: number[]) => number, n: string }> = {\n//     \"+~\": { f: (a: number, b: number) => a + b, n: \"Add\" },\n//     \"-~\": { f: (a: number, b: number) => a - b, n: \"Sub\" },\n//     \"!-~\": { f: (a: number, b: number) => b - a, n: \"Reverse Sub\" },\n//     \"*~\": { f: (a: number, b: number) => a * b, n: \"Mul\" },\n//     \"/~\": { f: (a: number, b: number) => a / b, n: \"Div\" },\n//     \"!/~\": { f: (a: number, b: number) => b / a, n: \"Reverse Div\" },\n//     \"==~\": { f: (a: number, b: number) => Number(a == b), n: \"Equal\" },\n//     \"!=~\": { f: (a: number, b: number) => Number(a != b), n: \"Not equal\" },\n//     \">~\": { f: (a: number, b: number) => Number(a > b), n: \"Greater\" },\n//     \">=~\": { f: (a: number, b: number) => Number(a >= b), n: \"Greater or equal\" },\n//     \"<~\": { f: (a: number, b: number) => Number(a < b), n: \"Less\" },\n//     \"<=~\": { f: (a: number, b: number) => Number(a <= b), n: \"Less or equal\" },\n//     \"&&~\": { f: (a: number, b: number) => Number(a && b), n: \"Boolean AND\" },\n//     \"||~\": { f: (a: number, b: number) => Number(a || b), n: \"Boolean OR\" },\n//     \"max~\": { f: (a: number, b: number) => a > b ? a : b, n: \"Max\" },\n//     \"min~\": { f: (a: number, b: number) => a < b ? a : b, n: \"Min\" },\n//     \"pow~\": { f: (a: number, b: number) => a ** b, n: \"Power\" },\n// }\n\n// TODO -- this doesn't work because the worklet conversion doesn't convert the exec reference to a string\n// const BinaryAudioObjects: Record<string, any> = {};\n\n// for (const key in binary_audio_functions) {\n\n//     const name = binary_audio_functions[key].n;\n//     const exec = binary_audio_functions[key].f;\n\n//     BinaryAudioObjects[key] = generateObject(\n//         class extends BinaryAudio {\n//             static get _name() { return name; }\n//             execute = exec;\n//         },\n//         key\n//     )\n// }\n\n// AHHHH we'll have to fix this up soon\nconst BinaryAudioObjects: Record<string, any> = {\n    \"+~\": generateObject(Add, \"Add\"),\n    \"-~\": generateObject(Sub, \"Sub\"),\n    \"*~\": generateObject(Mul, \"Mul\"),\n    \"/~\": generateObject(Div, \"Div\"),\n    \"!/~\": generateObject(ReverseDiv, \"Reverse Div\"),\n    \"!-~\": generateObject(ReverseSub, \"Reverse Sub\"),\n}\n\nconst FilterAudioObjects: Record<string, any> = {\n    \"hip~\": generateObject(Hip, \"Hip\"),\n    \"lop~\": generateObject(Lop, \"Lop\"),\n}\n\n\nexport default async () => ({\n    ...BinaryObjects,\n    ...UnaryObjects,\n    ...BinaryAudioObjects,\n    ...FilterAudioObjects,\n});\n"],"names":[],"sourceRoot":""}