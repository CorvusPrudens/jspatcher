{"version":3,"sources":["webpack://JSPatcher/./src/core/worklets/PatcherNode.ts","webpack://JSPatcher/./src/core/worklets/Patcher.worklet.ts"],"names":["processorId","PatcherNode","AudioWorkletProxyNode","constructor","context","options","numberOfInputs","numberOfOutputs","channelCount","channelCountMode","channelInterpretation","processorOptions","instanceId","fileId","data","syncData","patcher","history","getSyncData","sync","e","fn","inlet","destroy","env","getInstanceById","on","handleChanged","handleInput","handleDestroy","_destroy","call","_disposed","outlet","port","objectEmitFromWorklet","boxId","eventName","eventData","boxes","object","emit","audioWorklet","AudioWorkletRegister","processorURL"],"mappings":";;;;;;;;;;;;;;;;;;;CAAiD;;AACjD;AACA;AAOA,MAAMA,WAAW,GAAG,qBAApB;AAEe,MAAMC,WAAN,SAA0BC,2DAA1B,CAA4I;AAKvJC,aAAW,CAACC,OAAD,EAA4BC,OAA5B,EAAqH;AAC5H,UAAMD,OAAN,EAAeJ,WAAf,EAA4B;AACxBM,oBAAc,EAAE,CADQ;AAExBC,qBAAe,EAAE,CAFO;AAGxBC,kBAAY,EAAE,EAHU;AAIxBC,sBAAgB,EAAE,UAJM;AAKxBC,2BAAqB,EAAE,UALC;AAMxBC,sBAAgB,EAAE;AAAEC,kBAAU,EAAEP,OAAO,CAACO,UAAtB;AAAkCC,cAAM,EAAER,OAAO,CAACQ,MAAlD;AAA0DC,YAAI,EAAET,OAAO,CAACS;AAAxE;AANM,KAA5B;;AAD4H;;AAAA,2CAmBhH,MAAM;AAClB,YAAMC,QAAQ,GAAG,KAAKC,OAAL,CAAaC,OAAb,CAAqBC,WAArB,EAAjB;AACA,WAAKC,IAAL,CAAUJ,QAAV;AACH,KAtB+H;;AAAA,yCAuBjHK,CAAD,IAAqC,KAAKC,EAAL,CAAQD,CAAC,CAACN,IAAV,EAAgBM,CAAC,CAACE,KAAlB,CAvB6E;;AAAA,2CAwBhH,MAAM,KAAKC,OAAL,EAxB0G;;AAS5H,SAAKP,OAAL,GAAeX,OAAO,CAACmB,GAAR,CAAYC,eAAZ,CAA4BpB,OAAO,CAACO,UAApC,CAAf;AACA,SAAKI,OAAL,CAAaU,EAAb,CAAgB,SAAhB,EAA2B,KAAKC,aAAhC;AACA,SAAKX,OAAL,CAAaU,EAAb,CAAgB,WAAhB,EAA6B,KAAKE,WAAlC;AACA,SAAKZ,OAAL,CAAaU,EAAb,CAAgB,SAAhB,EAA2B,KAAKG,aAAhC;AACA,UAAMC,QAAQ,GAAG,KAAKP,OAAtB;;AACA,SAAKA,OAAL,GAAe,YAAY;AACvB,YAAMO,QAAQ,CAACC,IAAT,CAAc,IAAd,CAAN;AACA,WAAKC,SAAL,GAAiB,IAAjB;AACH,KAHD;AAIH;;AAODC,QAAM,CAACC,IAAD,EAAepB,IAAf,EAA0B;AAC5B,SAAKE,OAAL,CAAaiB,MAAb,CAAoBC,IAApB,EAA0BpB,IAA1B;AACH;;AACDqB,uBAAqB,CAACC,KAAD,EAAgBC,SAAhB,EAAmCC,SAAnC,EAAmD;AAAA;;AACpE,oCAAO,KAAKtB,OAAL,CAAauB,KAAb,CAAmBH,KAAnB,CAAP,0DAAO,sBAA2BI,MAA3B,CAAkCC,IAAlC,CAAuCJ,SAAvC,EAAyDC,SAAzD,CAAP;AACH;;AAnCsJ;;gBAAtIrC,W,iBACID,W;;gBADJC,W,cAEEyC,YAAD,IAAgCC,mEAAA,CAA8BD,YAA9B,EAA4C1C,WAA5C,EAAyD4C,4DAAzD,C;;gBAFjC3C,W,aAG6B,CAAC,MAAD,EAAS,IAAT,EAAe,MAAf,EAAuB,YAAvB,EAAqC,SAArC,C;;;;;;;;;;ACdlD,iBAAiB,qBAAuB,wC","file":"js/ed59606c427fb184edcb.js","sourcesContent":["import processorURL from \"./Patcher.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\nimport type Patcher from \"../patcher/Patcher\";\nimport type { PatcherEventMap } from \"../patcher/Patcher\";\nimport type { IPatcherNode, IPatcherProcessor, PatcherOptions, PatcherParameters } from \"./PatcherWorklet.types\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { RawPatcher } from \"../types\";\n\nconst processorId = \"__JSPatcher_Patcher\";\n\nexport default class PatcherNode extends AudioWorkletProxyNode<IPatcherNode, IPatcherProcessor, PatcherParameters, PatcherOptions> implements IPatcherNode {\n    static processorId = processorId;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorId, processorURL);\n    static fnNames: (keyof IPatcherProcessor)[] = [\"init\", \"fn\", \"sync\", \"objectEmit\", \"destroy\"];\n    readonly patcher: Patcher;\n    constructor(context: BaseAudioContext, options: { env: IJSPatcherEnv; instanceId: string; fileId?: string; data?: RawPatcher }) {\n        super(context, processorId, {\n            numberOfInputs: 1,\n            numberOfOutputs: 1,\n            channelCount: 16,\n            channelCountMode: \"explicit\",\n            channelInterpretation: \"discrete\",\n            processorOptions: { instanceId: options.instanceId, fileId: options.fileId, data: options.data }\n        });\n        this.patcher = options.env.getInstanceById(options.instanceId) as Patcher;\n        this.patcher.on(\"changed\", this.handleChanged);\n        this.patcher.on(\"dataInput\", this.handleInput);\n        this.patcher.on(\"destroy\", this.handleDestroy);\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n    handleChanged = () => {\n        const syncData = this.patcher.history.getSyncData();\n        this.sync(syncData);\n    };\n    handleInput = (e: PatcherEventMap[\"dataInput\"]) => this.fn(e.data, e.inlet);\n    handleDestroy = () => this.destroy();\n    outlet(port: number, data: any) {\n        this.patcher.outlet(port, data);\n    }\n    objectEmitFromWorklet(boxId: string, eventName: string, eventData: any) {\n        return this.patcher.boxes[boxId]?.object.emit(eventName as any, eventData);\n    }\n}\n","module.exports = __webpack_public_path__ + \"js/b862f93c77ff2d6bfe33.worklet.js\";"],"sourceRoot":""}