{"version":3,"file":"src_core_text_PatcherText_ts.js/e4f9cfa76ad254ce9c09.worklet.js","mappings":"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","sources":["webpack://JSPatcher/./src/core/text/PatcherText.ts","webpack://JSPatcher/./src/core/text/TextEditor.ts","webpack://JSPatcher/./src/core/text/TextHistory.ts"],"sourcesContent":["import FileInstance from \"../file/FileInstance\";\nimport TextEditor from \"./TextEditor\";\nimport TempTextFile from \"./TempTextFile\";\nimport TextHistory from \"./TextHistory\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\n\nexport interface PatcherTextEventMap {\n    \"textModified\": { text: string; oldText: string };\n}\n\nexport default class PatcherText extends FileInstance<PatcherTextEventMap, PersistentProjectFile | TempTextFile> {\n    static async fromProjectItem(options: { file: PersistentProjectFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }) {\n        return new this(options).init(options.file.data);\n    }\n    text: string;\n    _history = new TextHistory();\n    async getEditor() {\n        const editor = new TextEditor(this);\n        return editor.init();\n    }\n    async init(data?: ArrayBuffer) {\n        if (data) this.text = await new Response(data).text();\n        else this.text = \"\";\n        this._isReady = true;\n        this.emit(\"ready\");\n        return this;\n    }\n    async serialize() {\n        return new Blob([this.text]).arrayBuffer();\n    }\n    clone() {\n        const patcherText = new PatcherText({ env: this.env, project: this.project, file: this.file });\n        patcherText.text = this.text;\n        return patcherText;\n    }\n}\n","import type { SemanticICONS } from \"semantic-ui-react\";\nimport type MonacoEditor from \"react-monaco-editor\";\nimport type { monaco } from \"react-monaco-editor\";\nimport FileEditor from \"../file/FileEditor\";\nimport TempTextFile from \"./TempTextFile\";\nimport type PatcherText from \"./PatcherText\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\n\nexport interface TextEditorEventMap {\n    \"textModified\": { text: string; oldText: string };\n}\n\nexport interface TextHistoryEventMap extends TextEditorEventMap {}\n\nexport default class TextEditor extends FileEditor<PatcherText, TextEditorEventMap> {\n    static async fromProjectItem({ file, env, project, instanceId }: { file: PersistentProjectFile | TempTextFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }) {\n        const text = file instanceof TempTextFile ? file.data : await file.instantiate({ env, project, instanceId }) as PatcherText;\n        const editor = new this(text);\n        return editor.init();\n    }\n    editor: monaco.editor.IStandaloneCodeEditor;\n    editorJSX: typeof MonacoEditor;\n    get fileExtension() {\n        return \"txt\";\n    }\n    get fileIcon(): SemanticICONS {\n        return \"code\";\n    }\n    get text() {\n        return this.instance.text;\n    }\n    set text(value: string) {\n        this.instance.text = value;\n    }\n    async init() {\n        if (!this.instance.isReady) {\n            await new Promise<void>((resolve, reject) => {\n                const handleReady = () => {\n                    resolve();\n                    this.instance.off(\"ready\", handleReady);\n                };\n                this.instance.on(\"ready\", handleReady);\n            });\n        }\n        this._isReady = true;\n        this.emit(\"ready\");\n        return this;\n    }\n    get editorLanguage() {\n        if (!this.file) return \"none\";\n        if (this.file.name.endsWith(\".js\")) return \"js\";\n        if (this.file.name.endsWith(\".json\")) return \"json\";\n        if (this.file.name.endsWith(\".html\")) return \"html\";\n        if (this.file.name.endsWith(\".dsp\")) return \"faust\";\n        return \"none\";\n    }\n    bindEditor(editor: monaco.editor.IStandaloneCodeEditor) {\n        this.editor = editor;\n        const didChanged = editor.onDidChangeModelContent((e) => {\n            const oldText = this.text;\n            const text = editor.getValue();\n            this.text = text;\n            this.emit(\"textModified\", { text, oldText });\n            this.emit(\"changed\");\n        });\n        const didDispose = editor.onDidDispose(() => {\n            didChanged.dispose();\n            didDispose.dispose();\n            this.editor = undefined;\n            this.emit(\"destroy\");\n        });\n        editor.addAction({\n            id: \"editor.action.save\",\n            label: \"Save\",\n            keybindings: [/* KeyMod.CtrlCmd */2048 | /* KeyCode.KEY_S */49],\n            run: () => this.save()\n        });\n    }\n    async copy() {\n        if (!this.editor) return;\n        this.editor.focus();\n        document.execCommand(\"copy\");\n    }\n    async cut() {\n        if (!this.editor) return;\n        this.editor.focus();\n        document.execCommand(\"cut\");\n    }\n    async paste() {\n        if (!this.editor) return;\n        this.editor.focus();\n        const text = await navigator.clipboard.readText();\n        this.editor.executeEdits(\"\", [{ range: this.editor.getSelection(), text, forceMoveMarkers: true }]);\n    }\n    async deleteSelected() {\n        if (!this.editor) return;\n        this.editor.executeEdits(\"\", [{ range: this.editor.getSelection(), text: null }]);\n    }\n    async selectAll() {\n        if (!this.editor) return;\n        const range = this.editor.getModel().getFullModelRange();\n        this.editor.setSelection(range);\n    }\n    onUiResized() {}\n}\n","import History from \"../file/History\";\nimport TextEditor, { TextHistoryEventMap } from \"./TextEditor\";\n\nexport default class TextHistory extends History<TextHistoryEventMap, TextEditor> {\n    get eventListening(): (keyof TextHistoryEventMap)[] {\n        return [\"textModified\"];\n    }\n    async undoOf(editor: TextEditor, eventName: keyof TextHistoryEventMap, eventData: any) {\n        if (eventName === \"textModified\") {\n            const e: TextHistoryEventMap[typeof eventName] = eventData;\n            const { oldText } = e;\n            if (editor.editor) {\n                editor.editor.focus();\n                if (!document.execCommand(\"undo\")) {\n                    (editor.editor.getModel() as any)?.undo();\n                }\n                editor.text = editor.editor.getValue();\n                e.oldText = editor.text;\n            } else {\n                editor.text = oldText;\n            }\n        }\n    }\n    async redoOf(editor: TextEditor, eventName: keyof TextHistoryEventMap, eventData: any) {\n        if (eventName === \"textModified\") {\n            const e: TextHistoryEventMap[typeof eventName] = eventData;\n            const { text } = e;\n            if (editor.editor) {\n                editor.editor.focus();\n                if (!document.execCommand(\"undo\")) {\n                    (editor.editor.getModel() as any)?.redo();\n                }\n                editor.text = editor.editor.getValue();\n                e.text = editor.text;\n            } else {\n                editor.text = text;\n            }\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}