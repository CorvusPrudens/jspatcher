{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/WebAudio/Analyser.ts","webpack://JSPatcher/./src/core/objects/WebAudio/AnyNode.ts","webpack://JSPatcher/./src/core/objects/WebAudio/AudioIO.tsx","webpack://JSPatcher/./src/core/objects/WebAudio/AudioNode.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Biquad.ts","webpack://JSPatcher/./src/core/objects/WebAudio/BufferSource.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Compressor.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Constant.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Convolver.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Delay.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Destination.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Gain.ts","webpack://JSPatcher/./src/core/objects/WebAudio/IIRFilter.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Media.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Merger.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Oscillator.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Panner.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Record.ts","webpack://JSPatcher/./src/core/objects/WebAudio/Splitter.ts","webpack://JSPatcher/./src/core/objects/WebAudio/StereoPanner.ts","webpack://JSPatcher/./src/core/objects/WebAudio/StreamDestination.ts","webpack://JSPatcher/./src/core/objects/WebAudio/StreamSource.ts","webpack://JSPatcher/./src/core/objects/WebAudio/WaveShaper.ts","webpack://JSPatcher/./src/core/objects/WebAudio/WebAudioPlugin.ts","webpack://JSPatcher/./src/core/objects/WebAudio/audioContext.ts","webpack://JSPatcher/./src/core/objects/WebAudio/audioWorklet.ts","webpack://JSPatcher/./src/core/objects/WebAudio/buffer.tsx","webpack://JSPatcher/./src/core/objects/WebAudio/exports.ts"],"names":["Analyser","JSPAudioNode","node","audioCtx","createAnalyser","index","subscribe","on","inlets","outlets","channelInterpretation","props","fftSize","minDecibels","maxDecibels","smoothingTimeConstant","e","error","message","data","inlet","isBang","outlet","getFloatTimeDomainData","getByteTimeDomainData","getFloatFrequencyData","getByteFrequencyData","isHot","type","description","default","AnyNode","undefined","AudioNode","disconnectAudio","state","numberOfInputs","numberOfOutputs","factoryMeta","meta","inlet0","inlet1","outlet0","inletAudioConnections","i","outletAudioConnections","connectAudio","handleInlet","AudioIn","stream","search","devices","navigator","mediaDevices","enumerateDevices","enums","filter","d","kind","map","label","deviceId","args","device","find","getUserMedia","audio","getConstraints","resetNode","box","addEventListener","handleDeviceChange","newSearch","removeEventListener","autoGainControl","getProp","channelCount","echoCancellation","latency","noiseSuppression","sampleRate","sampleSize","createMediaStreamSource","optional","supportSetSinkId","window","MediaStreamAudioDestinationNode","HTMLMediaElement","prototype","setSinkId","AudioOut","destination","msadn","createMediaStreamDestination","Audio","sinkId","played","pause","play","srcObject","src","URL","createObjectURL","AudioOutUI","DefaultUI","React","componentDidMount","div","refContainer","current","object","style","display","appendChild","render","textContainerProps","ref","DefaultObject","nodeIn","Biquad","createBiquadFilter","frequency","detune","Q","gain","paramMap","forEach","key","setValueAtTime","currentTime","isBiquadFilterType","bpf","decodeLine","applyBPF","x","indexOf","BufferSrc","createBufferSource","playing","playbackRate","Bang","handleEnded","numberParamMap","booleanParamMap","start","setState","stop","AudioBuffer","buffer","PatcherAudio","audioBuffer","loop","loopStart","loopEnd","bufferIn","value","Compressor","createDynamicsCompressor","threshold","knee","ratio","attack","release","Constant","createConstantSource","offset","Convolver","createConvolver","normalize","Delay","createDelay","delayTime","Destination","Gain","createGain","IIRFilter","feedforward","feedback","isNumberArray","createIIRFilter","Media","element","createMediaElementSource","Merger","createChannelMerger","bangInlet","siganlInlet","Oscillator","createOscillator","Panner","createPanner","orientationX","orientationY","orientationZ","positionX","positionY","positionZ","distanceModel","panningModel","coneInnerAngle","coneOuterAngle","coneOuterGain","maxDistance","refDistance","rolloffFactor","Record","dummyNode","recording","$","$start","$end","inPlace","$total","length","numberOfChannels","mono","channelOffset","append","Math","max","range","bufferSize","splice","unshift","Array","$target","newLength","ceil","log","newBuffer","OperableAudioBuffer","channel","getChannelData","set","waveform","update","$copyEnd","subarray","$sSplit","emit","reset","split","setAudio","TransmitterNode","audioWorklet","handleReceiveBuffer","connect","disconnectAudioInlet","connectAudioInlet","updateBox","disconnect","destroy","Splitter","createChannelSplitter","signalOutlet","nodeOutlet","StereoPanner","createStereoPanner","pan","StreamDest","outletAll","StreamSrc","WaveShaper","createWaveShaper","oversample","Float32Array","curve","PluginUI","DOMUI","children","Plugin","BaseObject","merger","splitter","plugin","disconnectEvents","audioNode","destroyGui","load","handleUpdateArgs","isMIDIEvent","bytes","from","scheduleEvents","time","t","a","id","normalized","con","AudioParam","url","WAPCtor","createInstance","createGui","handleDestroy","width","height","position","updateUI","Object","assign","Ctor","constructor","firstInletMeta","firstInletSignalMeta","inletMeta","audioParamInletMeta","outletMeta","lastOutletMeta","paramInfo","getParameterInfo","params","keys","path","param","defaultValue","minValue","maxValue","handlePreInit","handlePostInit","audioContext","patcher","Blob","addModule","BufferUI","DefaultPopupUI","timestamp","performance","now","editor","dockEditor","inDock","isTemporary","save","locked","unloadEditor","loadEditor","modalOpen","stopPropagation","AudioEditor","init","handleChanged","setActive","off","componentDidUpdate","prevProps","prevState","onUiResized","componentWillUnmount","content","env","language","handleMouseDownModal","containerProps","onDoubleClick","handleDoubleClick","modalProps","className","open","onClose","handleClose","onKeyDown","basic","size","closeIcon","Buffer","toString","file","assertBuffer","handleFilePathChanged","projectPath","handleSaved","instance","reload","subsribeItem","addObserver","unsubscribeItem","removeObserver","item","newItem","getSharedItem","project","instantiate","oldKey","ab","ArrayBuffer","arrayBuffer","decodeAudioData"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAWe,MAAMA,QAAN,SAAuBC,+CAAvB,CAA0E;AAAA;AAAA;;AAAA,mCAoE7E;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcC,cAAd;AAAR,KApE6E;;AAAA,mDAqE7D,CAAC;AAAEF,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CArE6D;;AAAA,oDAsE5D,CAAC;AAAEH,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAtE4D;AAAA;;AAuErFC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,UAAI;AACA,YAAI,OAAOA,KAAK,CAACC,OAAb,KAAyB,QAA7B,EAAuC,KAAKV,IAAL,CAAUU,OAAV,GAAoBD,KAAK,CAACC,OAA1B;AACvC,YAAI,OAAOD,KAAK,CAACE,WAAb,KAA6B,QAAjC,EAA2C,KAAKX,IAAL,CAAUW,WAAV,GAAwBF,KAAK,CAACE,WAA9B;AAC3C,YAAI,OAAOF,KAAK,CAACG,WAAb,KAA6B,QAAjC,EAA2C,KAAKZ,IAAL,CAAUY,WAAV,GAAwBH,KAAK,CAACG,WAA9B;AAC3C,YAAI,OAAOH,KAAK,CAACI,qBAAb,KAAuC,QAA3C,EAAqD,KAAKb,IAAL,CAAUa,qBAAV,GAAkCJ,KAAK,CAACI,qBAAxC;AACxD,OALD,CAKE,OAAOC,CAAP,EAAU;AACR,aAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ,KATD;AAUA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,gBAAMR,KAAK,GAAGQ,IAAd;;AACA,cAAI;AACA,gBAAI,OAAOR,KAAK,CAACC,OAAb,KAAyB,QAA7B,EAAuC,KAAKV,IAAL,CAAUU,OAAV,GAAoBD,KAAK,CAACC,OAA1B;AACvC,gBAAI,OAAOD,KAAK,CAACE,WAAb,KAA6B,QAAjC,EAA2C,KAAKX,IAAL,CAAUW,WAAV,GAAwBF,KAAK,CAACE,WAA9B;AAC3C,gBAAI,OAAOF,KAAK,CAACG,WAAb,KAA6B,QAAjC,EAA2C,KAAKZ,IAAL,CAAUY,WAAV,GAAwBH,KAAK,CAACG,WAA9B;AAC3C,gBAAI,OAAOH,KAAK,CAACI,qBAAb,KAAuC,QAA3C,EAAqD,KAAKb,IAAL,CAAUa,qBAAV,GAAkCJ,KAAK,CAACI,qBAAxC;AACxD,WALD,CAKE,OAAOC,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ,SAVD,MAUO;AACH,eAAKD,KAAL,CAAW,iBAAX;AACH;AACJ,OAdM,MAcA;AACH,YAAI;AACA,cAAIG,KAAK,KAAK,CAAd,EAAiB;AACb,iBAAKlB,IAAL,CAAUqB,sBAAV,CAAiCJ,IAAjC;AACA,iBAAKG,MAAL,CAAY,CAAZ,EAAeH,IAAf;AACH,WAHD,MAGO,IAAIC,KAAK,KAAK,CAAd,EAAiB;AACpB,iBAAKlB,IAAL,CAAUsB,qBAAV,CAAgCL,IAAhC;AACA,iBAAKG,MAAL,CAAY,CAAZ,EAAeH,IAAf;AACH,WAHM,MAGA,IAAIC,KAAK,KAAK,CAAd,EAAiB;AACpB,iBAAKlB,IAAL,CAAUuB,qBAAV,CAAgCN,IAAhC;AACA,iBAAKG,MAAL,CAAY,CAAZ,EAAeH,IAAf;AACH,WAHM,MAGA,IAAIC,KAAK,KAAK,CAAd,EAAiB;AACpB,iBAAKlB,IAAL,CAAUwB,oBAAV,CAA+BP,IAA/B;AACA,iBAAKG,MAAL,CAAY,CAAZ,EAAeH,IAAf;AACH;AACJ,SAdD,CAcE,OAAOH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KApCD;AAqCH;;AA7HoF;;gBAApElB,Q,iBACI,uB;;gBADJA,Q,YAEgB,CAAC;AAC9B2B,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAZ8B,EAgB9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAhB8B,EAoB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CApB8B,C;;gBAFhB7B,Q,aA2BkB,CAAC;AAChC4B,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,EAMhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CANgC,EAShC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CATgC,EAYhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAZgC,EAehC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAfgC,C;;gBA3BlB7B,Q,WA8Cc;AAC3BY,SAAO,EAAE;AACLgB,QAAI,EAAE,QADD;AAELE,WAAO,EAAE,IAFJ;AAGLD,eAAW,EAAE;AAHR,GADkB;AAM3BhB,aAAW,EAAE;AACTe,QAAI,EAAE,QADG;AAETE,WAAO,EAAE,CAAC,GAFD;AAGTD,eAAW,EAAE;AAHJ,GANc;AAW3Bf,aAAW,EAAE;AACTc,QAAI,EAAE,QADG;AAETE,WAAO,EAAE,CAAC,EAFD;AAGTD,eAAW,EAAE;AAHJ,GAXc;AAgB3Bd,uBAAqB,EAAE;AACnBa,QAAI,EAAE,QADa;AAEnBE,WAAO,EAAE,GAFU;AAGnBD,eAAW,EAAE;AAHM;AAhBI,C;;;;;;;;;;;;;;;;;;AC1DnC;AAGe,MAAME,OAAN,SAAsB9B,+CAAtB,CAAkF;AAAA;AAAA;;AAAA,mCAerF;AAAEC,UAAI,EAAE8B;AAAR,KAfqF;;AAAA,yCAgB/E,QAAmD;AAAA,UAAlD;AAAEb,YAAF;AAAQC;AAAR,OAAkD;;AAC7D,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI;AACA,cAAID,IAAI,YAAYc,SAApB,EAA+B;AAC3B,iBAAKC,eAAL;AACA,iBAAKC,KAAL,CAAWjC,IAAX,GAAkBiB,IAAlB;AACA,kBAAMX,MAAM,GAAG,KAAKN,IAAL,CAAUkC,cAAV,IAA4B,CAA3C;AACA,kBAAM3B,OAAO,GAAG,KAAKP,IAAL,CAAUmC,eAA1B;AACA,kBAAMC,WAAW,GAAGP,OAAO,CAACQ,IAA5B;AACA,kBAAMC,MAAM,GAAGF,WAAW,CAAC9B,MAAZ,CAAmB,CAAnB,CAAf;AACA,kBAAMiC,MAAM,GAAGH,WAAW,CAAC9B,MAAZ,CAAmB,CAAnB,CAAf;AACA,kBAAMkC,OAAO,GAAGJ,WAAW,CAAC9B,MAAZ,CAAmB,CAAnB,CAAhB;AACA,iBAAKmC,qBAAL,GAA6B,CAAC;AAAEzC,kBAAI,EAAE,KAAKA,IAAb;AAAmBG,mBAAK,EAAE;AAA1B,aAAD,CAA7B;AACAiC,uBAAW,CAAC9B,MAAZ,GAAqB,CAACgC,MAAD,CAArB;;AACA,iBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,MAApB,EAA4BoC,CAAC,EAA7B,EAAiC;AAC7BN,yBAAW,CAAC9B,MAAZ,CAAmBoC,CAAnB,IAAwBH,MAAxB;AACH;;AACD,iBAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,OAApB,EAA6BmC,CAAC,EAA9B,EAAkC;AAC9BN,yBAAW,CAAC7B,OAAZ,CAAoBmC,CAApB,IAAyBF,OAAzB;AACH;;AACD,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1C,IAAL,CAAUkC,cAA9B,EAA8CQ,CAAC,EAA/C,EAAmD;AAC/C,mBAAKD,qBAAL,CAA2BC,CAA3B,IAAgC;AAAE1C,oBAAI,EAAE,KAAKA,IAAb;AAAmBG,qBAAK,EAAEuC;AAA1B,eAAhC;AACH;;AACD,iBAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1C,IAAL,CAAUmC,eAA9B,EAA+CO,CAAC,EAAhD,EAAoD;AAChD,mBAAKC,sBAAL,CAA4BD,CAA5B,IAAiC;AAAE1C,oBAAI,EAAE,KAAKA,IAAb;AAAmBG,qBAAK,EAAEuC;AAA1B,eAAjC;AACH;;AACD,iBAAKL,IAAL,GAAYD,WAAZ;AACA,iBAAK9B,MAAL,GAAcA,MAAd;AACA,iBAAKC,OAAL,GAAeA,OAAf;AACA,iBAAKqC,YAAL;AACH;AACJ,SA7BD,CA6BE,OAAO9B,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACA,iBAAO,IAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH,KArD4F;AAAA;;AAsD7FZ,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,OAAR,EAAiB,KAAKwC,WAAtB;AACH;;AAzD4F;;gBAA5EhB,O,iBACI,oB;;gBADJA,O,YAEgB,CAAC;AAC9BJ,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhBE,O,aAWkB,CAAC;AAChCH,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdvC;AACA;AAEA;AACA;AAYO,MAAMmB,OAAN,SAAsB/C,+CAAtB,CAAoL;AAAA;AAAA;;AAAA,mCAwD/K;AAAEC,UAAI,EAAE8B,SAAR;AAAiDiB,YAAM,EAAEjB,SAAzD;AAAmFkB,YAAM,EAAElB;AAA3F,KAxD+K;;AAAA,gDAyDlK,YAAY;AAC7B,YAAMmB,OAAO,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,gBAAvB,EAAtB;AACA,YAAMC,KAAK,GAAGJ,OAAO,CAACK,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,YAA/B,EAA6CC,GAA7C,CAAiDF,CAAC,IAAIA,CAAC,CAACG,KAAF,IAAWH,CAAC,CAACI,QAAnE,CAAd;AACA,YAAM;AAAEtB;AAAF,UAAW,IAAjB;AACAA,UAAI,CAACuB,IAAL,CAAU,CAAV,oCAAoBd,OAAO,CAACc,IAAR,CAAa,CAAb,CAApB;AAAqClC,YAAI,EAAE,MAA3C;AAAmD2B;AAAnD;AACA,WAAKhB,IAAL,GAAYA,IAAZ;AACH,KA/DsL;;AAAA,uCAgE3K,MAAOW,MAAP,IAA2B;AACnC,WAAKf,KAAL,CAAWe,MAAX,GAAoBA,MAApB;AACA,UAAIW,QAAJ;;AACA,UAAIX,MAAJ,EAAY;AACR,cAAMC,OAAO,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,gBAAvB,EAAtB;AACA,cAAMS,MAAM,GAAGZ,OAAO,CAACa,IAAR,CAAaP,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,YAAX,KAA4BD,CAAC,CAACI,QAAF,KAAeX,MAAf,IAAyBO,CAAC,CAACG,KAAF,KAAYV,MAAjE,CAAlB,CAAf;AACA,YAAIa,MAAJ,EAAYF,QAAQ,GAAGE,MAAM,CAACF,QAAlB;AACf;;AACD,WAAK1B,KAAL,CAAWc,MAAX,GAAoB,MAAMG,SAAS,CAACC,YAAV,CAAuBY,YAAvB,CAAoC;AAAEC,aAAK,EAAE,KAAKC,cAAL,CAAoBN,QAApB;AAAT,OAApC,CAA1B;AACA,UAAI,KAAK1B,KAAL,CAAWc,MAAf,EAAuB,KAAKmB,SAAL;AAC1B,KA1EsL;AAAA;;AA2EvL9D,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,UAAR,EAAoB,MAAM;AACtB,YAAM2C,MAAM,GAAG,KAAKmB,GAAL,CAASP,IAAT,CAAc,CAAd,CAAf;AACAV,eAAS,CAACC,YAAV,CAAuBiB,gBAAvB,CAAwC,cAAxC,EAAwD,KAAKC,kBAA7D;AACA,WAAKA,kBAAL;AACA,WAAKC,SAAL,CAAetB,MAAf;AACH,KALD;AAMA,SAAK3C,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAqB;AACvC,WAAKU,SAAL,CAAeV,IAAI,CAAC,CAAD,CAAnB;AACH,KAFD;AAGA,SAAKvD,EAAL,CAAQ,aAAR,EAAuB,MAAM;AACzB,WAAKiE,SAAL,CAAe,KAAKrC,KAAL,CAAWe,MAA1B;AACH,KAFD;AAGA,SAAK3C,EAAL,CAAQ,OAAR,EAAiB,cAA2B;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AACxC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,CAACC,6CAAM,CAACF,IAAD,CAAX,EAAmB;AACf,gBAAM,KAAKqD,SAAL,CAAerD,IAAf,CAAN;AACH;;AACD,YAAI,KAAKjB,IAAT,EAAe,KAAKoB,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AAClB;AACJ,KAPD;AAQA,SAAKK,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB6C,eAAS,CAACC,YAAV,CAAuBoB,mBAAvB,CAA2C,cAA3C,EAA2D,KAAKF,kBAAhE;AACH,KAFD;AAGH;;AACDJ,gBAAc,CAACN,QAAD,EAAiC;AAC3C,WAAO;AACHA,cADG;AAEHa,qBAAe,EAAE,KAAKC,OAAL,CAAa,iBAAb,CAFd;AAGHC,kBAAY,EAAE,KAAKD,OAAL,CAAa,cAAb,CAHX;AAIHE,sBAAgB,EAAE,KAAKF,OAAL,CAAa,kBAAb,CAJf;AAKHG,aAAO,EAAE,KAAKH,OAAL,CAAa,SAAb,CALN;AAMHI,sBAAgB,EAAE,KAAKJ,OAAL,CAAa,kBAAb,CANf;AAOHK,gBAAU,EAAE,KAAKL,OAAL,CAAa,YAAb,CAPT;AAQHM,gBAAU,EAAE,KAAKN,OAAL,CAAa,YAAb;AART,KAAP;AAUH;;AACDP,WAAS,GAAG;AACR,SAAKlC,eAAL;;AACA,QAAI,KAAKC,KAAL,CAAWc,MAAf,EAAuB;AACnB,WAAK/C,IAAL,GAAY,KAAKC,QAAL,CAAc+E,uBAAd,CAAsC,KAAK/C,KAAL,CAAWc,MAAjD,CAAZ;AACA,WAAK/C,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH;;AACD,SAAKmC,sBAAL,CAA4B,CAA5B,IAAiC;AAAE3C,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAjC;AACA,SAAKyC,YAAL;AACH;;AA7HsL;;gBAA9KE,O,iBACY,wC;;gBADZA,O,YAEwB,CAAC;AAC9BrB,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,UAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFxBmB,O,aAO0B,CAAC;AAChCpB,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAP1BmB,O,UAcoB,CAAC;AAC1BpB,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,KAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;gBAdpBmB,O,WAmBiD;AACtD0B,iBAAe,EAAE;AACb9C,QAAI,EAAE,SADO;AAEbE,WAAO,EAAE,KAFI;AAGbD,eAAW,EAAE;AAHA,GADqC;AAMtD+C,cAAY,EAAE;AACVhD,QAAI,EAAE,QADI;AAEVE,WAAO,EAAEE,SAFC;AAGVH,eAAW,EAAE;AAHH,GANwC;AAWtDgD,kBAAgB,EAAE;AACdjD,QAAI,EAAE,SADQ;AAEdE,WAAO,EAAE,KAFK;AAGdD,eAAW,EAAE;AAHC,GAXoC;AAgBtDiD,SAAO,EAAE;AACLlD,QAAI,EAAE,QADD;AAELE,WAAO,EAAEE,SAFJ;AAGLH,eAAW,EAAE;AAHR,GAhB6C;AAqBtDkD,kBAAgB,EAAE;AACdnD,QAAI,EAAE,SADQ;AAEdE,WAAO,EAAE,KAFK;AAGdD,eAAW,EAAE;AAHC,GArBoC;AA0BtDmD,YAAU,EAAE;AACRpD,QAAI,EAAE,QADE;AAERE,WAAO,EAAEE,SAFD;AAGRH,eAAW,EAAE;AAHL,GA1B0C;AA+BtDoD,YAAU,EAAE;AACRrD,QAAI,EAAE,QADE;AAERE,WAAO,EAAEE,SAFD;AAGRH,eAAW,EAAE;AAHL;AA/B0C,C;;AA4G9D,MAAMuD,gBAAgB,GAAGC,MAAM,CAACC,+BAAP,IAA0CC,gBAAgB,CAACC,SAAjB,CAA2BC,SAA9F;AACO,MAAMC,QAAN,SAAuBzF,+CAAvB,CAA4R;AAAA;AAAA;;AAAA,mCA+BvRmF,gBAAgB,GAAG;AAAElF,UAAI,EAAE,KAAKC,QAAL,CAAcwF,WAAtB;AAAmCC,WAAK,EAAE,KAAKzF,QAAL,CAAc0F,4BAAd,EAA1C;AAAwF3B,WAAK,EAAE,IAAI4B,KAAJ,EAA/F;AAA4G5C,YAAM,EAAElB;AAApH,KAAH,GAA+I;AAAE9B,UAAI,EAAE,KAAKC,QAAL,CAAcwF;AAAtB,KA/BwH;;AAAA,mDAgCvQ,CAAC;AAAEzF,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAhCuQ;;AAAA,gDAiC1Q,YAAY;AAC7B,YAAM8C,OAAO,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,gBAAvB,EAAtB;AACA,YAAMC,KAAK,GAAGJ,OAAO,CAACK,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,aAA/B,EAA8CC,GAA9C,CAAkDF,CAAC,IAAIA,CAAC,CAACG,KAAF,IAAWH,CAAC,CAACI,QAApE,CAAd;AACA,YAAM;AAAEtB;AAAF,UAAW,IAAjB;AACAA,UAAI,CAACuB,IAAL,CAAU,CAAV,oCAAoB4B,QAAQ,CAAC5B,IAAT,CAAc,CAAd,CAApB;AAAsClC,YAAI,EAAE,MAA5C;AAAoD2B;AAApD;AACA,WAAKhB,IAAL,GAAYA,IAAZ;AACH,KAvC8R;;AAAA,uCAwCnR,MAAOW,MAAP,IAA2B;AACnC,UAAI,CAACkC,gBAAL,EAAuB;AACvB,WAAKjD,KAAL,CAAWe,MAAX,GAAoBA,MAApB;;AACA,UAAI,CAACA,MAAD,IAAWA,MAAM,KAAK,SAA1B,EAAqC;AACjC,aAAKkB,SAAL;AACA;AACH;;AACD,YAAM;AAAEF;AAAF,UAAY,KAAK/B,KAAvB;AACA,UAAI0B,QAAQ,GAAGK,KAAK,CAAC6B,MAAN,IAAgB,SAA/B;AACA,YAAM5C,OAAO,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,gBAAvB,EAAtB;AACA,YAAMS,MAAM,GAAGZ,OAAO,CAACa,IAAR,CAAaP,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,aAAX,KAA6BD,CAAC,CAACI,QAAF,KAAeX,MAAf,IAAyBO,CAAC,CAACG,KAAF,KAAYV,MAAlE,CAAlB,CAAf;AACA,UAAIa,MAAJ,EAAYF,QAAQ,GAAGE,MAAM,CAACF,QAAlB;;AACZ,UAAIK,KAAK,CAAC6B,MAAN,KAAiBlC,QAArB,EAA+B;AAC3B,YAAIK,KAAK,CAAC8B,MAAV,EAAkB9B,KAAK,CAAC+B,KAAN;AAClB/B,aAAK,CAACuB,SAAN,CAAgB5B,QAAhB;AACAK,aAAK,CAACgC,IAAN;AACH;;AACD,WAAK9B,SAAL,CAAe,IAAf;AACH,KA1D8R;AAAA;;AA2D/R9D,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,UAAR,EAAoB,MAAM;AACtB,WAAKL,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;;AACA,UAAI0E,gBAAJ,EAAsB;AAClB,aAAKjD,KAAL,CAAWyD,KAAX,CAAiBlF,qBAAjB,GAAyC,UAAzC;AACA,cAAM;AAAEwD,eAAF;AAAS0B;AAAT,YAAmB,KAAKzD,KAA9B;AACA,cAAM;AAAEc;AAAF,YAAa2C,KAAnB;AACA,YAAI,eAAe1B,KAAnB,EAA0BA,KAAK,CAACiC,SAAN,GAAkBlD,MAAlB,CAA1B,KACMiB,KAAD,CAA4BkC,GAA5B,GAAkCC,GAAG,CAACC,eAAJ,CAAoBrD,MAApB,CAAlC;AACL,cAAMC,MAAM,GAAG,KAAKmB,GAAL,CAASP,IAAT,CAAc,CAAd,CAAf;AACAV,iBAAS,CAACC,YAAV,CAAuBiB,gBAAvB,CAAwC,cAAxC,EAAwD,KAAKC,kBAA7D;AACA,aAAKhE,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB6C,mBAAS,CAACC,YAAV,CAAuBoB,mBAAvB,CAA2C,cAA3C,EAA2D,KAAKF,kBAAhE;AACH,SAFD;AAGA,aAAKA,kBAAL;AACA,aAAKC,SAAL,CAAetB,MAAf;AACH;AACJ,KAhBD;AAiBA,SAAK3C,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAoB;AACtC,WAAKU,SAAL,CAAeV,IAAI,CAAC,CAAD,CAAnB;AACH,KAFD;AAGA,SAAKvD,EAAL,CAAQ,aAAR,EAAuB,MAAM;AACzB,WAAKiE,SAAL,CAAe,KAAKrC,KAAL,CAAWe,MAA1B;AACH,KAFD;AAGA,SAAK3C,EAAL,CAAQ,OAAR,EAAiB,eAA2B;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AACxC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,CAACC,6CAAM,CAACF,IAAD,CAAX,EAAmB;AACf,gBAAM,KAAKqD,SAAL,CAAerD,IAAf,CAAN;AACH;;AACD,YAAI,KAAKjB,IAAT,EAAe,KAAKoB,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AAClB;AACJ,KAPD;AAQH;;AACDiE,gBAAc,CAACN,QAAD,EAAiC;AAC3C,WAAO;AACHA,cADG;AAEHa,qBAAe,EAAE,KAAKC,OAAL,CAAa,iBAAb,CAFd;AAGHC,kBAAY,EAAE,KAAKD,OAAL,CAAa,cAAb,CAHX;AAIHE,sBAAgB,EAAE,KAAKF,OAAL,CAAa,kBAAb,CAJf;AAKHG,aAAO,EAAE,KAAKH,OAAL,CAAa,SAAb,CALN;AAMHI,sBAAgB,EAAE,KAAKJ,OAAL,CAAa,kBAAb,CANf;AAOHK,gBAAU,EAAE,KAAKL,OAAL,CAAa,YAAb,CAPT;AAQHM,gBAAU,EAAE,KAAKN,OAAL,CAAa,YAAb;AART,KAAP;AAUH;;AACDP,WAAS,CAACwB,KAAD,EAAkB;AACvB,QAAIA,KAAJ,EAAW;AACP,UAAI,KAAK1F,IAAL,KAAc,KAAKiC,KAAL,CAAWyD,KAA7B,EAAoC;AAChC,aAAK1D,eAAL;AACA,aAAKhC,IAAL,GAAY,KAAKiC,KAAL,CAAWyD,KAAvB;AACA,aAAKjD,qBAAL,CAA2B,CAA3B,IAAgC;AAAEzC,cAAI,EAAE,KAAKA,IAAb;AAAmBG,eAAK,EAAE;AAA1B,SAAhC;AACA,aAAKyC,YAAL;AACH;AACJ,KAPD,MAOO;AACH,UAAI,KAAK5C,IAAL,KAAc,KAAKC,QAAL,CAAcwF,WAAhC,EAA6C;AACzC,aAAKzD,eAAL;AACA,aAAKhC,IAAL,GAAY,KAAKC,QAAL,CAAcwF,WAA1B;AACA,aAAKhD,qBAAL,CAA2B,CAA3B,IAAgC;AAAEzC,cAAI,EAAE,KAAKA,IAAb;AAAmBG,eAAK,EAAE;AAA1B,SAAhC;AACA,aAAKyC,YAAL;AACH;AACJ;AACJ;;AA7H8R;;gBAAtR4C,Q,iBACY,wD;;gBADZA,Q,YAEwB,CAAC;AAC9B/D,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFxB6D,Q,aAO0B,CAAC;AAChC9D,MAAI,EAAE,QAD0B;AAEhCC,aAAW,sBAAeuD,gBAAgB,GAAG,oCAAH,GAA0C,EAAzE;AAFqB,CAAD,C;;gBAP1BM,Q,UAWKN,gBAAgB,GAAGpC,OAAO,CAACc,IAAX,GAAkB,E;;gBAXvC4B,Q,WAYMN,gBAAgB,GAAGpC,OAAO,CAACrC,KAAX,GAAmB,E;;gBAZzC+E,Q,QAaGN,gBAAgB,GAAG,MAAMmB,UAAN,SAAyBC,8CAAzB,CAA6C;AAAA;AAAA;;AAAA,uDACzDC,4CAAA,EADyD;AAAA;;AAExEC,mBAAiB,GAAG;AAChB,UAAMA,iBAAN;AACA,UAAMC,GAAG,GAAG,KAAKC,YAAL,CAAkBC,OAA9B;AACA,UAAM;AAAE3C;AAAF,QAAY,KAAK4C,MAAL,CAAY3E,KAA9B;;AACA,QAAIwE,GAAG,IAAIzC,KAAX,EAAkB;AACdA,WAAK,CAAC6C,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;AACAL,SAAG,CAACM,WAAJ,CAAgB/C,KAAhB;AACH;AACJ;;AACDgD,QAAM,GAAG;AACL,UAAMC,kBAAkB,mCAAQ,KAAKxG,KAAL,CAAWwG,kBAAnB;AAAuCC,SAAG,EAAE,KAAKR;AAAjD,MAAxB;;AACA,wBACI,iDAAC,8CAAD;AAAW,wBAAkB,EAAEO;AAA/B,OAAuD,KAAKxG,KAA5D,EADJ;AAGH;;AAhBuE,CAAhD,GAiBxB6F,8C;;;;;;;;;;;;;;;;;;AC7KR;AAEe,MAAevG,YAAf,SAA4LoH,gDAA5L,CAA2O;AAM9O,MAAJnH,IAAI,CAACoH,MAAD,EAAY;AAChB,SAAKnF,KAAL,CAAWjC,IAAX,GAAkBoH,MAAlB;AACH;;AACO,MAAJpH,IAAI,GAAG;AACP,WAAO,KAAKiC,KAAL,CAAWjC,IAAlB;AACH;;AAXqP;;gBAA5ND,Y,aACT,U;;gBADSA,Y,UAEG,W;;gBAFHA,Y,YAGV,Y;;gBAHUA,Y,aAIT,O;;gBAJSA,Y,iBAKL,+B;;;;;;;;;;;;;;;;;;;;ACRzB;AACA;AACA;AAIe,MAAMsH,MAAN,SAAqBtH,+CAArB,CAA8G;AAAA;AAAA;;AAAA,mCAgEjH;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcqH,kBAAd;AAAR,KAhEiH;;AAAA,mDAiEjG,CAAC;AAAEtH,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAUuH;AAAlB,KAAhC,EAA+D;AAAEvH,UAAI,EAAE,KAAKA,IAAL,CAAUwH;AAAlB,KAA/D,EAA2F;AAAExH,UAAI,EAAE,KAAKA,IAAL,CAAUyH;AAAlB,KAA3F,EAAkH;AAAEzH,UAAI,EAAE,KAAKA,IAAL,CAAU0H;AAAlB,KAAlH,CAjEiG;;AAAA,oDAkEhG,CAAC;AAAE1H,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAlEgG;AAAA;;AAmEzHC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,YAAMkH,QAAQ,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,GAAxB,EAA6B,MAA7B,CAAjB;AACAA,cAAQ,CAACC,OAAT,CAAkBC,GAAD,IAAS;AACtB,YAAI;AACA,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,EAAeC,cAAf,CAA8BrH,KAAK,CAACoH,GAAD,CAAnC,EAA0C,KAAK5H,QAAL,CAAc8H,WAAxD;AACvC,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,OAND;;AAOA,UAAI,OAAOP,KAAK,CAACiB,IAAb,KAAsB,QAA1B,EAAoC;AAChC,YAAI;AACA,eAAK1B,IAAL,CAAU0B,IAAV,GAAiBjB,KAAK,CAACiB,IAAvB;AACH,SAFD,CAEE,OAAOZ,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAhBD;AAiBA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;AAClC,YAAMyG,QAAQ,GAAG,CAAC,WAAD,EAAc,QAAd,EAAwB,GAAxB,EAA6B,MAA7B,CAAjB;;AACA,UAAIzG,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAImG,MAAM,CAACW,kBAAP,CAA0B/G,IAA1B,CAAJ,EAAqC,KAAKjB,IAAL,CAAU0B,IAAV,GAAiBT,IAAjB;AACxC,OAFM,MAEA,IAAIC,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,CAAzB,EAA4B;AAC/B,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAU2H,QAAQ,CAACzG,KAAK,GAAG,CAAT,CAAlB,CAAd,EAA8C+G,GAA9C;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAdD;AAeH;;AA1GwH;;gBAAxGqG,M,iBACI,2B;;gBADJA,M,YAEgB,CAAC;AAC9B5F,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAZ8B,EAgB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAhB8B,EAoB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,MAFP;AAGC2B,OAAK,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,UAApC,EAAgD,WAAhD,EAA6D,SAA7D,EAAwE,OAAxE,EAAiF,SAAjF,CAHR;AAIC1B,aAAW,EAAE;AAJd,CApB8B,C;;gBAFhB0F,M,aA4BkB,CAAC;AAChC3F,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBA5BlB0F,M,WAmCc;AAC3BE,WAAS,EAAE;AACP7F,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,GAFF;AAGPD,eAAW,EAAE;AAHN,GADgB;AAM3B6F,QAAM,EAAE;AACJ9F,QAAI,EAAE,QADF;AAEJE,WAAO,EAAE,GAFL;AAGJD,eAAW,EAAE;AAHT,GANmB;AAW3B8F,GAAC,EAAE;AACC/F,QAAI,EAAE,QADP;AAECE,WAAO,EAAE,GAFV;AAGCD,eAAW,EAAE;AAHd,GAXwB;AAgB3B+F,MAAI,EAAE;AACFhG,QAAI,EAAE,QADJ;AAEFE,WAAO,EAAE,EAFP;AAGFD,eAAW,EAAE;AAHX,GAhBqB;AAqB3BD,MAAI,EAAE;AACFA,QAAI,EAAE,MADJ;AAEF2B,SAAK,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,UAApC,EAAgD,WAAhD,EAA6D,SAA7D,EAAwE,OAAxE,EAAiF,SAAjF,CAFL;AAGFzB,WAAO,EAAE,SAHP;AAIFD,eAAW,EAAE;AAJX;AArBqB,C;;gBAnCd0F,M,wBA+DYe,CAAD,IAAmC,CAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,EAAoC,UAApC,EAAgD,WAAhD,EAA6D,SAA7D,EAAwE,OAAxE,EAAiF,SAAjF,EAA4FC,OAA5F,CAAoGD,CAApG,KAA0G,C;;;;;;;;;;;;;;;;;;;;;ACrE7K;AACA;AAEA;AACA;AASe,MAAME,SAAN,SAAwBvI,+CAAxB,CAA8G;AAAA;AAAA;;AAAA,mCA6D9G;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcsI,kBAAd,EAAR;AAA4CC,aAAO,EAAE;AAArD,KA7D8G;;AAAA,mDA8DjG,CAAC;AAAExI,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAUyI;AAAlB,KAAhC,EAAkE;AAAEzI,UAAI,EAAE,KAAKA,IAAL,CAAUwH;AAAlB,KAAlE,CA9DiG;;AAAA,oDA+DhG,CAAC;AAAExH,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CA/DgG;;AAAA,yCAgE3G,MAAM;AAChB,WAAKiB,MAAL,CAAY,CAAZ,EAAe,IAAIsH,uCAAJ,EAAf;AACA,WAAKxE,SAAL;AACH,KAnEwH;AAAA;;AAoEzH9D,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUoE,gBAAV,CAA2B,OAA3B,EAAoC,KAAKuE,WAAzC;AACH,KAJD;AAKA,SAAKtI,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,YAAMkH,QAAQ,GAAG,CAAC,cAAD,EAAiB,QAAjB,CAAjB;AACA,YAAMiB,cAAc,GAAG,CAAC,WAAD,EAAc,SAAd,CAAvB;AACA,YAAMC,eAAe,GAAG,CAAC,MAAD,CAAxB;;AACA,UAAI;AACAlB,gBAAQ,CAACC,OAAT,CAAkBC,GAAD,IAAS;AACtB,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,EAAeC,cAAf,CAA8BrH,KAAK,CAACoH,GAAD,CAAnC,EAA0C,KAAK5H,QAAL,CAAc8H,WAAxD;AACvC,SAFD;AAGAa,sBAAc,CAAChB,OAAf,CAAwBC,GAAD,IAAS;AAC5B,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,IAAiBpH,KAAK,CAACoH,GAAD,CAAtB;AACvC,SAFD;AAGAgB,uBAAe,CAACjB,OAAhB,CAAyBC,GAAD,IAAS;AAC7B,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,SAA1B,EAAqC,KAAK7H,IAAL,CAAU6H,GAAV,IAAiBpH,KAAK,CAACoH,GAAD,CAAtB;AACxC,SAFD;AAGH,OAVD,CAUE,OAAO/G,CAAP,EAAU;AACR,aAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,KAjBD;AAkBA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;AAClC,YAAMyG,QAAQ,GAAG,CAAC,cAAD,EAAiB,QAAjB,CAAjB;;AACA,UAAIzG,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB;AACd,eAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACH,SAFD,MAEO,IAAI,OAAOiB,IAAP,KAAgB,SAAhB,IAA6B,OAAOA,IAAP,KAAgB,QAAjD,EAA2D;AAC9D,cAAIA,IAAJ,EAAU;AACN,gBAAI,CAAC,KAAKgB,KAAL,CAAWuG,OAAhB,EAAyB;AACrB,mBAAKxI,IAAL,CAAU8I,KAAV;AACA,mBAAKC,QAAL,CAAc;AAAEP,uBAAO,EAAE;AAAX,eAAd;AACH;AACJ,WALD,MAKO;AACH,gBAAI,KAAKvG,KAAL,CAAWuG,OAAf,EAAwB;AACpB,mBAAKxI,IAAL,CAAUgJ,IAAV;AACA,mBAAK9E,SAAL;AACH;AACJ;AACJ,SAZM,MAYA,IAAIjD,IAAI,YAAYgI,WAApB,EAAiC;AACpC,cAAIhI,IAAI,KAAK,KAAKjB,IAAL,CAAUkJ,MAAvB,EAA+B,KAAKhF,SAAL,CAAejD,IAAf;AAClC,SAFM,MAEA,IAAIA,IAAI,YAAYkI,wDAApB,EAAkC;AACrC,cAAIlI,IAAI,CAACmI,WAAL,KAAqB,KAAKpJ,IAAL,CAAUkJ,MAAnC,EAA2C,KAAKhF,SAAL,CAAejD,IAAI,CAACmI,WAApB;AAC9C;AACJ,OApBD,MAoBO,IAAIlI,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA3B,EAA8B;AACjC,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAU2H,QAAQ,CAACzG,KAAK,GAAG,CAAT,CAAlB,CAAd,EAA8C+G,GAA9C;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,OAPM,MAOA,IAAIE,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,SAApB,EAA+B;AAC3B,cAAI;AACA,iBAAKjB,IAAL,CAAUqJ,IAAV,GAAiBpI,IAAjB;AACH,WAFD,CAEE,OAAOH,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,OARM,MAQA,IAAIE,KAAK,GAAG,CAAZ,EAAe;AAClB,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,cAAI;AACA,gBAAIC,KAAK,KAAK,CAAd,EAAiB,KAAKlB,IAAL,CAAUsJ,SAAV,GAAsBrI,IAAtB,CAAjB,KACK,IAAIC,KAAK,KAAK,CAAd,EAAiB,KAAKlB,IAAL,CAAUuJ,OAAV,GAAoBtI,IAApB;AACzB,WAHD,CAGE,OAAOH,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ;AACJ,KA/CD;AAgDA,SAAKX,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,UAAI,KAAK4B,KAAL,CAAWuG,OAAf,EAAwB,KAAKxI,IAAL,CAAUgJ,IAAV;AACxB,WAAKhJ,IAAL,CAAUuE,mBAAV,CAA8B,OAA9B,EAAuC,KAAKoE,WAA5C;AACH,KAHD;AAIH;;AACDzE,WAAS,CAACsF,QAAD,EAAyB;AAC9B,SAAKxH,eAAL;AACA,SAAK+G,QAAL,CAAc;AAAEP,aAAO,EAAE;AAAX,KAAd;AACA,SAAKxI,IAAL,CAAUuE,mBAAV,CAA8B,OAA9B,EAAuC,KAAKoE,WAA5C;AACA,UAAM;AAAEU,UAAF;AAAQC,eAAR;AAAmBC;AAAnB,QAA+B,KAAKvJ,IAA1C;AACA,UAAMkJ,MAAM,GAAGM,QAAQ,IAAI,KAAKxJ,IAAL,CAAUkJ,MAArC;AACA,UAAMT,YAAY,GAAG,KAAKzI,IAAL,CAAUyI,YAAV,CAAuBgB,KAA5C;AACA,UAAMjC,MAAM,GAAG,KAAKxH,IAAL,CAAUwH,MAAV,CAAiBiC,KAAhC;AACA,SAAKzJ,IAAL,GAAY,KAAKC,QAAL,CAAcsI,kBAAd,EAAZ;AACA,SAAKvI,IAAL,CAAUkJ,MAAV,GAAmBA,MAAnB;AACA,SAAKlJ,IAAL,CAAUqJ,IAAV,GAAiBA,IAAjB;AACA,SAAKrJ,IAAL,CAAUsJ,SAAV,GAAsBA,SAAtB;AACA,SAAKtJ,IAAL,CAAUuJ,OAAV,GAAoBA,OAApB;AACA,SAAKvJ,IAAL,CAAUyI,YAAV,CAAuBX,cAAvB,CAAsCW,YAAtC,EAAoD,KAAKxI,QAAL,CAAc8H,WAAlE;AACA,SAAK/H,IAAL,CAAUwH,MAAV,CAAiBM,cAAjB,CAAgCN,MAAhC,EAAwC,KAAKvH,QAAL,CAAc8H,WAAtD;AACA,SAAK/H,IAAL,CAAUoE,gBAAV,CAA2B,OAA3B,EAAoC,KAAKuE,WAAzC;AACA,SAAKlG,qBAAL,CAA2B,CAA3B,IAAgC;AAAEzC,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAhC;AACA,SAAKsC,qBAAL,CAA2B,CAA3B,IAAgC;AAAEzC,UAAI,EAAE,KAAKA,IAAL,CAAUyI;AAAlB,KAAhC;AACA,SAAKhG,qBAAL,CAA2B,CAA3B,IAAgC;AAAEzC,UAAI,EAAE,KAAKA,IAAL,CAAUwH;AAAlB,KAAhC;AACA,SAAK7E,sBAAL,CAA4B,CAA5B,IAAiC;AAAE3C,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAjC;AACA,SAAKyC,YAAL;AACH;;AAvKwH;;gBAAxG0F,S,iBACI,gC;;gBADJA,S,YAEgB,CAAC;AAC9B7G,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,UAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,SAFP;AAGCC,aAAW,EAAE;AAHd,CAZ8B,EAgB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAhB8B,EAoB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CApB8B,C;;gBAFhB2G,S,aA2BkB,CAAC;AAChC5G,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBA3BlB2G,S,WAkCa;AAC1Bd,QAAM,EAAE;AACJ9F,QAAI,EAAE,QADF;AAEJE,WAAO,EAAE,CAFL;AAGJD,eAAW,EAAE;AAHT,GADkB;AAM1B8G,cAAY,EAAE;AACV/G,QAAI,EAAE,QADI;AAEVE,WAAO,EAAE,CAFC;AAGVD,eAAW,EAAE;AAHH,GANY;AAW1B0H,MAAI,EAAE;AACF3H,QAAI,EAAE,SADJ;AAEFE,WAAO,EAAE,KAFP;AAGFD,eAAW,EAAE;AAHX,GAXoB;AAgB1B2H,WAAS,EAAE;AACP5H,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,CAFF;AAGPD,eAAW,EAAE;AAHN,GAhBe;AAqB1B4H,SAAO,EAAE;AACL7H,QAAI,EAAE,QADD;AAELE,WAAO,EAAE,CAFJ;AAGLD,eAAW,EAAE;AAHR;AArBiB,C;;;;;;;;;;;;;;;;;;;;AC/ClC;AACA;AACA;AAIe,MAAM+H,UAAN,SAAyB3J,+CAAzB,CAAoI;AAAA;AAAA;;AAAA,mCA6DvI;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAc0J,wBAAd;AAAR,KA7DuI;;AAAA,mDA8DvH,CAAC;AAAE3J,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAU4J;AAAlB,KAAhC,EAA+D;AAAE5J,UAAI,EAAE,KAAKA,IAAL,CAAU6J;AAAlB,KAA/D,EAAyF;AAAE7J,UAAI,EAAE,KAAKA,IAAL,CAAU8J;AAAlB,KAAzF,EAAoH,IAApH,EAA0H;AAAE9J,UAAI,EAAE,KAAKA,IAAL,CAAU+J;AAAlB,KAA1H,EAAsJ;AAAE/J,UAAI,EAAE,KAAKA,IAAL,CAAUgK;AAAlB,KAAtJ,CA9DuH;;AAAA,oDA+DtH,CAAC;AAAEhK,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CA/DsH;AAAA;;AAgE/IC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,YAAMkH,QAAQ,GAAG,CAAC,WAAD,EAAc,MAAd,EAAsB,OAAtB,EAA+B,QAA/B,EAAyC,SAAzC,CAAjB;AACAA,cAAQ,CAACC,OAAT,CAAkBC,GAAD,IAAS;AACtB,YAAI;AACA,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,EAAeC,cAAf,CAA8BrH,KAAK,CAACoH,GAAD,CAAnC,EAA0C,KAAK5H,QAAL,CAAc8H,WAAxD;AACvC,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,OAND;AAOH,KATD;AAUA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;AAClC,YAAMyG,QAAQ,GAAG,CAAC,WAAD,EAAc,MAAd,EAAsB,OAAtB,EAA+B,QAA/B,EAAyC,SAAzC,CAAjB;;AACA,UAAIzG,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,CAAzB,EAA4B;AAC/B,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAU2H,QAAQ,CAACzG,KAAK,GAAG,CAAT,CAAlB,CAAd,EAA8C+G,GAA9C;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAZD;AAaH;;AA9F8I;;gBAA9H0I,U,iBACI,iC;;gBADJA,U,YAEgB,CAAC;AAC9BjI,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAZ8B,EAgB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAhB8B,EAoB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CApB8B,C;;gBAFhB+H,U,aA2BkB,CAAC;AAChChI,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBA3BlB+H,U,WAkCc;AAC3BE,WAAS,EAAE;AACPlI,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,CAAC,EAFH;AAGPD,eAAW,EAAE;AAHN,GADgB;AAM3BkI,MAAI,EAAE;AACFnI,QAAI,EAAE,QADJ;AAEFE,WAAO,EAAE,EAFP;AAGFD,eAAW,EAAE;AAHX,GANqB;AAW3BmI,OAAK,EAAE;AACHpI,QAAI,EAAE,QADH;AAEHE,WAAO,EAAE,EAFN;AAGHD,eAAW,EAAE;AAHV,GAXoB;AAgB3BoI,QAAM,EAAE;AACJrI,QAAI,EAAE,QADF;AAEJE,WAAO,EAAE,KAFL;AAGJD,eAAW,EAAE;AAHT,GAhBmB;AAqB3BqI,SAAO,EAAE;AACLtI,QAAI,EAAE,QADD;AAELE,WAAO,EAAE,IAFJ;AAGLD,eAAW,EAAE;AAHR;AArBkB,C;;;;;;;;;;;;;;;;;;;;ACxCnC;AACA;AACA;AAGe,MAAMsI,QAAN,SAAuBlK,+CAAvB,CAAgH;AAAA;AAAA;;AAAA,mCAuBnH;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAciK,oBAAd;AAAR,KAvBmH;;AAAA,mDAwBnG,CAAC,IAAD,EAAO;AAAElK,UAAI,EAAE,KAAKA,IAAL,CAAUmK;AAAlB,KAAP,CAxBmG;;AAAA,oDAyBlG,CAAC;AAAEnK,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAzBkG;AAAA;;AA0B3HC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,WAAKR,IAAL,CAAU8I,KAAV;AACH,KALD;AAMA,SAAKzI,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAU;AAC5B,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,YAAI;AACA,eAAK5D,IAAL,CAAUmK,MAAV,CAAiBrC,cAAjB,CAAgClE,IAAI,CAAC,CAAD,CAApC,EAAyC,KAAK3D,QAAL,CAAc8H,WAAvD;AACH,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KARD;AASA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAUmK,MAAxB,EAAgClC,GAAhC;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAXD;AAYH;;AAvD0H;;gBAA1GiJ,Q,iBACI,6B;;gBADJA,Q,YAEgB,CAAC;AAC9BxI,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,MAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhBsI,Q,aAWkB,CAAC;AAChCvI,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAXlBsI,Q,UAkBY,CAAC;AAC1BvI,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;;;;;;;;;;;;;;;;;;ACvBjC;AACA;AAKe,MAAMyI,SAAN,SAAwBrK,+CAAxB,CAA0F;AAAA;AAAA;;AAAA,mCA6B7F;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcoK,eAAd;AAAR,KA7B6F;;AAAA,mDA8B7E,CAAC;AAAErK,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CA9B6E;;AAAA,oDA+B5E,CAAC;AAAEH,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CA/B4E;AAAA;;AAgCrGC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,UAAI;AACA,YAAI,OAAOA,KAAK,CAAC6J,SAAb,KAA2B,SAA/B,EAA0C,KAAKtK,IAAL,CAAUsK,SAAV,GAAsB7J,KAAK,CAAC6J,SAA5B;AAC7C,OAFD,CAEE,OAAOxJ,CAAP,EAAU;AACR,aAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ,KAND;AAOA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAID,IAAI,YAAYgI,WAApB,EAAiC;AAC7B,cAAI;AACA,iBAAKjJ,IAAL,CAAUkJ,MAAV,GAAmBjI,IAAnB;AACH,WAFD,CAEE,OAAOH,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ,SAND,MAMO;AACH,eAAKD,KAAL,CAAW,qBAAX;AACH;AACJ,OAVM,MAUA,IAAIG,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,SAApB,EAA+B;AAC3B,cAAI;AACA,iBAAKjB,IAAL,CAAUsK,SAAV,GAAsBrJ,IAAtB;AACH,WAFD,CAEE,OAAOH,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ;AACJ,KAtBD;AAuBH;;AArEoG;;gBAApFoJ,S,iBACI,wB;;gBADJA,S,YAEgB,CAAC;AAC9B3I,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,SAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,C;;gBAFhByI,S,aAekB,CAAC;AAChC1I,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAflByI,S,WAsBc;AAC3BE,WAAS,EAAE;AACP5I,QAAI,EAAE,SADC;AAEPE,WAAO,EAAE,IAFF;AAGPD,eAAW,EAAE;AAHN;AADgB,C;;;;;;;;;;;;;;;;;;;;AC5BnC;AACA;AACA;AAGe,MAAM4I,KAAN,SAAoBxK,+CAApB,CAA2F;AAAA;AAAA;;AAAA,mCAuB9F;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcuK,WAAd;AAAR,KAvB8F;;AAAA,mDAwB9E,CAAC;AAAExK,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAUyK;AAAlB,KAAhC,CAxB8E;;AAAA,oDAyB7E,CAAC;AAAEzK,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAzB6E;AAAA;;AA0BtGC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAU;AAC5B,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,YAAI;AACA,eAAK5D,IAAL,CAAUyK,SAAV,CAAoB3C,cAApB,CAAmClE,IAAI,CAAC,CAAD,CAAvC,EAA4C,KAAK3D,QAAL,CAAc8H,WAA1D;AACH,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KARD;AASA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAUyK,SAAxB,EAAmCxC,GAAnC;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAXD;AAYH;;AAtDqG;;gBAArFuJ,K,iBACI,oB;;gBADJA,K,YAEgB,CAAC;AAC9B9I,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhB4I,K,aAWkB,CAAC;AAChC7I,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAXlB4I,K,UAkBY,CAAC;AAC1B7I,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;;;;;;;;;;;;;;;;;;ACvBjC;AACA;AAGe,MAAM+I,WAAN,SAA0B3K,+CAA1B,CAAiG;AAAA;AAAA;;AAAA,mCAWpG;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcwF;AAAtB,KAXoG;;AAAA,mDAYpF,CAAC;AAAEzF,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAZoF;AAAA;;AAa5GC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB;AACJ,KAJD;AAKH;;AAzB2G;;gBAA3F0K,W,iBACI,0B;;gBADJA,W,YAEgB,CAAC;AAC9BjJ,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhB+I,W,aAOkB,CAAC;AAChChJ,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,C;;;;;;;;;;;;;;;;;;;;ACXvC;AACA;AACA;AAGe,MAAMgJ,IAAN,SAAmB5K,+CAAnB,CAAwF;AAAA;AAAA;;AAAA,mCAuB3F;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAc2K,UAAd;AAAR,KAvB2F;;AAAA,mDAwB3E,CAAC;AAAE5K,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAU0H;AAAlB,KAAhC,CAxB2E;;AAAA,oDAyB1E,CAAC;AAAE1H,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAzB0E;AAAA;;AA0BnGC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAU;AAC5B,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,YAAI;AACA,eAAK5D,IAAL,CAAU0H,IAAV,CAAeI,cAAf,CAA8BlE,IAAI,CAAC,CAAD,CAAlC,EAAuC,KAAK3D,QAAL,CAAc8H,WAArD;AACH,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KARD;AASA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAU0H,IAAxB,EAA8BO,GAA9B;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAXD;AAYH;;AAtDkG;;gBAAlF2J,I,iBACI,mB;;gBADJA,I,YAEgB,CAAC;AAC9BlJ,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhBgJ,I,aAWkB,CAAC;AAChCjJ,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAXlBgJ,I,UAkBY,CAAC;AAC1BjJ,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;;;;;;;;;;;;;;;;;;;ACvBjC;AACA;AACA;AAIe,MAAMkJ,SAAN,SAAwB9K,+CAAxB,CAAuJ;AAAA;AAAA;;AAAA,mCAiC1J;AAAEC,UAAI,EAAE8B,SAAR;AAAoCgJ,iBAAW,EAAE,EAAjD;AAAiEC,cAAQ,EAAE;AAA3E,KAjC0J;AAAA;;AAkClK3K,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,QAAR,EAAkB,QAAc;AAAA,UAAb;AAAEuD;AAAF,OAAa;AAC5B,UAAIoH,2DAAa,CAACpH,IAAI,CAAC,CAAD,CAAL,CAAjB,EAA4B,KAAK3B,KAAL,CAAW6I,WAAX,GAAyBlH,IAAI,CAAC,CAAD,CAA7B;AAC5B,UAAIoH,2DAAa,CAACpH,IAAI,CAAC,CAAD,CAAL,CAAjB,EAA4B,KAAK3B,KAAL,CAAW8I,QAAX,GAAsBnH,IAAI,CAAC,CAAD,CAA1B;AAC5B,WAAKM,SAAL;AACH,KAJD;AAKA,SAAK7D,EAAL,CAAQ,OAAR,EAAiB,SAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI8J,2DAAa,CAAC/J,IAAD,CAAjB,EAAyB,KAAKgB,KAAL,CAAW6I,WAAX,GAAyB7J,IAAzB;AACzB,aAAKiD,SAAL;AACH,OAHM,MAGA,IAAIhD,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI8J,2DAAa,CAAC/J,IAAD,CAAjB,EAAyB,KAAKgB,KAAL,CAAW8I,QAAX,GAAsB9J,IAAtB;AACzB,aAAKiD,SAAL;AACH;AACJ,KAVD;AAWH;;AACDA,WAAS,GAAG;AACR,SAAKlC,eAAL;AACA,SAAKhC,IAAL,GAAY,KAAKC,QAAL,CAAcgL,eAAd,CAA8B,KAAKhJ,KAAL,CAAW6I,WAAzC,EAAsD,KAAK7I,KAAL,CAAW8I,QAAjE,CAAZ;AACA,SAAK/K,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,SAAKiC,qBAAL,CAA2B,CAA3B,IAAgC;AAAEzC,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAhC;AACA,SAAKwC,sBAAL,CAA4B,CAA5B,IAAiC;AAAE3C,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAjC;AACA,SAAKyC,YAAL;AACH;;AAhEiK;;gBAAjJiI,S,iBACI,wB;;gBADJA,S,YAEgB,CAAC;AAC9BpJ,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,C;;gBAFhBkJ,S,aAekB,CAAC;AAChCnJ,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAflBkJ,S,UAsBY,CAAC;AAC1BnJ,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,KAFgB;AAG1BrD,SAAO,EAAE,EAHiB;AAI1BD,aAAW,EAAE;AAJa,CAAD,EAK1B;AACCD,MAAI,EAAE,QADP;AAECuD,UAAQ,EAAE,KAFX;AAGCrD,SAAO,EAAE,EAHV;AAICD,aAAW,EAAE;AAJd,CAL0B,C;;;;;;;;;;;;;;;;;;;AC5BjC;AACA;AAIe,MAAMuJ,KAAN,SAAoBnL,+CAApB,CAA6I;AAAA;AAAA;;AAAA,mCAchJ;AAAEC,UAAI,EAAE8B,SAAR;AAAkDqJ,aAAO,EAAErJ;AAA3D,KAdgJ;AAAA;;AAexJ1B,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB;AACd,cAAI,KAAKjB,IAAT,EAAe,KAAKoB,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AAClB,SAFD,MAEO,IAAIiB,IAAI,YAAYoE,gBAApB,EAAsC;AACzC,eAAKpD,KAAL,CAAWkJ,OAAX,GAAqBlK,IAArB;AACA,eAAKiD,SAAL;AACA,eAAK9C,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACH;AACJ;AACJ,KAVD;AAWH;;AACDkE,WAAS,GAAG;AACR,SAAKlC,eAAL;AACA,SAAKhC,IAAL,GAAY,KAAKC,QAAL,CAAcmL,wBAAd,CAAuC,KAAKnJ,KAAL,CAAWkJ,OAAlD,CAAZ;AACA,SAAKnL,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,SAAKmC,sBAAL,CAA4B,CAA5B,IAAiC;AAAE3C,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAjC;AACA,SAAKyC,YAAL;AACH;;AAvCuJ;;gBAAvIsI,K,iBACI,sC;;gBADJA,K,YAEgB,CAAC;AAC9BzJ,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhBuJ,K,aAOkB,CAAC;AAChCxJ,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;;;;;;;;;;;;;;;;;;ACZvC;AACA;AAGe,MAAM0J,MAAN,SAAqBtL,+CAArB,CAA0H;AAAA;AAAA;;AAAA,mCAuB7H;AAAEC,UAAI,EAAE;AAAR,KAvB6H;;AAAA,oDAwB5G,CAAC;AAAEA,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAxB4G;AAAA;;AAyBrIC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKE,OAAL,GAAe,CAAf;AACH,KAFD;AAGA,SAAKF,EAAL,CAAQ,QAAR,EAAkB,QAAc;AAAA,UAAb;AAAEuD;AAAF,OAAa;AAC5B,YAAMc,YAAY,GAAG,CAAC,OAAOd,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,IAA+B,CAAC,CAACA,IAAI,CAAC,CAAD,CAAtC,IAA6C,CAA7C,GAAiD,CAAC,CAACA,IAAI,CAAC,CAAD,CAAvD,GAA6D,CAAlF;AACA,WAAKM,SAAL,CAAeQ,YAAf;AACH,KAHD;AAIA,SAAKrE,EAAL,CAAQ,OAAR,EAAiB,SAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,gBAAMyD,YAAY,GAAG,CAAC,CAACzD,IAAF,GAAS,CAAT,GAAa,CAAC,CAACA,IAAf,GAAsB,CAA3C;AACA,cAAI,KAAKjB,IAAL,IAAa0E,YAAY,KAAK,KAAK1E,IAAL,CAAUkC,cAA5C,EAA4D,KAAKgC,SAAL,CAAeQ,YAAf;AAC5D,eAAKtD,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACH,SAJD,MAIO,IAAImB,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AAC5B;AACJ,KARD;AASH;;AACDkE,WAAS,CAACQ,YAAD,EAAuB;AAC5B,SAAK1C,eAAL;AACA,SAAKhC,IAAL,GAAY,KAAKC,QAAL,CAAcqL,mBAAd,CAAkC5G,YAAlC,CAAZ;AACA,SAAK1E,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,UAAM4B,WAAW,GAAGiJ,MAAM,CAAChJ,IAA3B;AACA,UAAMkJ,SAAS,GAAGnJ,WAAW,CAAC9B,MAAZ,CAAmB,CAAnB,CAAlB;AACA,UAAMkL,WAAW,GAAGpJ,WAAW,CAAC9B,MAAZ,CAAmB,CAAnB,CAApB;AACA,SAAKmC,qBAAL,GAA6B,CAAC;AAAEzC,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAA7B;AACA,SAAKwC,sBAAL,GAA8B,CAAC;AAAE3C,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAA9B;AACAiC,eAAW,CAAC9B,MAAZ,GAAqB,CAACiL,SAAD,CAArB;;AACA,SAAK,IAAI7I,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,YAApB,EAAkChC,CAAC,EAAnC,EAAuC;AACnCN,iBAAW,CAAC9B,MAAZ,CAAmBoC,CAAnB,IAAwB8I,WAAxB;AACA,WAAK/I,qBAAL,CAA2BC,CAA3B,IAAgC;AAAE1C,YAAI,EAAE,KAAKA,IAAb;AAAmBG,aAAK,EAAEuC;AAA1B,OAAhC;AACH;;AACD,SAAKL,IAAL,GAAYD,WAAZ;AACA,SAAK9B,MAAL,GAAcoE,YAAd;AACA,SAAK9B,YAAL;AACH;;AA7DoI;;gBAApHyI,M,iBACI,4B;;gBADJA,M,YAEgB,CAAC;AAC9B5J,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhB0J,M,aAWkB,CAAC;AAChC3J,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAXlB0J,M,UAkBY,CAAC;AAC1B3J,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;;;;;;;;;;;;;;;;;;;ACtBjC;AACA;AACA;AAGe,MAAM8J,UAAN,SAAyB1L,+CAAzB,CAAoK;AAAA;AAAA;;AAAA,mCA+CvK;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcyL,gBAAd;AAAR,KA/CuK;;AAAA,mDAgDvJ,CAAC,IAAD,EAAO;AAAE1L,UAAI,EAAE,KAAKA,IAAL,CAAUuH;AAAlB,KAAP,EAAsC;AAAEvH,UAAI,EAAE,KAAKA,IAAL,CAAUwH;AAAlB,KAAtC,CAhDuJ;;AAAA,oDAiDtJ,CAAC;AAAExH,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAjDsJ;AAAA;;AAkD/KC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,WAAKR,IAAL,CAAU8I,KAAV;AACH,KALD;AAMA,SAAKzI,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,UAAI,OAAOA,KAAK,CAAC+G,MAAb,KAAwB,QAA5B,EAAsC;AAClC,YAAI;AACA,eAAKxH,IAAL,CAAUwH,MAAV,CAAiBM,cAAjB,CAAgCrH,KAAK,CAAC+G,MAAtC,EAA8C,KAAKvH,QAAL,CAAc8H,WAA5D;AACH,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KARD;AASA,SAAKX,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAU;AAC5B,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,YAAI;AACA,eAAK5D,IAAL,CAAUuH,SAAV,CAAoBO,cAApB,CAAmClE,IAAI,CAAC,CAAD,CAAvC,EAA4C,KAAK3D,QAAL,CAAc8H,WAA1D;AACH,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;;AACD,UAAI,OAAO4C,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,YAAI;AACA,eAAK5D,IAAL,CAAU0B,IAAV,GAAiBkC,IAAI,CAAC,CAAD,CAArB;AACH,SAFD,CAEE,OAAO9C,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KAfD;AAgBA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO;AACH,YAAI;AACA,cAAIkB,KAAK,KAAK,CAAd,EAAiB;AACb,kBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,iBAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAUuH,SAAxB,EAAmCU,GAAnC;AACH,WAHD,MAGO,IAAI/G,KAAK,KAAK,CAAd,EAAiB;AACpB,kBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,iBAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAUwH,MAAxB,EAAgCS,GAAhC;AACH,WAHM,MAGA,IAAI/G,KAAK,KAAK,CAAd,EAAiB;AACpB,iBAAKlB,IAAL,CAAU0B,IAAV,GAAiBT,IAAjB;AACH;AACJ,SAVD,CAUE,OAAOH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KAlBD;AAmBH;;AAtG8K;;gBAA9JyK,U,iBACI,yB;;gBADJA,U,YAEgB,CAAC;AAC9BhK,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,MAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,MAFP;AAGC2B,OAAK,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,UAA/B,EAA2C,QAA3C,CAHR;AAIC1B,aAAW,EAAE;AAJd,CAZ8B,C;;gBAFhB8J,U,aAoBkB,CAAC;AAChC/J,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBApBlB8J,U,UA2BY,CAAC;AAC1B/J,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BrD,SAAO,EAAE,GAHiB;AAI1BD,aAAW,EAAE;AAJa,CAAD,EAK1B;AACCD,MAAI,EAAE,MADP;AAEC2B,OAAK,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,EAA+B,UAA/B,EAA2C,QAA3C,CAFR;AAGC4B,UAAQ,EAAE,IAHX;AAICrD,SAAO,EAAE,MAJV;AAKCD,aAAW,EAAE;AALd,CAL0B,C;;gBA3BZ8J,U,WAuCc;AAC3BjE,QAAM,EAAE;AACJ9F,QAAI,EAAE,QADF;AAEJE,WAAO,EAAE,CAFL;AAGJD,eAAW,EAAE;AAHT;AADmB,C;;gBAvCd8J,U,sBA8CUrD,CAAD,IAAiCA,CAAC,KAAK,MAAN,IAAgBA,CAAC,KAAK,QAAtB,IAAkCA,CAAC,KAAK,UAAxC,IAAsDA,CAAC,KAAK,UAA5D,IAA0EA,CAAC,KAAK,Q;;;;;;;;;;;;;;;;;;;;ACnD/I;AACA;AACA;AAIe,MAAMuD,MAAN,SAAqB5L,+CAArB,CAA4F;AAAA;AAAA;;AAAA,mCAoH/F;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAc2L,YAAd;AAAR,KApH+F;;AAAA,mDAqH/E,CAAC;AAAE5L,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAU6L;AAAlB,KAAhC,EAAkE;AAAE7L,UAAI,EAAE,KAAKA,IAAL,CAAU8L;AAAlB,KAAlE,EAAoG;AAAE9L,UAAI,EAAE,KAAKA,IAAL,CAAU+L;AAAlB,KAApG,EAAsI,IAAtI,EAA4I;AAAE/L,UAAI,EAAE,KAAKA,IAAL,CAAUgM;AAAlB,KAA5I,EAA2K;AAAEhM,UAAI,EAAE,KAAKA,IAAL,CAAUiM;AAAlB,KAA3K,EAA0M;AAAEjM,UAAI,EAAE,KAAKA,IAAL,CAAUkM;AAAlB,KAA1M,CArH+E;;AAAA,oDAsH9E,CAAC;AAAElM,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAtH8E;AAAA;;AAuHvGC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,YAAMkH,QAAQ,GAAG,CAAC,cAAD,EAAiB,cAAjB,EAAiC,cAAjC,EAAiD,WAAjD,EAA8D,WAA9D,EAA2E,WAA3E,CAAjB;AACA,YAAMiB,cAAc,GAAG,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,eAArC,EAAsD,aAAtD,EAAqE,aAArE,EAAoF,eAApF,CAAvB;;AACA,UAAI;AACAjB,gBAAQ,CAACC,OAAT,CAAkBC,GAAD,IAAS;AACtB,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,EAAeC,cAAf,CAA8BrH,KAAK,CAACoH,GAAD,CAAnC,EAA0C,KAAK5H,QAAL,CAAc8H,WAAxD;AACvC,SAFD;AAGAa,sBAAc,CAAChB,OAAf,CAAwBC,GAAD,IAAS;AAC5B,cAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,IAAiBpH,KAAK,CAACoH,GAAD,CAAtB;AACvC,SAFD;AAGA,YAAI,OAAOpH,KAAK,CAAC0L,aAAb,KAA+B,QAAnC,EAA6C,KAAKnM,IAAL,CAAUmM,aAAV,GAA0B1L,KAAK,CAAC0L,aAAhC;AAC7C,YAAI,OAAO1L,KAAK,CAAC2L,YAAb,KAA8B,QAAlC,EAA4C,KAAKpM,IAAL,CAAUoM,YAAV,GAAyB3L,KAAK,CAAC2L,YAA/B;AAC/C,OATD,CASE,OAAOtL,CAAP,EAAU;AACR,aAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,KAfD;AAgBA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;AAClC,YAAMyG,QAAQ,GAAG,CAAC,cAAD,EAAiB,cAAjB,EAAiC,cAAjC,EAAiD,WAAjD,EAA8D,WAA9D,EAA2E,WAA3E,CAAjB;AACA,YAAMiB,cAAc,GAAG,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,eAArC,EAAsD,aAAtD,EAAqE,aAArE,EAAoF,eAApF,CAAvB;;AACA,UAAI1H,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,CAAzB,EAA4B;AAC/B,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAU2H,QAAQ,CAACzG,KAAK,GAAG,CAAT,CAAlB,CAAd,EAA8C+G,GAA9C;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,OAPM,MAOA,IAAIE,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,gBAAMR,KAAK,GAAGQ,IAAd;;AACA,cAAI;AACA0G,oBAAQ,CAACC,OAAT,CAAkBC,GAAD,IAAS;AACtB,kBAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,EAAeC,cAAf,CAA8BrH,KAAK,CAACoH,GAAD,CAAnC,EAA0C,KAAK5H,QAAL,CAAc8H,WAAxD;AACvC,aAFD;AAGAa,0BAAc,CAAChB,OAAf,CAAwBC,GAAD,IAAS;AAC5B,kBAAI,OAAOpH,KAAK,CAACoH,GAAD,CAAZ,KAAsB,QAA1B,EAAoC,KAAK7H,IAAL,CAAU6H,GAAV,IAAiBpH,KAAK,CAACoH,GAAD,CAAtB;AACvC,aAFD;AAGA,gBAAI,OAAOpH,KAAK,CAAC0L,aAAb,KAA+B,QAAnC,EAA6C,KAAKnM,IAAL,CAAUmM,aAAV,GAA0B1L,KAAK,CAAC0L,aAAhC;AAC7C,gBAAI,OAAO1L,KAAK,CAAC2L,YAAb,KAA8B,QAAlC,EAA4C,KAAKpM,IAAL,CAAUoM,YAAV,GAAyB3L,KAAK,CAAC2L,YAA/B;AAC/C,WATD,CASE,OAAOtL,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ;AACJ,KA7BD;AA8BH;;AA5KsG;;gBAAtF2K,M,iBACI,qB;;gBADJA,M,YAEgB,CAAC;AAC9BlK,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAZ8B,EAgB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAhB8B,EAoB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CApB8B,EAwB9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAxB8B,EA4B9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CA5B8B,C;;gBAFhBgK,M,aAmCkB,CAAC;AAChCjK,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAnClBgK,M,WA0CyB;AACtCU,gBAAc,EAAE;AACZ3K,QAAI,EAAE,QADM;AAEZE,WAAO,EAAE,GAFG;AAGZD,eAAW,EAAE;AAHD,GADsB;AAMtC2K,gBAAc,EAAE;AACZ5K,QAAI,EAAE,QADM;AAEZE,WAAO,EAAE,CAFG;AAGZD,eAAW,EAAE;AAHD,GANsB;AAWtC4K,eAAa,EAAE;AACX7K,QAAI,EAAE,QADK;AAEXE,WAAO,EAAE,CAFE;AAGXD,eAAW,EAAE;AAHF,GAXuB;AAgBtCwK,eAAa,EAAE;AACXzK,QAAI,EAAE,MADK;AAEX2B,SAAK,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,aAAtB,CAFI;AAGXzB,WAAO,EAAE,SAHE;AAIXD,eAAW,EAAE;AAJF,GAhBuB;AAsBtC6K,aAAW,EAAE;AACT9K,QAAI,EAAE,QADG;AAETE,WAAO,EAAE,KAFA;AAGTD,eAAW,EAAE;AAHJ,GAtByB;AA2BtCkK,cAAY,EAAE;AACVnK,QAAI,EAAE,QADI;AAEVE,WAAO,EAAE,CAFC;AAGVD,eAAW,EAAE;AAHH,GA3BwB;AAgCtCmK,cAAY,EAAE;AACVpK,QAAI,EAAE,QADI;AAEVE,WAAO,EAAE,CAFC;AAGVD,eAAW,EAAE;AAHH,GAhCwB;AAqCtCoK,cAAY,EAAE;AACVrK,QAAI,EAAE,QADI;AAEVE,WAAO,EAAE,CAFC;AAGVD,eAAW,EAAE;AAHH,GArCwB;AA0CtCyK,cAAY,EAAE;AACV1K,QAAI,EAAE,MADI;AAEV2B,SAAK,EAAE,CAAC,YAAD,EAAe,MAAf,CAFG;AAGVzB,WAAO,EAAE,YAHC;AAIVD,eAAW,EAAE;AAJH,GA1CwB;AAgDtCqK,WAAS,EAAE;AACPtK,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,CAFF;AAGPD,eAAW,EAAE;AAHN,GAhD2B;AAqDtCsK,WAAS,EAAE;AACPvK,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,CAFF;AAGPD,eAAW,EAAE;AAHN,GArD2B;AA0DtCuK,WAAS,EAAE;AACPxK,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,CAFF;AAGPD,eAAW,EAAE;AAHN,GA1D2B;AA+DtC8K,aAAW,EAAE;AACT/K,QAAI,EAAE,QADG;AAETE,WAAO,EAAE,CAFA;AAGTD,eAAW,EAAE;AAHJ,GA/DyB;AAoEtC+K,eAAa,EAAE;AACXhL,QAAI,EAAE,QADK;AAEXE,WAAO,EAAE,CAFE;AAGXD,eAAW,EAAE;AAHF;AApEuB,C;;;;;;;;;;;;;;;;;;;;;AChD9C;AACA;AACA;AACA;AAwBe,MAAMgL,MAAN,SAAqB5M,+CAArB,CAA0E;AAAA;AAAA;;AAAA,mCAuD1E;AACPC,UAAI,EAAE8B,SADC;AAEPkC,WAAK,EAAElC,SAFA;AAGP8K,eAAS,EAAE,KAAK3M,QAAL,CAAciK,oBAAd,EAHJ;AAIP;AACA2C,eAAS,EAAE,KALJ;AAMPC,OAAC,EAAE,CANI;AAOPC,YAAM,EAAE,CAPD;AAQPC,UAAI,EAAE,CARC;AASPC,aAAO,EAAE;AATF,KAvD0E;;AAAA,iDAkE/D,OAAOzD,QAAP,EAAiC0D,MAAjC,KAAoD;AACtE,UAAI,CAAC,KAAKjL,KAAL,CAAW4K,SAAhB,EAA2B;AAC3B,YAAM;AAAEC,SAAF;AAAK9I;AAAL,UAAe,KAAK/B,KAA1B;AACA,YAAM;AAAEkL,cAAF;AAAUC,wBAAV;AAA4BtI;AAA5B,UAA2Cd,KAAjD;AACA,YAAMqJ,IAAI,GAAG,KAAK5I,OAAL,CAAa,MAAb,CAAb;AACA,YAAM6I,aAAa,GAAG,KAAK7I,OAAL,CAAa,eAAb,CAAtB;AACA,YAAM4E,IAAI,GAAG,KAAK5E,OAAL,CAAa,MAAb,CAAb;AACA,YAAM8I,MAAM,GAAG,KAAK9I,OAAL,CAAa,QAAb,CAAf;AACA,YAAMsI,MAAM,GAAG1D,IAAI,GAAG,KAAK5E,OAAL,CAAa,WAAb,CAAH,GAA+B,CAAlD;AACA,UAAIsI,MAAM,IAAII,MAAd,EAAsB;AACtB,YAAMH,IAAI,GAAG3D,IAAI,GAAGmE,IAAI,CAACC,GAAL,CAASV,MAAT,EAAiB,KAAKtI,OAAL,CAAa,SAAb,CAAjB,CAAH,GAA+C0I,MAAhE;AACA,UAAIH,IAAI,KAAKD,MAAb,EAAqB;AACrB,YAAMW,KAAK,GAAGV,IAAI,GAAGD,MAArB;AACA,YAAMY,UAAU,GAAGnE,QAAQ,CAAC,CAAD,CAAR,CAAY2D,MAA/B;AACA,UAAIE,IAAJ,EAAU7D,QAAQ,CAACoE,MAAT,CAAgB,CAAhB;AACV,UAAIN,aAAJ,EAAmB9D,QAAQ,CAACqE,OAAT,CAAiB,GAAG,IAAIC,KAAJ,CAAUR,aAAV,CAApB;AACnB,YAAMS,OAAO,GAAGjB,CAAC,GAAGa,UAApB;;AACA,UAAIJ,MAAM,IAAI,CAAClE,IAAX,IAAmB0E,OAAO,GAAGf,IAAjC,EAAuC;AAAE;AACrC,cAAMgB,SAAS,GAAG,KAAKR,IAAI,CAACS,IAAL,CAAUT,IAAI,CAACU,GAAL,CAASf,MAAM,GAAGrI,UAAlB,IAAgC0I,IAAI,CAACU,GAAL,CAAS,CAAT,CAA1C,CAAvB;AACA,cAAMC,SAAS,GAAG,IAAIC,+DAAJ,CAAwB;AAAEhB,0BAAF;AAAoBD,gBAAM,EAAEa,SAA5B;AAAuClJ;AAAvC,SAAxB,CAAlB;;AACA,aAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0K,gBAApB,EAAsC1K,CAAC,EAAvC,EAA2C;AACvC,gBAAM2L,OAAO,GAAGF,SAAS,CAACG,cAAV,CAAyB5L,CAAzB,CAAhB;AACA2L,iBAAO,CAACE,GAAR,CAAYvK,KAAK,CAACoF,WAAN,CAAkBkF,cAAlB,CAAiC5L,CAAjC,CAAZ;AACA,cAAI8G,QAAQ,CAAC9G,CAAD,CAAZ,EAAiB2L,OAAO,CAACE,GAAR,CAAY/E,QAAQ,CAAC9G,CAAD,CAApB,EAAyBoK,CAAzB;AACpB;;AACD9I,aAAK,CAACoF,WAAN,GAAoB+E,SAApB;AACAnK,aAAK,CAACwK,QAAN,CAAeC,MAAf,CAAsB3B,CAAtB,EAAyBkB,SAAzB;AACA,aAAKjF,QAAL,CAAc;AAAE+D,WAAC,EAAEiB;AAAL,SAAd;AACH,OAXD,MAWO;AACH,aAAK,IAAIrL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0K,gBAApB,EAAsC1K,CAAC,EAAvC,EAA2C;AACvC,gBAAM2L,OAAO,GAAGrK,KAAK,CAACoF,WAAN,CAAkBkF,cAAlB,CAAiC5L,CAAjC,CAAhB;;AACA,cAAI8G,QAAQ,CAAC9G,CAAD,CAAZ,EAAiB;AACb,gBAAIqL,OAAO,GAAGf,IAAd,EAAoB;AAChB,kBAAI3D,IAAJ,EAAU;AACN,sBAAMqF,QAAQ,GAAG3B,MAAM,GAAI,CAACD,CAAC,GAAGC,MAAJ,GAAaY,UAAd,IAA4BD,KAAvD;AACA,sBAAMxE,MAAM,GAAGyE,UAAU,GAAGD,KAAb,GAAqBlE,QAAQ,CAAC9G,CAAD,CAAR,CAAYiM,QAAZ,CAAqBhB,UAAU,GAAGD,KAAlC,CAArB,GAAgElE,QAAQ,CAAC9G,CAAD,CAAvF;AACA,sBAAMkM,OAAO,GAAG1F,MAAM,CAACiE,MAAP,IAAiBuB,QAAQ,GAAG3B,MAA5B,CAAhB;AACAsB,uBAAO,CAACE,GAAR,CAAYrF,MAAM,CAACyF,QAAP,CAAgBC,OAAhB,CAAZ,EAAsC7B,MAAtC;AACAsB,uBAAO,CAACE,GAAR,CAAYrF,MAAM,CAACyF,QAAP,CAAgB,CAAhB,EAAmBC,OAAnB,CAAZ,EAAyC9B,CAAzC;AACA,qBAAK/D,QAAL,CAAc;AAAE+D,mBAAC,EAAE4B;AAAL,iBAAd;AACA1K,qBAAK,CAACwK,QAAN,CAAeC,MAAf,CAAsB3B,CAAtB,EAAyBE,IAAzB;AACAhJ,qBAAK,CAACwK,QAAN,CAAeC,MAAf,CAAsB1B,MAAtB,EAA8B2B,QAA9B;AACH,eATD,MASO;AACHL,uBAAO,CAACE,GAAR,CAAY/E,QAAQ,CAAC9G,CAAD,CAAR,CAAYiM,QAAZ,CAAqB,CAArB,EAAwB3B,IAAI,GAAGF,CAA/B,CAAZ,EAA+CA,CAA/C;AACA,qBAAK/D,QAAL,CAAc;AAAE+D,mBAAC,EAAEE;AAAL,iBAAd;AACAhJ,qBAAK,CAACwK,QAAN,CAAeC,MAAf,CAAsB3B,CAAtB,EAAyBE,IAAzB;AACH;AACJ,aAfD,MAeO;AACHqB,qBAAO,CAACE,GAAR,CAAY/E,QAAQ,CAAC9G,CAAD,CAApB,EAAyBoK,CAAzB;AACA,mBAAK/D,QAAL,CAAc;AAAE+D,iBAAC,EAAEiB;AAAL,eAAd;AACA/J,mBAAK,CAACwK,QAAN,CAAeC,MAAf,CAAsB3B,CAAtB,EAAyBiB,OAAzB;AACH;AACJ;AACJ;AACJ;;AACD/J,WAAK,CAAC6K,IAAN,CAAW,UAAX;AACA7K,WAAK,CAAC6K,IAAN,CAAW,SAAX;AACA,WAAKzN,MAAL,CAAY,CAAZ,EAAe,KAAKa,KAAL,CAAW6K,CAA1B;;AACA,UAAI,CAACS,MAAD,IAAW,CAAClE,IAAZ,IAAoB,KAAKpH,KAAL,CAAW6K,CAAX,KAAiBE,IAAzC,EAA+C;AAC3C,cAAM,KAAKhE,IAAL,EAAN;AACH;AACJ,KA/HoF;AAAA;;AAgI1E,QAALF,KAAK,GAAG;AACV,QAAI,CAAC,KAAK9I,IAAV,EAAgB,OAAO,KAAP;AAChB,SAAK+I,QAAL,CAAc;AAAE+D,OAAC,EAAE,KAAKrI,OAAL,CAAa,MAAb,IAAuB,KAAKA,OAAL,CAAa,WAAb,CAAvB,GAAmD;AAAxD,KAAd;AACA,SAAKsE,QAAL,CAAc;AAAE8D,eAAS,EAAE;AAAb,KAAd;AACA,UAAM,KAAK7M,IAAL,CAAU8O,KAAV,EAAN;AACA,UAAM,KAAK9O,IAAL,CAAU8I,KAAV,EAAN;AACA,WAAO,IAAP;AACH;;AACS,QAAJE,IAAI,GAAG;AACT,SAAKD,QAAL,CAAc;AAAE8D,eAAS,EAAE;AAAb,KAAd;AACA,QAAI,CAAC,KAAK7M,IAAV,EAAgB;AAChB,UAAM,KAAKA,IAAL,CAAUgJ,IAAV,EAAN;AACA,UAAM;AAAEiE,aAAF;AAAWH,OAAX;AAAcE;AAAd,QAAuB,KAAK/K,KAAlC;;AACA,QAAI,CAACgL,OAAD,IAAYH,CAAC,GAAGE,IAAhB,IAAwBF,CAAC,GAAG,KAAK7K,KAAL,CAAW+B,KAAX,CAAiBmJ,MAAjD,EAAyD;AACrD,YAAM,CAACnJ,KAAD,IAAU,MAAM,KAAK/B,KAAL,CAAW+B,KAAX,CAAiB+K,KAAjB,CAAuBjC,CAAvB,CAAtB;AACA,WAAK7K,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0BhL,KAA1B;AACH;AACJ;;AACD5D,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,UAAR,EAAoB,YAAY;AAC5B,YAAM4O,mEAAA,CAAyB,KAAKhP,QAAL,CAAciP,YAAvC,CAAN;AACA,YAAMlP,IAAI,GAAG,IAAIiP,0DAAJ,CAAoB,KAAKhP,QAAzB,CAAb;AACAD,UAAI,CAACmP,mBAAL,GAA2B,KAAKA,mBAAhC;AACA,WAAKnP,IAAL,GAAYA,IAAZ;AACA,WAAKiC,KAAL,CAAW2K,SAAX,CAAqBzC,MAArB,CAA4BV,KAA5B,GAAoC,CAApC;AACA,WAAKxH,KAAL,CAAW2K,SAAX,CAAqBwC,OAArB,CAA6B,KAAKpP,IAAlC;AACA,WAAKiC,KAAL,CAAW2K,SAAX,CAAqB9D,KAArB;AACA,WAAKuG,oBAAL;AACA,WAAK5M,qBAAL,GAA6B,CAAC;AAAEzC,YAAI,EAAE,KAAKA,IAAb;AAAmBG,aAAK,EAAE;AAA1B,OAAD,CAA7B;AACA,WAAK4I,QAAL,CAAc;AAAE/I;AAAF,OAAd;AACA,WAAKsP,iBAAL;AACH,KAZD;AAaA,SAAKjP,EAAL,CAAQ,OAAR,EAAiB,cAA2B;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AACxC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,OAAOD,IAAP,KAAgB,SAAhB,IAA6B,OAAOA,IAAP,KAAgB,QAAjD,EAA2D;AACvD,cAAIA,IAAJ,EAAU;AACN,gBAAI,CAAC,KAAKgB,KAAL,CAAW4K,SAAhB,EAA2B;AACvB,oBAAM,KAAK/D,KAAL,EAAN;AACH;AACJ,WAJD,MAIO;AACH,gBAAI,KAAK7G,KAAL,CAAW4K,SAAf,EAA0B;AACtB,oBAAM,KAAK7D,IAAL,EAAN;AACH;AACJ;AACJ,SAVD,MAUO,IAAI/H,IAAI,YAAYkI,wDAApB,EAAkC;AACrC,eAAKJ,QAAL,CAAc;AAAE/E,iBAAK,EAAE/C;AAAT,WAAd;AACH;AACJ,OAdD,MAcO,IAAIC,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,SAAhB,IAA6B,OAAOA,IAAP,KAAgB,QAAjD,EAA2D;AACvD,eAAKsO,SAAL,CAAe;AAAE9O,iBAAK,EAAE;AAAE4I,kBAAI,EAAE,CAAC,CAACpI;AAAV;AAAT,WAAf;AACH;AACJ,OAJM,MAIA,IAAIC,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,eAAKsO,SAAL,CAAe;AAAE9O,iBAAK,EAAE;AAAE6I,uBAAS,EAAErI;AAAb;AAAT,WAAf;AACH;AACJ,OAJM,MAIA,IAAIC,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,eAAKsO,SAAL,CAAe;AAAE9O,iBAAK,EAAE;AAAE8I,qBAAO,EAAEtI;AAAX;AAAT,WAAf;AACH;AACJ;AACJ,KA5BD;AA6BA,SAAKZ,EAAL,CAAQ,SAAR,EAAmB,YAAY;AAC3B,WAAK4B,KAAL,CAAW2K,SAAX,CAAqB4C,UAArB;AACA,UAAI,KAAKvN,KAAL,CAAW4K,SAAf,EAA0B,MAAM,KAAK7D,IAAL,EAAN;AAC1B,YAAM,KAAKhJ,IAAL,CAAUyP,OAAV,EAAN;AACH,KAJD;AAKH;;AAvMoF;;gBAApE9C,M,iBACI,mC;;gBADJA,M,YAEgB,CAAC;AAC9BlL,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,SAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,EAY9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAZ8B,C;;gBAFhBgL,M,aAmBkB,CAAC;AAChCjL,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,C;;gBAnBlBgL,M,WAuBa;AAC1BU,MAAI,EAAE;AACF3L,QAAI,EAAE,SADJ;AAEFE,WAAO,EAAE,KAFP;AAGFD,eAAW,EAAE;AAHX,GADoB;AAM1B2L,eAAa,EAAE;AACX5L,QAAI,EAAE,QADK;AAEXE,WAAO,EAAE,CAFE;AAGXD,eAAW,EAAE;AAHF,GANW;AAW1B0H,MAAI,EAAE;AACF3H,QAAI,EAAE,SADJ;AAEFE,WAAO,EAAE,KAFP;AAGFD,eAAW,EAAE;AAHX,GAXoB;AAgB1B2H,WAAS,EAAE;AACP5H,QAAI,EAAE,QADC;AAEPE,WAAO,EAAE,CAFF;AAGPD,eAAW,EAAE;AAHN,GAhBe;AAqB1B4H,SAAO,EAAE;AACL7H,QAAI,EAAE,QADD;AAELE,WAAO,EAAE,CAFJ;AAGLD,eAAW,EAAE;AAHR,GArBiB;AA0B1B4L,QAAM,EAAE;AACJ7L,QAAI,EAAE,SADF;AAEJE,WAAO,EAAE,KAFL;AAGJD,eAAW,EAAE;AAHT;AA1BkB,C;;;;;;;;;;;;;;;;;;;AClDlC;AACA;AAGe,MAAM+N,QAAN,SAAuB3P,+CAAvB,CAA+G;AAAA;AAAA;;AAAA,mCAmBlH;AAAEC,UAAI,EAAE;AAAR,KAnBkH;;AAAA,mDAoBlG,CAAC;AAAEA,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CApBkG;AAAA;;AAqB1HC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACH,KAFD;AAGA,SAAKD,EAAL,CAAQ,QAAR,EAAkB,QAAc;AAAA,UAAb;AAAEuD;AAAF,OAAa;AAC5B,YAAMc,YAAY,GAAG,CAACd,IAAI,IAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAA3B,IAAuC,CAAC,CAACA,IAAI,CAAC,CAAD,CAA9C,IAAqD,CAArD,GAAyD,CAAC,CAACA,IAAI,CAAC,CAAD,CAA/D,GAAqE,CAA1F;AACA,WAAKM,SAAL,CAAeQ,YAAf;AACH,KAHD;AAIA,SAAKrE,EAAL,CAAQ,OAAR,EAAiB,SAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,gBAAMyD,YAAY,GAAG,CAAC,CAACzD,IAAF,GAAS,CAAT,GAAa,CAAC,CAACA,IAAf,GAAsB,CAA3C;AACA,cAAI,KAAKjB,IAAL,IAAa0E,YAAY,KAAK,KAAK1E,IAAL,CAAUmC,eAA5C,EAA6D,KAAK+B,SAAL,CAAeQ,YAAf;AAC7D,eAAKtD,MAAL,CAAY,KAAKb,OAAL,GAAe,CAA3B,EAA8B,KAAKP,IAAnC;AACH,SAJD,MAIO,IAAImB,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,KAAKb,OAAL,GAAe,CAA3B,EAA8B,KAAKP,IAAnC;AAC5B;AACJ,KARD;AASH;;AACDkE,WAAS,CAACQ,YAAD,EAAuB;AAC5B,SAAK1C,eAAL;AACA,SAAKhC,IAAL,GAAY,KAAKC,QAAL,CAAc0P,qBAAd,CAAoCjL,YAApC,CAAZ;AACA,SAAK1E,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,UAAM4B,WAAW,GAAGsN,QAAQ,CAACrN,IAA7B;AACA,UAAMuN,YAAY,GAAGxN,WAAW,CAAC7B,OAAZ,CAAoB,CAApB,CAArB;AACA,UAAMsP,UAAU,GAAGzN,WAAW,CAAC7B,OAAZ,CAAoB,CAApB,CAAnB;AACA,SAAKkC,qBAAL,GAA6B,CAAC;AAAEzC,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAA7B;AACA,SAAKwC,sBAAL,GAA8B,EAA9B;;AACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,YAApB,EAAkChC,CAAC,EAAnC,EAAuC;AACnCN,iBAAW,CAAC7B,OAAZ,CAAoBmC,CAApB,IAAyBkN,YAAzB;AACA,WAAKjN,sBAAL,CAA4BD,CAA5B,IAAiC;AAAE1C,YAAI,EAAE,KAAKA,IAAb;AAAmBG,aAAK,EAAEuC;AAA1B,OAAjC;AACH;;AACDN,eAAW,CAAC7B,OAAZ,CAAoBmE,YAApB,IAAoCmL,UAApC;AACA,SAAKxN,IAAL,GAAYD,WAAZ;AACA,SAAK7B,OAAL,GAAemE,YAAY,GAAG,CAA9B;AACA,SAAK9B,YAAL;AACH;;AAzDyH;;gBAAzG8M,Q,iBACI,8B;;gBADJA,Q,YAEgB,CAAC;AAC9BjO,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhB+N,Q,aAOkB,CAAC;AAChChO,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAPlB+N,Q,UAcY,CAAC;AAC1BhO,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;;;;;;;;;;;;;;;;;;;AClBjC;AACA;AACA;AAGe,MAAMmO,YAAN,SAA2B/P,+CAA3B,CAAgH;AAAA;AAAA;;AAAA,mCAuBnH;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAc8P,kBAAd;AAAR,KAvBmH;;AAAA,mDAwBnG,CAAC;AAAE/P,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,EAAgC;AAAEH,UAAI,EAAE,KAAKA,IAAL,CAAUgQ;AAAlB,KAAhC,CAxBmG;;AAAA,oDAyBlG,CAAC;AAAEhQ,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAzBkG;AAAA;;AA0B3HC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAU;AAC5B,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,YAAI;AACA,eAAK5D,IAAL,CAAUgQ,GAAV,CAAclI,cAAd,CAA6BlE,IAAI,CAAC,CAAD,CAAjC,EAAsC,KAAK3D,QAAL,CAAc8H,WAApD;AACH,SAFD,CAEE,OAAOjH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ,KARD;AASA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI;AACA,gBAAM+G,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,eAAKkH,QAAL,CAAc,KAAKnI,IAAL,CAAUgQ,GAAxB,EAA6B/H,GAA7B;AACH,SAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAXD;AAYH;;AAtD0H;;gBAA1G8O,Y,iBACI,2B;;gBADJA,Y,YAEgB,CAAC;AAC9BrO,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhBmO,Y,aAWkB,CAAC;AAChCpO,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAXlBmO,Y,UAkBY,CAAC;AAC1BpO,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;;;;;;;;;;;;;;;;;;ACvBjC;AACA;AAGe,MAAMsO,UAAN,SAAyBlQ,+CAAzB,CAAmI;AAAA;AAAA;;AAAA,mCActI;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAc0F,4BAAd;AAAR,KAdsI;;AAAA,mDAetH,CAAC;AAAE3F,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAfsH;AAAA;;AAgB9IC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKiP,SAAL,CAAe,CAAC,KAAKlQ,IAAN,EAAY,KAAKA,IAAL,CAAU+C,MAAtB,CAAf;AACrB;AACJ,KAJD;AAKH;;AA5B6I;;gBAA7HkN,U,iBACI,0C;;gBADJA,U,YAEgB,CAAC;AAC9BxO,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhBsO,U,aAOkB,CAAC;AAChCvO,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;;;;;;;;;;;;;;;;;;ACXvC;AACA;AAIe,MAAMwO,SAAN,SAAwBpQ,+CAAxB,CAAyI;AAAA;AAAA;;AAAA,mCAc5I;AAAEC,UAAI,EAAE8B,SAAR;AAAiDiB,YAAM,EAAEjB;AAAzD,KAd4I;AAAA;;AAepJ1B,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,CAACC,6CAAM,CAACF,IAAD,CAAX,EAAmB;AACf,eAAKgB,KAAL,CAAWc,MAAX,GAAoB9B,IAApB;AACA,eAAKiD,SAAL;AACH;;AACD,YAAI,KAAKlE,IAAT,EAAe,KAAKoB,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AAClB;AACJ,KARD;AASH;;AACDkE,WAAS,GAAG;AACR,SAAKlC,eAAL;AACA,SAAKhC,IAAL,GAAY,KAAKC,QAAL,CAAc+E,uBAAd,CAAsC,KAAK/C,KAAL,CAAWc,MAAjD,CAAZ;AACA,SAAK/C,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACA,SAAKmC,sBAAL,CAA4B,CAA5B,IAAiC;AAAE3C,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAjC;AACA,SAAKyC,YAAL;AACH;;AArCmJ;;gBAAnIuN,S,iBACI,qC;;gBADJA,S,YAEgB,CAAC;AAC9B1O,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhBwO,S,aAOkB,CAAC;AAChCzO,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;;;;;;;;;;;;;;;;;;ACZvC;AACA;AAIe,MAAMyO,UAAN,SAAyBrQ,+CAAzB,CAA0H;AAAA;AAAA;;AAAA,mCA+B7H;AAAEC,UAAI,EAAE,KAAKC,QAAL,CAAcoQ,gBAAd;AAAR,KA/B6H;;AAAA,mDAgC7G,CAAC;AAAErQ,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAhC6G;;AAAA,oDAiC5G,CAAC;AAAEH,UAAI,EAAE,KAAKA,IAAb;AAAmBG,WAAK,EAAE;AAA1B,KAAD,CAjC4G;AAAA;;AAkCrIC,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,WAAKP,IAAL,CAAUQ,qBAAV,GAAkC,UAAlC;AACH,KAJD;AAKA,SAAKH,EAAL,CAAQ,aAAR,EAAwBI,KAAD,IAAW;AAC9B,UAAI;AACA,YAAI,OAAOA,KAAK,CAAC6P,UAAb,KAA4B,QAAhC,EAA0C,KAAKtQ,IAAL,CAAUsQ,UAAV,GAAuB7P,KAAK,CAAC6P,UAA7B;AAC7C,OAFD,CAEE,OAAOxP,CAAP,EAAU;AACR,aAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,KAND;AAOA,SAAKX,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAKpB,IAApB;AACrB,OAFD,MAEO,IAAIkB,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI;AACA,cAAID,IAAI,YAAYsP,YAApB,EAAkC,KAAKvQ,IAAL,CAAUwQ,KAAV,GAAkBvP,IAAlB,CAAlC,KACK,KAAKF,KAAL,CAAW,kCAAX;AACR,SAHD,CAGE,OAAOD,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ,OAPM,MAOA,IAAIE,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI;AACA,cAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,KAAKjB,IAAL,CAAUsQ,UAAV,GAAuBrP,IAAvB,CAA9B,KACK,KAAKF,KAAL,CAAW,4BAAX;AACR,SAHD,CAGE,OAAOD,CAAP,EAAU;AACR,eAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ,KAlBD;AAmBH;;AAnEoI;;gBAApHoP,U,iBACI,yB;;gBADJA,U,YAEgB,CAAC;AAC9B3O,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,QAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,MAFP;AAGC2B,OAAK,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,CAHR;AAIC1B,aAAW,EAAE;AAJd,CAR8B,C;;gBAFhByO,U,aAgBkB,CAAC;AAChC1O,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,QADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAhBlByO,U,WAuBc;AAC3BE,YAAU,EAAE;AACR5O,QAAI,EAAE,MADE;AAER2B,SAAK,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,CAFC;AAGRzB,WAAO,EAAE,MAHD;AAIRD,eAAW,EAAE;AAJL;AADe,C;;;;;;;;;;;;;;;;;;;;;;;;AC3BnC;AAEA;AACA;;AAEA,MAAM8O,QAAN,SAAuBC,0CAAvB,CAAqC;AAAA;AAAA;;AAAA,mEACR,KAAKzO,KADG;AACI0O,cAAQ,EAAE,KAAK/J,MAAL,CAAY3E,KAAZ,CAAkB0O;AADhC;AAAA;;AAAA;;AAOtB,MAAMC,MAAN,SAAqBC,6CAArB,CAAuE;AAAA;AAAA;;AAAA,mCAiB1E;AAAEC,YAAM,EAAEhP,SAAV;AAAqBiP,cAAQ,EAAEjP,SAA/B;AAA0C9B,UAAI,EAAE8B,SAAhD;AAA2DkP,YAAM,EAAElP,SAAnE;AAA8E6O,cAAQ,EAAE;AAAxF,KAjB0E;;AAAA,2CA+ElE,MAAM;AAClB,YAAM;AAAE3Q,YAAF;AAAQgR;AAAR,UAAmB,KAAK/O,KAA9B;;AACA,UAAIjC,IAAJ,EAAU;AACNA,YAAI,CAACwP,UAAL;AACAxP,YAAI,CAACiR,gBAAL;AACH;;AACD,UAAID,MAAJ,EAAY;AAAA;;AACRA,cAAM,CAACE,SAAP,CAAiBzB,OAAjB;AACA,oCAAI,KAAKxN,KAAL,CAAW0O,QAAf,iDAAI,qBAAsB,CAAtB,CAAJ,EAA8BK,MAAM,CAACG,UAAP,CAAkB,KAAKlP,KAAL,CAAW0O,QAAX,CAAoB,CAApB,CAAlB;AACjC;AACJ,KAzFiF;;AAAA,2CA0FlE,MAAM7O,SA1F4D;;AAAA,4CA2FjE,YAAY;AACzB,UAAI,KAAKqC,GAAL,CAASP,IAAT,CAAc,CAAd,CAAJ,EAAsB,MAAM,KAAKwN,IAAL,CAAU,KAAKjN,GAAL,CAASP,IAAT,CAAc,CAAd,CAAV,CAAN;AACtB,WAAKvD,EAAL,CAAQ,YAAR,EAAsB,KAAKgR,gBAA3B;AACH,KA9FiF;;AAAA,8CA+F/D,MAAOzN,IAAP,IAAkD;AACjE,UAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC,MAAM,KAAKwN,IAAL,CAAU,KAAKjN,GAAL,CAASP,IAAT,CAAc,CAAd,CAAV,CAAN;AACpC,KAjGiF;;AAAA,yCAkGpE,cAA+D;AAAA,UAAxD;AAAE3C,YAAF;AAAQC;AAAR,OAAwD;;AACzE,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB;AACd,cAAI,KAAKgB,KAAL,CAAWjC,IAAf,EAAqB,KAAKoB,MAAL,CAAY,KAAKb,OAAL,GAAe,CAA3B,EAA8B,KAAK0B,KAAL,CAAWjC,IAAzC;AACxB,SAFD,MAEO,IAAI,OAAOiB,IAAP,KAAgB,QAApB,EAA8B;AACjC,gBAAM,KAAKmQ,IAAL,CAAUnQ,IAAV,CAAN;AACH,SAFM,MAEA,IAAIqQ,yDAAW,CAACrQ,IAAD,CAAf,EAAuB;AAC1B,gBAAMsQ,KAAK,GAAGzD,KAAK,CAAC0D,IAAN,CAAWvQ,IAAX,CAAd;AACA,cAAI,KAAKgB,KAAL,CAAWjC,IAAf,EAAqB,KAAKiC,KAAL,CAAWjC,IAAX,CAAgByR,cAAhB,CAA+B;AAAE/P,gBAAI,EAAE,MAAR;AAAgBT,gBAAI,EAAE;AAAEsQ;AAAF,aAAtB;AAAiCG,gBAAI,EAAE,KAAKzR,QAAL,CAAc8H;AAArD,WAA/B;AACxB,SAHM,MAGA,IAAI,OAAO9G,IAAP,KAAgB,QAApB,EAA8B;AACjC,cAAI,KAAKgB,KAAL,CAAWjC,IAAf,EAAqB;AACjB,iBAAK,MAAM6H,GAAX,IAAkB5G,IAAlB,EAAwB;AACpB,kBAAI;AACA,sBAAMgH,GAAG,GAAGC,wDAAU,CAAEjH,IAAD,CAA+B4G,GAA/B,CAAD,CAAtB;AACA,oBAAI8J,CAAC,GAAG,CAAR;AACA1J,mBAAG,CAACL,OAAJ,CAAagK,CAAD,IAAO;AACf,sBAAIA,CAAC,CAACzE,MAAF,GAAW,CAAf,EAAkBwE,CAAC,IAAIC,CAAC,CAAC,CAAD,CAAN;AAClB,uBAAK3P,KAAL,CAAWjC,IAAX,CAAgByR,cAAhB,CAA+B;AAAE/P,wBAAI,EAAE,YAAR;AAAsBT,wBAAI,EAAE;AAAE4Q,wBAAE,EAAEhK,GAAN;AAAW4B,2BAAK,EAAEmI,CAAC,CAAC,CAAD,CAAnB;AAAwBE,gCAAU,EAAE;AAApC,qBAA5B;AAAyEJ,wBAAI,EAAE,KAAKzR,QAAL,CAAc8H,WAAd,GAA4B4J;AAA3G,mBAA/B;AACH,iBAHD,EAHA,CAOA;AACH,eARD,CAQE,OAAO7Q,CAAP,EAAU;AACR,qBAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ;AACJ;AACJ,OAzBD,MAyBO;AACH,cAAM+Q,GAAG,GAAG,KAAKtP,qBAAL,CAA2BvB,KAA3B,EAAkClB,IAA9C;;AACA,YAAI+R,GAAG,YAAYC,UAAnB,EAA+B;AAC3B,cAAI;AACA,kBAAM/J,GAAG,GAAGC,wDAAU,CAACjH,IAAD,CAAtB;AACA,iBAAKkH,QAAL,CAAc4J,GAAd,EAAmB9J,GAAnB;AACH,WAHD,CAGE,OAAOnH,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;AACJ;AACJ;AACJ,KAvIiF;AAAA;;AAkBxE,QAAJoQ,IAAI,CAACa,GAAD,EAAc;AACpB,QAAIC,OAAJ;AACA,QAAIlB,MAAJ;;AACA,QAAI;AACAkB,aAAO,GAAG,CAAC,MAAM;AAAO;AAAyBD,SAAhC,CAAP,EAA6CrQ,OAAvD;AACH,KAFD,CAEE,OAAOd,CAAP,EAAU;AACR,WAAKC,KAAL,CAAWD,CAAC,CAACE,OAAb;AACH;;AACD,QAAIhB,IAAJ;AACA,QAAImL,OAAJ;;AACA,QAAI;AACA6F,YAAM,GAAG,MAAMkB,OAAO,CAACC,cAAR,CAAuB,KAAKlS,QAA5B,CAAf;AACAD,UAAI,GAAGgR,MAAM,CAACE,SAAd;AACA/F,aAAO,GAAG,MAAM6F,MAAM,CAACoB,SAAP,EAAhB;AACH,KAJD,CAIE,OAAOtR,CAAP,EAAU;AACR,UAAIA,CAAJ,EAAO,KAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACP;AACH;;AACD,SAAKgB,eAAL;AACA,SAAKqQ,aAAL;AACAlH,WAAO,CAACtE,KAAR,CAAcyL,KAAd,GAAsB,MAAtB;AACAnH,WAAO,CAACtE,KAAR,CAAc0L,MAAd,GAAuB,MAAvB;AACApH,WAAO,CAACtE,KAAR,CAAc2L,QAAd,GAAyB,UAAzB;AACA,SAAKvQ,KAAL,CAAW0O,QAAX,GAAsB,CAACxF,OAAD,CAAtB;AACA,SAAKsH,QAAL,CAAc;AAAE9B,cAAQ,EAAE,KAAK1O,KAAL,CAAW0O;AAAvB,KAAd;AACA3Q,QAAI,CAACQ,qBAAL,GAA6B,UAA7B;AACA,UAAMF,MAAM,GAAGN,IAAI,CAACkC,cAApB;AACA,UAAM3B,OAAO,GAAGP,IAAI,CAACmC,eAArB;AACAuQ,UAAM,CAACC,MAAP,CAAc,KAAK1Q,KAAnB,EAA0B;AAAEjC,UAAF;AAAQgR;AAAR,KAA1B;AACA,UAAM4B,IAAI,GAAG,KAAKC,WAAlB;AACA,UAAMC,cAAc,GAAGF,IAAI,CAACtS,MAAL,CAAY,CAAZ,CAAvB;;AACA,UAAMyS,oBAAgC,mCAAQD,cAAR;AAAwBpR,UAAI,EAAE;AAA9B,MAAtC;;AACA,UAAMsR,SAAqB,GAAG;AAAEvR,WAAK,EAAE,KAAT;AAAgBC,UAAI,EAAE,QAAtB;AAAgCC,iBAAW,EAAE;AAA7C,KAA9B;AACA,UAAMsR,mBAA+B,GAAG;AAAExR,WAAK,EAAE,KAAT;AAAgBC,UAAI,EAAE,QAAtB;AAAgCC,iBAAW,EAAE;AAA7C,KAAxC;AACA,UAAMuR,UAAuB,GAAG;AAAExR,UAAI,EAAE,QAAR;AAAkBC,iBAAW,EAAE;AAA/B,KAAhC;AACA,UAAMwR,cAAc,GAAGP,IAAI,CAACrS,OAAL,CAAa,CAAb,CAAvB;AACA,UAAM6B,WAAW,GAAGwQ,IAAI,CAACvQ,IAAzB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,MAApB,EAA4BoC,CAAC,EAA7B,EAAiC;AAC7B,UAAIA,CAAC,KAAK,CAAV,EAAaN,WAAW,CAAC9B,MAAZ,CAAmBoC,CAAnB,IAAwBpC,MAAM,GAAGyS,oBAAH,GAA0BD,cAAxD,CAAb,KACK1Q,WAAW,CAAC9B,MAAZ,CAAmBoC,CAAnB,IAAwBsQ,SAAxB;AACL,WAAKvQ,qBAAL,CAA2BC,CAA3B,IAAgC;AAAE1C,YAAF;AAAQG,aAAK,EAAEuC;AAAf,OAAhC;AACH;;AACD,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,OAApB,EAA6BmC,CAAC,EAA9B,EAAkC;AAC9BN,iBAAW,CAAC7B,OAAZ,CAAoBmC,CAApB,IAAyBwQ,UAAzB;AACA,WAAKvQ,sBAAL,CAA4BD,CAA5B,IAAiC;AAAE1C,YAAF;AAAQG,aAAK,EAAEuC;AAAf,OAAjC;AACH;;AACDN,eAAW,CAAC7B,OAAZ,CAAoBA,OAApB,IAA+B4S,cAA/B;AACA,UAAMC,SAAS,GAAG,MAAMpC,MAAM,CAACE,SAAP,CAAiBmC,gBAAjB,EAAxB;AACA,UAAMC,MAAM,GAAGZ,MAAM,CAACa,IAAP,CAAYH,SAAZ,CAAf;;AACA,SAAK,IAAI1Q,CAAC,GAAGpC,MAAM,IAAI,CAAvB,EAA0BoC,CAAC,GAAG,CAACpC,MAAM,IAAI,CAAX,IAAgBgT,MAAM,CAACnG,MAArD,EAA6DzK,CAAC,EAA9D,EAAkE;AAC9D,YAAM8Q,IAAI,GAAGF,MAAM,CAAC5Q,CAAC,IAAIpC,MAAM,IAAI,CAAd,CAAF,CAAnB;AACA,YAAMmT,KAAK,GAAGL,SAAS,CAACI,IAAD,CAAvB;AACA,YAAM;AAAEE,oBAAF;AAAgBC,gBAAhB;AAA0BC;AAA1B,UAAuCH,KAA7C;AACArR,iBAAW,CAAC9B,MAAZ,CAAmBoC,CAAnB,oCAA6BuQ,mBAA7B;AAAkDtR,mBAAW,YAAK6R,IAAL,SAAYP,mBAAmB,CAACtR,WAAhC,eAAgD+R,YAAhD,eAAiEC,QAAjE,gBAA+EC,QAA/E;AAA7D;AACH;;AACD,SAAKvR,IAAL,GAAYD,WAAZ;AACA,SAAK9B,MAAL,GAAc,CAACA,MAAM,IAAI,CAAX,IAAgBgT,MAAM,CAACnG,MAArC;AACA,SAAK5M,OAAL,GAAeA,OAAO,GAAG,CAAzB;AACA,SAAKqC,YAAL;AACA,SAAKxB,MAAL,CAAY,KAAKb,OAAL,GAAe,CAA3B,EAA8B,KAAK0B,KAAL,CAAWjC,IAAzC;AACH;;AA0DDI,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,KAAKwT,aAAxB;AACA,SAAKxT,EAAL,CAAQ,UAAR,EAAoB,KAAKyT,cAAzB;AACA,SAAKzT,EAAL,CAAQ,OAAR,EAAiB,KAAKwC,WAAtB;AACA,SAAKxC,EAAL,CAAQ,SAAR,EAAmB,KAAKgS,aAAxB;AACH;;AA9IiF;;gBAAjEzB,M,iBACI,iC;;gBADJA,M,YAEgB,CAAC;AAC9BnP,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,UAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhBiP,M,aAOkB,CAAC;AAChClP,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,C;;gBAPlBiP,M,UAWY,CAAC;AAC1BlP,MAAI,EAAE,QADoB;AAE1BuD,UAAQ,EAAE,KAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,C;;gBAXZiP,M,QAgBLH,Q;;;;;;;;;;;;;;;;;;AC7BhB;AAGe,MAAMsD,YAAN,SAA2B5M,gDAA3B,CAAyE;AAAA;AAAA;;AAAA,mCAW5E,EAX4E;AAAA;;AAYpF/G,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,OAAR,EAAiB,QAAqB;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AAClC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAK4S,OAAL,CAAa/T,QAA5B;AACrB;AACJ,KAJD;AAKH;;AAvBmF;;gBAAnE8T,Y,iBACI,sC;;gBADJA,Y,YAEgB,CAAC;AAC9BtS,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,MAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,C;;gBAFhBoS,Y,aAOkB,CAAC;AAChCrS,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,C;;;;;;;;;;;;;;;;;;ACVvC;AAGe,MAAMuN,YAAN,SAA2B/H,gDAA3B,CAAuF;AAAA;AAAA;;AAAA,mCAkB1F,EAlB0F;;AAAA;;AAAA,yCAoBhC,cAA2B;AAAA,UAApB;AAAElG,YAAF;AAAQC;AAAR,OAAoB;;AACzF,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAIC,6CAAM,CAACF,IAAD,CAAV,EAAkB,KAAKG,MAAL,CAAY,CAAZ,EAAe,KAAK8N,YAApB;AACrB,OAFD,MAEO,IAAIhO,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,cAAI;AACA,kBAAMgR,GAAG,GAAG9M,MAAM,CAACgB,GAAP,CAAWC,eAAX,CAA2B,IAAI6N,IAAJ,CAAS,CAAChT,IAAD,CAAT,EAAiB;AAAES,kBAAI,EAAE;AAAR,aAAjB,CAA3B,CAAZ;AACA,kBAAM,KAAKwN,YAAL,CAAkBgF,SAAlB,CAA4BjC,GAA5B,CAAN;AACA,iBAAK7Q,MAAL,CAAY,CAAZ,EAAe,IAAIsH,uCAAJ,EAAf;AACH,WAJD,CAIE,OAAO5H,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAYD,CAAD,CAAaE,OAAxB;AACH;AACJ;AACJ;AACJ,KAlCiG;AAAA;;AAmClGZ,WAAS,GAAG;AACR,UAAMA,SAAN;AACA,SAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACA,UAAI,CAAC,KAAKyT,OAAL,CAAa/T,QAAb,CAAsBiP,YAA3B,EAAyC,KAAKnO,KAAL,CAAW,yBAAX,EAAzC,KACK,KAAKmO,YAAL,GAAoB,KAAK8E,OAAL,CAAa/T,QAAb,CAAsBiP,YAA1C;AACR,KALD;AAMA,SAAK7O,EAAL,CAAQ,OAAR,EAAiB,KAAKwC,WAAtB;AACH;;AA5CiG;;gBAAjFqM,Y,iBACI,mD;;gBADJA,Y,YAEgB,CAAC;AAC9BzN,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,MAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,IADR;AAECC,MAAI,EAAE,QAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,C;;gBAFhBuN,Y,aAWkB,CAAC;AAChCxN,MAAI,EAAE,QAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,MADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdvC;AACA;AAGA;AACA;AACA;AACA;AAGA;AASO,MAAMwS,QAAN,SAAuBC,mDAAvB,CAAiE;AAAA;AAAA;;AAAA,mEAE7D,KAAKnS,KAFwD;AAGhE+B,WAAK,EAAE,KAAK4C,MAAL,CAAY3E,KAAZ,CAAkB+B,KAHuC;AAIhEqQ,eAAS,EAAEC,WAAW,CAACC,GAAZ,EAJqD;AAKhEC,YAAM,EAAE1S,SALwD;AAMhE2S,gBAAU,EAAE3S;AANoD;;AAAA,2CAwBpD,MAAM;AAClB,YAAM0S,MAAM,GAAG,KAAK/T,KAAL,CAAWiU,MAAX,GAAoB,KAAKzS,KAAL,CAAWuS,MAA/B,GAAwC,KAAKvS,KAAL,CAAWwS,UAAlE;AACA,UAAID,MAAM,CAACG,WAAX,EAAwBH,MAAM,CAACI,IAAP;AAC3B,KA3BmE;;AAAA,+CA4BhD,YAAY;AAC5B,UAAI,CAAC,KAAKJ,MAAL,CAAYvS,KAAZ,CAAkB4S,MAAvB,EAA+B;AAC/B,UAAI,CAAC,KAAK5S,KAAL,CAAW+B,KAAhB,EAAuB;AACvB,WAAK8Q,YAAL;AACA,YAAM,KAAKC,UAAL,EAAN;AACA,WAAKhM,QAAL,CAAc;AAAEiM,iBAAS,EAAE;AAAb,OAAd;AACH,KAlCmE;;AAAA,yCAmCtD,MAAM;AAChB,WAAKF,YAAL;AACA,WAAK/L,QAAL,CAAc;AAAEiM,iBAAS,EAAE;AAAb,OAAd;AACH,KAtCmE;;AAAA,kDAuC5ClU,CAAD,IAAyBA,CAAC,CAACmU,eAAF,EAvCoB;AAAA;;AASpD,QAAVF,UAAU,GAAG;AACf,UAAMlN,GAAG,GAAG,KAAKpH,KAAL,CAAWiU,MAAX,GAAoB,QAApB,GAA+B,YAA3C;AACA,UAAMF,MAAM,GAAG,IAAIU,uDAAJ,CAAgB,KAAKtO,MAAL,CAAY3E,KAAZ,CAAkB+B,KAAlC,CAAf;AACA,UAAMwQ,MAAM,CAACW,IAAP,EAAN;AACAX,UAAM,CAACnU,EAAP,CAAU,SAAV,EAAqB,KAAK+U,aAA1B;AACA,SAAKrM,QAAL,CAAc;AAAEsL,eAAS,EAAEC,WAAW,CAACC,GAAZ,EAAb;AAAgC,OAAC1M,GAAD,GAAmB2M;AAAnD,KAAd,EAA2E,MAAMA,MAAM,CAACa,SAAP,EAAjF;AACH;;AACDP,cAAY,GAAG;AACX,UAAMjN,GAAG,GAAG,KAAKpH,KAAL,CAAWiU,MAAX,GAAoB,QAApB,GAA+B,YAA3C;AACA,UAAMF,MAAM,GAAG,KAAKvS,KAAL,CAAW4F,GAAX,CAAf;AACA,QAAI,CAAC2M,MAAL,EAAa;AACbA,UAAM,CAACc,GAAP,CAAW,SAAX,EAAsB,KAAKF,aAA3B;AACAZ,UAAM,CAAC/E,OAAP;AACA,SAAK1G,QAAL,CAAc;AAAEsL,eAAS,EAAEC,WAAW,CAACC,GAAZ,EAAb;AAAgC,OAAC1M,GAAD,GAAmB/F;AAAnD,KAAd,EAA8E,MAAM,KAAKrB,KAAL,CAAW+T,MAAX,CAAkBa,SAAlB,EAApF;AACH;;AAiBD7O,mBAAiB,GAAG;AAChB,UAAMA,iBAAN;AACA,QAAI,KAAK/F,KAAL,CAAWiU,MAAf,EAAuB,KAAKK,UAAL;AAC1B;;AACDQ,oBAAkB,CAACC,SAAD,EAA2CC,SAA3C,EAAqG;AACnH,UAAM5N,GAAG,GAAG,KAAKpH,KAAL,CAAWiU,MAAX,GAAoB,QAApB,GAA+B,YAA3C;AACA,UAAMF,MAAM,GAAG,KAAKvS,KAAL,CAAW4F,GAAX,CAAf;;AACA,QAAI4N,SAAS,CAACzR,KAAV,KAAoB,KAAK/B,KAAL,CAAW+B,KAAnC,EAA0C;AACtC,UAAIwQ,MAAJ,EAAY;AACR,aAAKM,YAAL;AACA,aAAKC,UAAL;AACH;AACJ;;AACD,QAAIS,SAAS,CAACd,MAAV,KAAqB,KAAKjU,KAAL,CAAWiU,MAApC,EAA4C;AACxC,UAAI,KAAKjU,KAAL,CAAWiU,MAAf,EAAuB;AACnB,aAAKK,UAAL;AACH,OAFD,MAEO;AACH,YAAIP,MAAJ,EAAY;AACR,eAAKM,YAAL;AACH;AACJ;AACJ;;AACD,QAAIN,MAAJ,EAAY;AACR,UAAIiB,SAAS,CAACnD,KAAV,KAAoB,KAAKrQ,KAAL,CAAWqQ,KAA/B,IAAwCmD,SAAS,CAAClD,MAAV,KAAqB,KAAKtQ,KAAL,CAAWsQ,MAA5E,EAAoF;AAChFiC,cAAM,CAACkB,WAAP;AACH;AACJ;;AACD,UAAMH,kBAAN,CAAyBC,SAAzB,EAAoCC,SAApC;AACH;;AACDE,sBAAoB,GAAG;AACnB,SAAKb,YAAL;AACA,UAAMa,oBAAN;AACH;;AACD3O,QAAM,GAAG;AACL,UAAMwN,MAAM,GAAG,KAAK/T,KAAL,CAAWiU,MAAX,GAAoB,KAAKzS,KAAL,CAAWuS,MAA/B,GAAwC,KAAKvS,KAAL,CAAWwS,UAAlE;AACA,UAAMmB,OAAO,gBAAG;AAAK,eAAS,EAAC,kBAAf;AAAkC,WAAK,EAAE;AAAErD,cAAM,EAAE,MAAV;AAAkBD,aAAK,EAAE,MAAzB;AAAiCxL,eAAO,EAAE,MAA1C;AAAkD0L,gBAAQ,EAAE;AAA5D;AAAzC,OAERgC,MAAM,gBACA,iDAAC,4EAAD;AAAe,SAAG,EAAE,KAAKvS,KAAL,CAAWoS,SAA/B;AAA0C,YAAM,EAAEG,MAAlD;AAA0D,SAAG,EAAE,KAAK/T,KAAL,CAAWmG,MAAX,CAAkBoN,OAAlB,CAA0B6B,GAAzF;AAA8F,UAAI,EAAE,KAAKpV,KAAL,CAAWmG,MAAX,CAAkBoN,OAAlB,CAA0B6B,GAA1B,CAA8BC;AAAlI,MADA,GAEAhU,SAJE,CAAhB;AAOA,UAAM6O,QAAQ,gBACV,iDAAC,8DAAD;AAAe,WAAK,EAAE;AAAE4B,cAAM,EAAE,MAAV;AAAkBD,aAAK,EAAE,MAAzB;AAAiCE,gBAAQ,EAAE;AAA3C,OAAtB;AAA+E,iBAAW,EAAE,KAAKuD;AAAjG,OACKH,OADL,CADJ;AAKA,QAAI,KAAKnV,KAAL,CAAWiU,MAAf,EAAuB,OAAO/D,QAAP;;AACvB,UAAMqF,cAAc,qBAAQ,KAAKvV,KAAL,CAAWuV,cAAnB,CAApB;;AACA,QAAI,CAACA,cAAc,CAACC,aAApB,EAAmCD,cAAc,CAACC,aAAf,GAA+B,KAAKC,iBAApC;;AACnC,UAAMC,UAAiD,mCAAQ,KAAK1V,KAAL,CAAW0V,UAAnB;AAA+BxF,cAA/B;AAAyCyF,eAAS,EAAE,cAApD;AAAoEC,UAAI,EAAE,KAAKpU,KAAL,CAAW+S,SAArF;AAAgGsB,aAAO,EAAE,KAAKC,WAA9G;AAA2HC,eAAS,EAAE1U,SAAtI;AAAiJ2U,WAAK,EAAE,IAAxJ;AAA8JC,UAAI,EAAE,YAApK;AAAkLC,eAAS,EAAE;AAA7L,MAAvD;;AACA,wBAAO,iDAAC,mDAAD,eAAoB,KAAKlW,KAAzB;AAAgC,gBAAU,EAAE0V,UAA5C;AAAwD,oBAAc,EAAEH;AAAxE,OAAP;AACH;;AA5FmE;;gBAA3D7B,Q,cAQS,I;;AAgGP,MAAMyC,MAAN,SAAqBzP,gDAArB,CAAoQ;AAAA;AAAA;;AAAA;;AAAA,mCA4C1P;AAAEU,SAAG,qBAAE,KAAK1D,GAAL,CAASP,IAAT,CAAc,CAAd,CAAF,oDAAE,gBAAkBiT,QAAlB,EAAP;AAAqC7S,WAAK,EAAElC,SAA5C;AAAuDgV,UAAI,EAAEhV,SAA7D;AAAwEsL,sBAAgB,EAAE,CAA1F;AAA6FD,YAAM,EAAE,KAAKlN,QAAL,CAAc6E,UAAnH;AAA+HA,gBAAU,EAAE,KAAK7E,QAAL,CAAc6E;AAAzJ,KA5C0P;AAAA;;AA6C/Q1E,WAAS,GAAG;AACR,UAAMA,SAAN;;AACA,UAAM2W,YAAY,GAAI/S,KAAD,IAAyB;AAC1C,UAAI,CAACA,KAAL,EAAY,OAAO,KAAP;AACZ,YAAM;AAAEoJ,wBAAF;AAAoBD,cAApB;AAA4BrI;AAA5B,UAA2C,KAAK7C,KAAtD;AACA,aAAO+B,KAAK,CAACoJ,gBAAN,KAA2BA,gBAA3B,IAA+CpJ,KAAK,CAACmJ,MAAN,KAAiBA,MAAhE,IAA0EnJ,KAAK,CAACc,UAAN,KAAqBA,UAAtG;AACH,KAJD;;AAKA,UAAMkS,qBAAqB,GAAG,MAAM;AAAA;;AAChC,WAAKjO,QAAL,CAAc;AAAElB,WAAG,sBAAE,KAAK5F,KAAL,CAAW6U,IAAb,qDAAE,iBAAiBG;AAAxB,OAAd;AACH,KAFD;;AAGA,UAAMC,WAAW,GAAG,MAAOpW,CAAP,IAA2C;AAC3D,UAAIA,CAAC,CAACqW,QAAF,KAAe,KAAKlV,KAAL,CAAW+B,KAA9B,EAAqC;AACrC,YAAMoT,MAAM,EAAZ;AACH,KAHD;;AAIA,UAAMC,YAAY,GAAG,YAAY;AAC7B,YAAM;AAAErT,aAAF;AAAS8S;AAAT,UAAkB,KAAK7U,KAA7B;AACA,YAAM+B,KAAK,CAACsT,WAAN,CAAkB,IAAlB,CAAN;;AACA,UAAIR,IAAJ,EAAU;AACNA,YAAI,CAACzW,EAAL,CAAQ,WAAR,EAAqB+W,MAArB;AACAN,YAAI,CAACzW,EAAL,CAAQ,aAAR,EAAuB2W,qBAAvB;AACAF,YAAI,CAACzW,EAAL,CAAQ,aAAR,EAAuB2W,qBAAvB;AACAF,YAAI,CAACzW,EAAL,CAAQ,OAAR,EAAiB6W,WAAjB;AACH;AACJ,KATD;;AAUA,UAAMK,eAAe,GAAG,YAAY;AAChC,YAAM;AAAEvT,aAAF;AAAS8S;AAAT,UAAkB,KAAK7U,KAA7B;;AACA,UAAI6U,IAAJ,EAAU;AACNA,YAAI,CAACxB,GAAL,CAAS,WAAT,EAAsB8B,MAAtB;AACAN,YAAI,CAACxB,GAAL,CAAS,aAAT,EAAwB0B,qBAAxB;AACAF,YAAI,CAACxB,GAAL,CAAS,aAAT,EAAwB0B,qBAAxB;AACAF,YAAI,CAACxB,GAAL,CAAS,OAAT,EAAkB4B,WAAlB;AACH;;AACD,YAAMlT,KAAK,CAACwT,cAAN,CAAqB,IAArB,CAAN;AACH,KATD;;AAUA,UAAMJ,MAAM,GAAG,YAAY;AACvB,UAAI,KAAKnV,KAAL,CAAW+B,KAAf,EAAsB,MAAMuT,eAAe,EAArB;AACtB,YAAM;AAAE1P;AAAF,UAAU,KAAK5F,KAArB;AACA,UAAI+B,KAAJ;;AACA,UAAI;AACA,cAAM;AAAEyT,cAAF;AAAQC;AAAR,YAAoB,MAAM,KAAKC,aAAL,CAAmB9P,GAAnB,EAAwB,OAAxB,EAAiC,YAAY;AACzE,gBAAM;AAAEuF,4BAAF;AAAoBD,kBAApB;AAA4BrI;AAA5B,cAA2C,KAAK7C,KAAtD;AACA+B,eAAK,GAAG,MAAMmF,oEAAA,CAAyB,KAAK6K,OAAL,CAAa4D,OAAtC,EAA+CxK,gBAA/C,EAAiED,MAAjE,EAAyErI,UAAzE,CAAd;AACA,iBAAOd,KAAP;AACH,SAJ+B,CAAhC;;AAKA,YAAI0T,OAAJ,EAAa;AACT1T,eAAK,CAAC8S,IAAN,GAAaW,IAAb;AACH,SAFD,MAEO;AACHzT,eAAK,GAAG,MAAMyT,IAAI,CAACI,WAAL,EAAd;AACH;;AACD,aAAK9O,QAAL,CAAc;AAAE/E,eAAF;AAAS8S,cAAI,EAAEW;AAAf,SAAd;AACA,aAAKhF,QAAL,CAAc;AAAEzO;AAAF,SAAd;AACH,OAbD,CAaE,OAAOjD,KAAP,EAAc;AACZ,aAAKA,KAAL,CAAWA,KAAX;AACH,OAfD,SAeU;AACN,cAAMsW,YAAY,EAAlB;AACA,aAAKjW,MAAL,CAAY,CAAZ,EAAe,IAAIsH,uCAAJ,EAAf;AACH;AACJ,KAvBD;;AAwBA,SAAKrI,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACrB,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,OAAL,GAAe,CAAf;AACH,KAHD;AAIA,SAAKF,EAAL,CAAQ,YAAR,EAAuBuD,IAAD,IAAU;AAAA;;AAC5B,UAAI,CAAC,KAAK3B,KAAL,CAAW+B,KAAhB,EAAuB;AACvB,YAAM8T,MAAM,GAAG,KAAK7V,KAAL,CAAW4F,GAA1B;AACA,YAAMA,GAAG,aAAGjE,IAAI,CAAC,CAAD,CAAP,2CAAG,OAASiT,QAAT,EAAZ;AACA,YAAMzJ,gBAAgB,GAAG,OAAOxJ,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,GAA8B,CAAC,CAACA,IAAI,CAAC,CAAD,CAApC,GAA0C,CAAnE;AACA,YAAMuJ,MAAM,GAAG,OAAOvJ,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,GAA8B,CAAC,CAACA,IAAI,CAAC,CAAD,CAApC,GAA0C,KAAK3D,QAAL,CAAc6E,UAAvE;AACA,YAAMA,UAAU,GAAG,OAAOlB,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,GAA8B,CAAC,CAACA,IAAI,CAAC,CAAD,CAApC,GAA0C,KAAK3D,QAAL,CAAc6E,UAA3E;AACA,WAAKiE,QAAL,CAAc;AAAElB,WAAF;AAAOuF,wBAAP;AAAyBD,cAAzB;AAAiCrI;AAAjC,OAAd;;AACA,UAAI+C,GAAG,KAAKiQ,MAAR,IAAkB,CAACf,YAAY,CAAC,KAAK9U,KAAL,CAAW+B,KAAZ,CAAnC,EAAuD;AACnDoT,cAAM;AACT;AACJ,KAXD;AAYA,SAAK/W,EAAL,CAAQ,UAAR,EAAoB+W,MAApB;AACA,SAAK/W,EAAL,CAAQ,OAAR,EAAiB,cAA2B;AAAA,UAApB;AAAEY,YAAF;AAAQC;AAAR,OAAoB;;AACxC,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,YAAI,CAACC,6CAAM,CAACF,IAAD,CAAX,EAAmB;AACf,cAAIA,IAAI,YAAYkI,wDAApB,EAAkC;AAC9B,iBAAKlH,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0B/N,IAA1B;AACH,WAFD,MAEO,IAAIA,IAAI,YAAYgI,WAApB,EAAiC;AACpC,kBAAMjF,KAAK,GAAG,MAAMmF,8EAAA,CAAmC,KAAK6K,OAAL,CAAa4D,OAAhD,EAAyD3W,IAAzD,CAApB;AACA,iBAAKgB,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0BhL,KAA1B;AACH,WAHM,MAGA;AACH,gBAAIoF,WAAJ;;AACA,gBAAI;AACA,oBAAM2O,EAAE,GAAG9W,IAAI,YAAY+W,WAAhB,GAA8B/W,IAA9B,GAAqC,MAAOA,IAAD,CAAegX,WAAf,EAAtD;AACA7O,yBAAW,GAAG,MAAM,KAAK4K,OAAL,CAAa/T,QAAb,CAAsBiY,eAAtB,CAAsCH,EAAtC,CAApB;AACH,aAHD,CAGE,OAAOjX,CAAP,EAAU;AACR,mBAAKC,KAAL,CAAW,qBAAX;AACA;AACH;;AACD,kBAAMiD,KAAK,GAAG,MAAMmF,8EAAA,CAAmC,KAAK6K,OAAL,CAAa4D,OAAhD,EAAyDxO,WAAzD,CAApB;AACA,iBAAKnH,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0BhL,KAA1B;AACH;AACJ;;AACD,aAAK5C,MAAL,CAAY,CAAZ,EAAe,KAAKa,KAAL,CAAW+B,KAA1B;AACH,OArBD,MAqBO,IAAI9C,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAID,IAAI,YAAYkI,wDAApB,EAAkC;AAC9B,eAAKlH,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0B/N,IAA1B;AACH,SAFD,MAEO,IAAIA,IAAI,YAAYgI,WAApB,EAAiC;AACpC,gBAAMjF,KAAK,GAAG,MAAMmF,8EAAA,CAAmC,KAAK6K,OAAL,CAAa4D,OAAhD,EAAyD3W,IAAzD,CAApB;AACA,eAAKgB,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0BhL,KAA1B;AACH,SAHM,MAGA;AACH,cAAIoF,WAAJ;;AACA,cAAI;AACA,kBAAM2O,EAAE,GAAG9W,IAAI,YAAY+W,WAAhB,GAA8B/W,IAA9B,GAAqC,MAAOA,IAAD,CAAegX,WAAf,EAAtD;AACA7O,uBAAW,GAAG,MAAM,KAAK4K,OAAL,CAAa/T,QAAb,CAAsBiY,eAAtB,CAAsCH,EAAtC,CAApB;AACH,WAHD,CAGE,OAAOjX,CAAP,EAAU;AACR,iBAAKC,KAAL,CAAW,qBAAX;AACA;AACH;;AACD,gBAAMiD,KAAK,GAAG,MAAMmF,8EAAA,CAAmC,KAAK6K,OAAL,CAAa4D,OAAhD,EAAyDxO,WAAzD,CAApB;AACA,eAAKnH,KAAL,CAAW+B,KAAX,CAAiBgL,QAAjB,CAA0BhL,KAA1B;AACH;AACJ,OAlBM,MAkBA,IAAI9C,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAhD,EAA0D;AACtD,eAAK8H,QAAL,CAAc;AAAElB,eAAG,EAAE5G,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE4V,QAAN;AAAP,WAAd;AACAO,gBAAM;AACT;AACJ;AACJ,KA9CD;AA+CA,SAAK/W,EAAL,CAAQ,SAAR,EAAmBkX,eAAnB;AACH;;AAxK8Q;;gBAA9PX,M,aACA,U;;gBADAA,M,UAEY,W;;gBAFZA,M,YAGD,Y;;gBAHCA,M,aAIA,O;;gBAJAA,M,iBAKI,oB;;gBALJA,M,YAMgB,CAAC;AAC9BnV,OAAK,EAAE,IADuB;AAE9BC,MAAI,EAAE,UAFwB;AAG9BC,aAAW,EAAE;AAHiB,CAAD,EAI9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,UAFP;AAGCC,aAAW,EAAE;AAHd,CAJ8B,EAQ9B;AACCF,OAAK,EAAE,KADR;AAECC,MAAI,EAAE,UAFP;AAGCC,aAAW,EAAE;AAHd,CAR8B,C;;gBANhBiV,M,aAmBkB,CAAC;AAChClV,MAAI,EAAE,UAD0B;AAEhCC,aAAW,EAAE;AAFmB,CAAD,EAGhC;AACCD,MAAI,EAAE,MADP;AAECC,aAAW,EAAE;AAFd,CAHgC,C;;gBAnBlBiV,M,UA0BY,CAAC;AAC1BlV,MAAI,EAAE,UADoB;AAE1BuD,UAAQ,EAAE,IAFgB;AAG1BtD,aAAW,EAAE;AAHa,CAAD,EAI1B;AACCD,MAAI,EAAE,QADP;AAECuD,UAAQ,EAAE,IAFX;AAGCtD,aAAW,EAAE;AAHd,CAJ0B,EAQ1B;AACCD,MAAI,EAAE,QADP;AAECuD,UAAQ,EAAE,IAFX;AAGCtD,aAAW,EAAE;AAHd,CAR0B,EAY1B;AACCD,MAAI,EAAE,QADP;AAECuD,UAAQ,EAAE,IAFX;AAGCtD,aAAW,EAAE;AAHd,CAZ0B,C;;gBA1BZiV,M,QA2CLzC,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iEAAe;AACX;AACAJ,cAFW;AAGX7E,cAHW;AAIX,WAASrN,6CAJE;AAKX,eAAaoI,8CALF;AAMX,iBAAewB,gDANJ;AAOX,WAASd,0CAPE;AAQX,kBAAgBD,iDARL;AASX,eAAagF,8CATF;AAUX,aAAWrE,4CAVA;AAWX,eAAavL,8CAXF;AAYX,aAAWuH,6CAZA;AAaX,gBAAc+C,gDAbH;AAcX,YAAUG,4CAdC;AAeX,iBAAeb,iDAfJ;AAgBX,UAAQmB,gDAhBG;AAiBX,YAAUK,4CAjBC;AAkBX,iBAAe+E,wDAlBJ;AAmBX,gBAAcE,mDAnBH;AAoBX,aAAWxE,6CApBA;AAqBX,UAAQmE,mDArBG;AAsBX,iBAAeM,iDAtBJ;AAuBX,cAAYtN,8CAvBD;AAwBX,eAAa0C,+CAxBF;AAyBX,aAAWoL,qDAzBA;AA0BX,aAAWgG,6CA1BA;AA2BX,mBAAiBtO,mDA3BN;AA4BX,aAAWqE,6CAAMA;AA5BN,CAAf,E","file":"js/e1b188b42691da12ac69.js","sourcesContent":["import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\ntype TOptions = {\n    fftSize: 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768;\n    minDecibels: number;\n    maxDecibels: number;\n    smoothingTimeConstant: number;\n};\ntype I = [Bang, Float32Array, Uint8Array, Float32Array, Uint8Array, Partial<TOptions>];\ntype O = [null, Float32Array, Uint8Array, Float32Array, Uint8Array, AnalyserNode];\nexport default class Analyser extends JSPAudioNode<AnalyserNode, {}, I, O, [], TOptions> {\n    static description = \"WebAudio AnalyserNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output AnalyserNode instance\"\n    }, {\n        isHot: true,\n        type: \"object\",\n        description: \"getFloatTimeDomainData(): Float32Array\"\n    }, {\n        isHot: true,\n        type: \"object\",\n        description: \"getByteTimeDomainData(): Uint8Array\"\n    }, {\n        isHot: true,\n        type: \"object\",\n        description: \"getFloatFrequencyData(): Float32Array\"\n    }, {\n        isHot: true,\n        type: \"object\",\n        description: \"getByteFrequencyData(): Uint8Array\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"Options: { fftSize, minDecibels, maxDecibels, smoothingTimeConstant }\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"getFloatTimeDomainData result\"\n    }, {\n        type: \"object\",\n        description: \"getByteTimeDomainData result\"\n    }, {\n        type: \"object\",\n        description: \"getFloatFrequencyData result\"\n    }, {\n        type: \"object\",\n        description: \"getByteFrequencyData result\"\n    }, {\n        type: \"object\",\n        description: \"Instance: AnalyserNode\"\n    }];\n    static props: TMeta[\"props\"] = {\n        fftSize: {\n            type: \"number\",\n            default: 2048,\n            description: \"The size of the FFT to be used: power of 2\"\n        },\n        minDecibels: {\n            type: \"number\",\n            default: -100,\n            description: \"The minimum power value in the scaling range for the FFT analysis data\"\n        },\n        maxDecibels: {\n            type: \"number\",\n            default: -10,\n            description: \"The maximum power value in the scaling range for the FFT analysis data\"\n        },\n        smoothingTimeConstant: {\n            type: \"number\",\n            default: 0.8,\n            description: \"The averaging constant with the last analysis frame\"\n        }\n    };\n    state = { node: this.audioCtx.createAnalyser() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 6;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateProps\", (props) => {\n            try {\n                if (typeof props.fftSize === \"number\") this.node.fftSize = props.fftSize;\n                if (typeof props.minDecibels === \"number\") this.node.minDecibels = props.minDecibels;\n                if (typeof props.maxDecibels === \"number\") this.node.maxDecibels = props.maxDecibels;\n                if (typeof props.smoothingTimeConstant === \"number\") this.node.smoothingTimeConstant = props.smoothingTimeConstant;\n            } catch (e) {\n                this.error((e as Error).message);\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(5, this.node);\n            } else if (inlet === 5) {\n                if (typeof data === \"object\") {\n                    const props = data as I[5];\n                    try {\n                        if (typeof props.fftSize === \"number\") this.node.fftSize = props.fftSize;\n                        if (typeof props.minDecibels === \"number\") this.node.minDecibels = props.minDecibels;\n                        if (typeof props.maxDecibels === \"number\") this.node.maxDecibels = props.maxDecibels;\n                        if (typeof props.smoothingTimeConstant === \"number\") this.node.smoothingTimeConstant = props.smoothingTimeConstant;\n                    } catch (e) {\n                        this.error((e as Error).message);\n                    }\n                } else {\n                    this.error(\"Invalid options\");\n                }\n            } else {\n                try {\n                    if (inlet === 1) {\n                        this.node.getFloatTimeDomainData(data as I[1]);\n                        this.outlet(1, data as I[1]);\n                    } else if (inlet === 2) {\n                        this.node.getByteTimeDomainData(data as I[2]);\n                        this.outlet(2, data as I[2]);\n                    } else if (inlet === 3) {\n                        this.node.getFloatFrequencyData(data as I[3]);\n                        this.outlet(3, data as I[3]);\n                    } else if (inlet === 4) {\n                        this.node.getByteFrequencyData(data as I[4]);\n                        this.outlet(4, data as I[4]);\n                    }\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { TMeta } from \"../../types\";\n\nexport default class AnyNode extends JSPAudioNode<AudioNode, {}, [AudioNode, ...null[]], null[]> {\n    static description = \"WebAudio AudioNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, AudioNode instance to set the node.\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"Node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }];\n    state = { node: undefined as AudioNode };\n    handleInlet = ({ data, inlet }: { data: any; inlet: number }) => {\n        if (inlet === 0) {\n            try {\n                if (data instanceof AudioNode) {\n                    this.disconnectAudio();\n                    this.state.node = data;\n                    const inlets = this.node.numberOfInputs || 1;\n                    const outlets = this.node.numberOfOutputs;\n                    const factoryMeta = AnyNode.meta;\n                    const inlet0 = factoryMeta.inlets[0];\n                    const inlet1 = factoryMeta.inlets[1];\n                    const outlet0 = factoryMeta.inlets[0];\n                    this.inletAudioConnections = [{ node: this.node, index: 0 }];\n                    factoryMeta.inlets = [inlet0];\n                    for (let i = 1; i < inlets; i++) {\n                        factoryMeta.inlets[i] = inlet1;\n                    }\n                    for (let i = 0; i < outlets; i++) {\n                        factoryMeta.outlets[i] = outlet0;\n                    }\n                    for (let i = 0; i < this.node.numberOfInputs; i++) {\n                        this.inletAudioConnections[i] = { node: this.node, index: i };\n                    }\n                    for (let i = 0; i < this.node.numberOfOutputs; i++) {\n                        this.outletAudioConnections[i] = { node: this.node, index: i };\n                    }\n                    this.meta = factoryMeta;\n                    this.inlets = inlets;\n                    this.outlets = outlets;\n                    this.connectAudio();\n                }\n            } catch (e) {\n                this.error((e as Error).message);\n                return this;\n            }\n        }\n        return this;\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"inlet\", this.handleInlet);\n    }\n}\n","import * as React from \"react\";\nimport JSPAudioNode from \"./AudioNode\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\nimport { DefaultUI } from \"../BaseUI\";\n\ninterface Constraints extends MediaTrackConstraintSet {\n    deviceId: string;\n    autoGainControl: boolean;\n    channelCount: number;\n    echoCancellation: boolean;\n    latency: number;\n    noiseSuppression: boolean;\n    sampleRate: number;\n    sampleSize: number;\n}\nexport class AudioIn extends JSPAudioNode<MediaStreamAudioSourceNode, { search: string; stream: MediaStream }, [string | Bang], [null, MediaStreamAudioSourceNode], [string], Constraints> {\n    static description = \"Get Audio input from device name or ID\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"string to fetch device name or ID, bang to output Node\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: MediaStreamAudioSourceNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"string\",\n        optional: false,\n        description: \"Device name or ID\"\n    }];\n    static props: TPropsMeta<Omit<Constraints, \"deviceId\">> = {\n        autoGainControl: {\n            type: \"boolean\",\n            default: false,\n            description: \"Automatic gain control\"\n        },\n        channelCount: {\n            type: \"number\",\n            default: undefined,\n            description: \"The number of independent channels of sound\"\n        },\n        echoCancellation: {\n            type: \"boolean\",\n            default: false,\n            description: \"Remove all the sound being played from the input signals recorded by the microphones\"\n        },\n        latency: {\n            type: \"number\",\n            default: undefined,\n            description: \"The latency or latency range, in seconds\"\n        },\n        noiseSuppression: {\n            type: \"boolean\",\n            default: false,\n            description: \"Noise suppression\"\n        },\n        sampleRate: {\n            type: \"number\",\n            default: undefined,\n            description: \"The sample rate in samples per second for the audio data\"\n        },\n        sampleSize: {\n            type: \"number\",\n            default: undefined,\n            description: \"The linear sample size in bits\"\n        }\n    };\n    state = { node: undefined as MediaStreamAudioSourceNode, stream: undefined as MediaStream, search: undefined as string };\n    handleDeviceChange = async () => {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const enums = devices.filter(d => d.kind === \"audioinput\").map(d => d.label || d.deviceId);\n        const { meta } = this;\n        meta.args[0] = { ...AudioIn.args[0], type: \"enum\", enums };\n        this.meta = meta;\n    };\n    newSearch = async (search?: string) => {\n        this.state.search = search;\n        let deviceId: string;\n        if (search) {\n            const devices = await navigator.mediaDevices.enumerateDevices();\n            const device = devices.find(d => d.kind === \"audioinput\" && (d.deviceId === search || d.label === search));\n            if (device) deviceId = device.deviceId;\n        }\n        this.state.stream = await navigator.mediaDevices.getUserMedia({ audio: this.getConstraints(deviceId) });\n        if (this.state.stream) this.resetNode();\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"postInit\", () => {\n            const search = this.box.args[0];\n            navigator.mediaDevices.addEventListener(\"devicechange\", this.handleDeviceChange);\n            this.handleDeviceChange();\n            this.newSearch(search);\n        });\n        this.on(\"updateArgs\", (args: [string?]) => {\n            this.newSearch(args[0]);\n        });\n        this.on(\"updateProps\", () => {\n            this.newSearch(this.state.search);\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    await this.newSearch(data);\n                }\n                if (this.node) this.outlet(1, this.node);\n            }\n        });\n        this.on(\"destroy\", () => {\n            navigator.mediaDevices.removeEventListener(\"devicechange\", this.handleDeviceChange);\n        });\n    }\n    getConstraints(deviceId?: string): Constraints {\n        return {\n            deviceId,\n            autoGainControl: this.getProp(\"autoGainControl\"),\n            channelCount: this.getProp(\"channelCount\"),\n            echoCancellation: this.getProp(\"echoCancellation\"),\n            latency: this.getProp(\"latency\"),\n            noiseSuppression: this.getProp(\"noiseSuppression\"),\n            sampleRate: this.getProp(\"sampleRate\"),\n            sampleSize: this.getProp(\"sampleSize\")\n        };\n    }\n    resetNode() {\n        this.disconnectAudio();\n        if (this.state.stream) {\n            this.node = this.audioCtx.createMediaStreamSource(this.state.stream);\n            this.node.channelInterpretation = \"discrete\";\n        }\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\nconst supportSetSinkId = window.MediaStreamAudioDestinationNode && HTMLMediaElement.prototype.setSinkId;\nexport class AudioOut extends JSPAudioNode<MediaStreamAudioDestinationNode | AudioDestinationNode, { search?: string; audio?: HTMLAudioElement; msadn?: MediaStreamAudioDestinationNode }, [string | Bang], [null, MediaStreamAudioDestinationNode | AudioDestinationNode], [string], Constraints> {\n    static description = \"Get Audio output from device name or ID (if supported)\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, string to fetch device name or ID, bang to output Node\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: `Instance: ${supportSetSinkId ? \"MediaStreamAudioDestinationNode | \" : \"\"}AudioDestinationNode`\n    }];\n    static args = supportSetSinkId ? AudioIn.args : [];\n    static props = supportSetSinkId ? AudioIn.props : {};\n    static UI = supportSetSinkId ? class AudioOutUI extends DefaultUI<AudioOut> {\n        refContainer = React.createRef<HTMLDivElement>();\n        componentDidMount() {\n            super.componentDidMount();\n            const div = this.refContainer.current;\n            const { audio } = this.object.state;\n            if (div && audio) {\n                audio.style.display = \"none\";\n                div.appendChild(audio);\n            }\n        }\n        render() {\n            const textContainerProps = { ...this.props.textContainerProps, ref: this.refContainer };\n            return (\n                <DefaultUI textContainerProps={textContainerProps} {...this.props} />\n            );\n        }\n    } : DefaultUI;\n    state = supportSetSinkId ? { node: this.audioCtx.destination, msadn: this.audioCtx.createMediaStreamDestination(), audio: new Audio(), search: undefined as string } : { node: this.audioCtx.destination };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    handleDeviceChange = async () => {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const enums = devices.filter(d => d.kind === \"audiooutput\").map(d => d.label || d.deviceId);\n        const { meta } = this;\n        meta.args[0] = { ...AudioOut.args[0], type: \"enum\", enums };\n        this.meta = meta;\n    };\n    newSearch = async (search?: string) => {\n        if (!supportSetSinkId) return;\n        this.state.search = search;\n        if (!search || search === \"default\") {\n            this.resetNode();\n            return;\n        }\n        const { audio } = this.state;\n        let deviceId = audio.sinkId || \"default\";\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const device = devices.find(d => d.kind === \"audiooutput\" && (d.deviceId === search || d.label === search));\n        if (device) deviceId = device.deviceId;\n        if (audio.sinkId !== deviceId) {\n            if (audio.played) audio.pause();\n            audio.setSinkId(deviceId);\n            audio.play();\n        }\n        this.resetNode(true);\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", () => {\n            this.node.channelInterpretation = \"discrete\";\n            if (supportSetSinkId) {\n                this.state.msadn.channelInterpretation = \"discrete\";\n                const { audio, msadn } = this.state;\n                const { stream } = msadn;\n                if (\"srcObject\" in audio) audio.srcObject = stream;\n                else (audio as HTMLAudioElement).src = URL.createObjectURL(stream);\n                const search = this.box.args[0];\n                navigator.mediaDevices.addEventListener(\"devicechange\", this.handleDeviceChange);\n                this.on(\"destroy\", () => {\n                    navigator.mediaDevices.removeEventListener(\"devicechange\", this.handleDeviceChange);\n                });\n                this.handleDeviceChange();\n                this.newSearch(search);\n            }\n        });\n        this.on(\"updateArgs\", (args: [string]) => {\n            this.newSearch(args[0]);\n        });\n        this.on(\"updateProps\", () => {\n            this.newSearch(this.state.search);\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    await this.newSearch(data);\n                }\n                if (this.node) this.outlet(1, this.node);\n            }\n        });\n    }\n    getConstraints(deviceId?: string): Constraints {\n        return {\n            deviceId,\n            autoGainControl: this.getProp(\"autoGainControl\"),\n            channelCount: this.getProp(\"channelCount\"),\n            echoCancellation: this.getProp(\"echoCancellation\"),\n            latency: this.getProp(\"latency\"),\n            noiseSuppression: this.getProp(\"noiseSuppression\"),\n            sampleRate: this.getProp(\"sampleRate\"),\n            sampleSize: this.getProp(\"sampleSize\")\n        };\n    }\n    resetNode(msadn?: boolean) {\n        if (msadn) {\n            if (this.node !== this.state.msadn) {\n                this.disconnectAudio();\n                this.node = this.state.msadn;\n                this.inletAudioConnections[0] = { node: this.node, index: 0 };\n                this.connectAudio();\n            }\n        } else {\n            if (this.node !== this.audioCtx.destination) {\n                this.disconnectAudio();\n                this.node = this.audioCtx.destination;\n                this.inletAudioConnections[0] = { node: this.node, index: 0 };\n                this.connectAudio();\n            }\n        }\n    }\n}\n","import { SemanticICONS } from \"semantic-ui-react\";\nimport { Bang, DefaultObject } from \"../Base\";\n\nexport default abstract class JSPAudioNode<T extends AudioNode = AudioNode, S = {}, I extends [Bang | any, ...any[]] = [Bang], O extends (null | any | T)[] = [], A extends any[] = any[], P = {}> extends DefaultObject<{}, { node: T } & S, I, O, A, P> {\n    static package = \"WebAudio\";\n    static icon: SemanticICONS = \"volume up\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n    static description = \"WebAudio Nodes implementation\";\n    set node(nodeIn: T) {\n        this.state.node = nodeIn;\n    }\n    get node() {\n        return this.state.node;\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\ntype I = [Bang, TBPF, TBPF, TBPF, TBPF, BiquadFilterType];\nexport default class Biquad extends JSPAudioNode<BiquadFilterNode, {}, I, [null, BiquadFilterNode], [], BiquadFilterOptions> {\n    static description = \"WebAudio BiquadFilterNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection (1 channel), bang to output BiquadFilterNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"frequency: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"detune: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"Q: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"gain: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"enum\",\n        enums: [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"],\n        description: 'type: \"lowpass\" | \"highpass\" | \"bandpass\" | \"lowshelf\" | \"highshelf\" | \"peaking\" | \"notch\" | \"allpass\"'\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: BiquadFilterNode\"\n    }];\n    static props: TMeta[\"props\"] = {\n        frequency: {\n            type: \"number\",\n            default: 350,\n            description: \"Initial frequency\"\n        },\n        detune: {\n            type: \"number\",\n            default: 100,\n            description: \"Initial detune\"\n        },\n        Q: {\n            type: \"number\",\n            default: 100,\n            description: \"Initial Q\"\n        },\n        gain: {\n            type: \"number\",\n            default: 25,\n            description: \"Initial gain\"\n        },\n        type: {\n            type: \"enum\",\n            enums: [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"],\n            default: \"lowpass\",\n            description: 'Initial type: \"lowpass\" | \"highpass\" | \"bandpass\" | \"lowshelf\" | \"highshelf\" | \"peaking\" | \"notch\" | \"allpass\"'\n        }\n    };\n    static isBiquadFilterType = (x: any): x is BiquadFilterType => [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"].indexOf(x) >= 0;\n    state = { node: this.audioCtx.createBiquadFilter() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.frequency }, { node: this.node.detune }, { node: this.node.Q }, { node: this.node.gain }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateProps\", (props) => {\n            const paramMap = [\"frequency\", \"detune\", \"Q\", \"gain\"] as const;\n            paramMap.forEach((key) => {\n                try {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            });\n            if (typeof props.type === \"string\") {\n                try {\n                    this.node.type = props.type;\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"frequency\", \"detune\", \"Q\", \"gain\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 5) {\n                if (Biquad.isBiquadFilterType(data)) this.node.type = data;\n            } else if (inlet > 0 && inlet < 5) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta, TBPF, TPropsMeta } from \"../../types\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport PatcherAudio from \"../../audio/PatcherAudio\";\n\ntype I = [Bang | boolean | number | PatcherAudio | AudioBuffer, TBPF, TBPF, boolean, number, number];\ntype P = Omit<Required<AudioBufferSourceOptions>, \"buffer\">;\ninterface S {\n    node: AudioBufferSourceNode;\n    playing: boolean;\n}\n\nexport default class BufferSrc extends JSPAudioNode<AudioBufferSourceNode, S, I, [null, Bang, AudioBufferSourceNode], [], P> {\n    static description = \"WebAudio AudioBufferSourceNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Bang to output AudioBufferSourceNode instance, boolean/number to start/stop, AudioBuffer/PatcherAudio to set buffer\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"playbackRate: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"detune: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"boolean\",\n        description: \"loop\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"loopStart (seconds)\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"loopEnd (seconds)\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: AudioBufferSourceNode\"\n    }];\n    static props: TPropsMeta<P> = {\n        detune: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial detune, detuning of playback in cents\"\n        },\n        playbackRate: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial playbackRate, The speed at which to render the audio stream\"\n        },\n        loop: {\n            type: \"boolean\",\n            default: false,\n            description: \"Initial loop, Indicates if the region of audio data designated by loopStart and loopEnd should be played continuously in a loop\"\n        },\n        loopStart: {\n            type: \"number\",\n            default: 0,\n            description: \"An optional playhead position where looping should begin if the loop attribute is true. If <=0 or > duration, loop will end at the end of the buffer.\"\n        },\n        loopEnd: {\n            type: \"number\",\n            default: 0,\n            description: \"An optional playhead position where looping should end if the loop attribute is true. If <=0 or > duration, loop will end at the end of the buffer.\"\n        }\n    };\n    state: S = { node: this.audioCtx.createBufferSource(), playing: false };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.playbackRate }, { node: this.node.detune }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    handleEnded = () => {\n        this.outlet(1, new Bang());\n        this.resetNode();\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 2;\n            this.node.addEventListener(\"ended\", this.handleEnded);\n        });\n        this.on(\"updateProps\", (props) => {\n            const paramMap = [\"playbackRate\", \"detune\"] as const;\n            const numberParamMap = [\"loopStart\", \"loopEnd\"] as const;\n            const booleanParamMap = [\"loop\"] as const;\n            try {\n                paramMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                });\n                numberParamMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key] = props[key];\n                });\n                booleanParamMap.forEach((key) => {\n                    if (typeof props[key] === \"boolean\") this.node[key] = props[key];\n                });\n            } catch (e) {\n                this.error(e.message);\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"playbackRate\", \"detune\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) {\n                    this.outlet(2, this.node);\n                } else if (typeof data === \"boolean\" || typeof data === \"number\") {\n                    if (data) {\n                        if (!this.state.playing) {\n                            this.node.start();\n                            this.setState({ playing: true });\n                        }\n                    } else {\n                        if (this.state.playing) {\n                            this.node.stop();\n                            this.resetNode();\n                        }\n                    }\n                } else if (data instanceof AudioBuffer) {\n                    if (data !== this.node.buffer) this.resetNode(data);\n                } else if (data instanceof PatcherAudio) {\n                    if (data.audioBuffer !== this.node.buffer) this.resetNode(data.audioBuffer);\n                }\n            } else if (inlet >= 1 && inlet <= 2) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            } else if (inlet === 3) {\n                if (typeof data === \"boolean\") {\n                    try {\n                        this.node.loop = data;\n                    } catch (e) {\n                        this.error(e.message);\n                    }\n                }\n            } else if (inlet > 3) {\n                if (typeof data === \"number\") {\n                    try {\n                        if (inlet === 4) this.node.loopStart = data;\n                        else if (inlet === 5) this.node.loopEnd = data;\n                    } catch (e) {\n                        this.error(e.message);\n                    }\n                }\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.playing) this.node.stop();\n            this.node.removeEventListener(\"ended\", this.handleEnded);\n        });\n    }\n    resetNode(bufferIn?: AudioBuffer) {\n        this.disconnectAudio();\n        this.setState({ playing: false });\n        this.node.removeEventListener(\"ended\", this.handleEnded);\n        const { loop, loopStart, loopEnd } = this.node;\n        const buffer = bufferIn || this.node.buffer;\n        const playbackRate = this.node.playbackRate.value;\n        const detune = this.node.detune.value;\n        this.node = this.audioCtx.createBufferSource();\n        this.node.buffer = buffer;\n        this.node.loop = loop;\n        this.node.loopStart = loopStart;\n        this.node.loopEnd = loopEnd;\n        this.node.playbackRate.setValueAtTime(playbackRate, this.audioCtx.currentTime);\n        this.node.detune.setValueAtTime(detune, this.audioCtx.currentTime);\n        this.node.addEventListener(\"ended\", this.handleEnded);\n        this.inletAudioConnections[0] = { node: this.node, index: 0 };\n        this.inletAudioConnections[1] = { node: this.node.playbackRate };\n        this.inletAudioConnections[2] = { node: this.node.detune };\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\ntype I = [Bang, TBPF, TBPF, TBPF, TBPF, TBPF];\nexport default class Compressor extends JSPAudioNode<DynamicsCompressorNode, {}, I, [null, DynamicsCompressorNode], [], DynamicsCompressorOptions> {\n    static description = \"WebAudio DynamicsCompressorNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection (1 channel), bang to output DynamicsCompressorNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"threshold: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"knee: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"ratio: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"attack: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"release: bpf or node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: DynamicsCompressorNode\"\n    }];\n    static props: TMeta[\"props\"] = {\n        threshold: {\n            type: \"number\",\n            default: -24,\n            description: \"Initial threshold\"\n        },\n        knee: {\n            type: \"number\",\n            default: 30,\n            description: \"Initial knee\"\n        },\n        ratio: {\n            type: \"number\",\n            default: 12,\n            description: \"Initial ratio\"\n        },\n        attack: {\n            type: \"number\",\n            default: 0.003,\n            description: \"Initial attack\"\n        },\n        release: {\n            type: \"number\",\n            default: 0.25,\n            description: \"Initial release\"\n        }\n    };\n    state = { node: this.audioCtx.createDynamicsCompressor() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.threshold }, { node: this.node.knee }, { node: this.node.ratio }, null, { node: this.node.attack }, { node: this.node.release }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 6;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateProps\", (props) => {\n            const paramMap = [\"threshold\", \"knee\", \"ratio\", \"attack\", \"release\"] as const;\n            paramMap.forEach((key) => {\n                try {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            });\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"threshold\", \"knee\", \"ratio\", \"attack\", \"release\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet > 0 && inlet < 6) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\nexport default class Constant extends JSPAudioNode<ConstantSourceNode, {}, [Bang, TBPF], [null, ConstantSourceNode], [number]> {\n    static description = \"WebAudio ConstantSourceNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output ConstantSourceNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"offset: bpf or node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ConstantSourceNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial offset\"\n    }];\n    state = { node: this.audioCtx.createConstantSource() };\n    inletAudioConnections = [null, { node: this.node.offset }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            this.node.start();\n        });\n        this.on(\"updateArgs\", (args) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.offset.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.offset, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\ntype I = [Bang, AudioBuffer, boolean];\ntype O = [null, ConvolverNode];\nexport default class Convolver extends JSPAudioNode<ConvolverNode, {}, I, O, [], { normalize: boolean }> {\n    static description = \"WebAudio ConvolverNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output ConvolverNode instance\"\n    }, {\n        isHot: true,\n        type: \"object\",\n        description: \"buffer (2-4 channels): AudioBuffer\"\n    }, {\n        isHot: true,\n        type: \"boolean\",\n        description: \"normalize: boolean\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (2-4 channels)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ConvolverNode\"\n    }];\n    static props: TMeta[\"props\"] = {\n        normalize: {\n            type: \"boolean\",\n            default: true,\n            description: \"Controls whether the impulse response from the buffer will be scaled by an equal-power normalization\"\n        }\n    };\n    state = { node: this.audioCtx.createConvolver() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateProps\", (props) => {\n            try {\n                if (typeof props.normalize === \"boolean\") this.node.normalize = props.normalize;\n            } catch (e) {\n                this.error((e as Error).message);\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                if (data instanceof AudioBuffer) {\n                    try {\n                        this.node.buffer = data as I[1];\n                    } catch (e) {\n                        this.error((e as Error).message);\n                    }\n                } else {\n                    this.error(\"Invalid ArrayBuffer\");\n                }\n            } else if (inlet === 2) {\n                if (typeof data === \"boolean\") {\n                    try {\n                        this.node.normalize = data;\n                    } catch (e) {\n                        this.error((e as Error).message);\n                    }\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\nexport default class Delay extends JSPAudioNode<DelayNode, {}, [Bang, TBPF], [null, DelayNode], [number]> {\n    static description = \"WebAudio DelayNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output DelayNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"delayTime: bpf or node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: DelayNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial delayTime\"\n    }];\n    state = { node: this.audioCtx.createDelay() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.delayTime }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateArgs\", (args) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.delayTime.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.delayTime, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\nexport default class Destination extends JSPAudioNode<AudioDestinationNode, {}, [Bang], [AudioDestinationNode]> {\n    static description = \"WebAudio DestinationNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output DestinationNode instance\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Instance: DestinationNode\"\n    }];\n    state = { node: this.audioCtx.destination };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(0, this.node);\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\nexport default class Gain extends JSPAudioNode<GainNode, {}, [Bang, TBPF], [null, GainNode], [number]> {\n    static description = \"WebAudio GainNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output GainNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"gain: bpf or node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: GainNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial gain\"\n    }];\n    state = { node: this.audioCtx.createGain() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.gain }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateArgs\", (args) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.gain.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.gain, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { isNumberArray } from \"../../../utils/utils\";\nimport { TMeta } from \"../../types\";\n\ntype I = [Bang, number[], number[]];\nexport default class IIRFilter extends JSPAudioNode<IIRFilterNode, { feedforward: number[]; feedback: number[] }, I, [null, IIRFilterNode], [number[], number[]], {}> {\n    static description = \"WebAudio IIRFilterNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection (1 channel), bang to output IIRFilterNode instance\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"feedforward, A sequence of coefficients, change will reconstruct the node: number[]\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"feedback, A sequence of coefficients, change will reconstruct the node: number[]\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: IIRFilterNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"object\",\n        optional: false,\n        default: [],\n        description: \"feedforward, A sequence of coefficients: number[]\"\n    }, {\n        type: \"object\",\n        optional: false,\n        default: [],\n        description: \"feedback, A sequence of coefficients: number[]\"\n    }];\n    state = { node: undefined as IIRFilterNode, feedforward: [] as number[], feedback: [] as number[] };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n        });\n        this.on(\"update\", ({ args }) => {\n            if (isNumberArray(args[0])) this.state.feedforward = args[0];\n            if (isNumberArray(args[1])) this.state.feedback = args[1];\n            this.resetNode();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                if (isNumberArray(data)) this.state.feedforward = data;\n                this.resetNode();\n            } else if (inlet === 2) {\n                if (isNumberArray(data)) this.state.feedback = data;\n                this.resetNode();\n            }\n        });\n    }\n    resetNode() {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createIIRFilter(this.state.feedforward, this.state.feedback);\n        this.node.channelInterpretation = \"discrete\";\n        this.inletAudioConnections[0] = { node: this.node, index: 0 };\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\ntype I = [Bang | HTMLMediaElement];\nexport default class Media extends JSPAudioNode<MediaElementAudioSourceNode, { element: HTMLMediaElement }, I, [null, MediaElementAudioSourceNode], [], {}> {\n    static description = \"WebAudio MediaElementAudioSourceNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"object\",\n        description: \"HTMLMediaElement to construct node, bang to output MediaElementAudioSourceNode instance\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: MediaElementAudioSourceNode\"\n    }];\n    state = { node: undefined as MediaElementAudioSourceNode, element: undefined as HTMLMediaElement };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) {\n                    if (this.node) this.outlet(1, this.node);\n                } else if (data instanceof HTMLMediaElement) {\n                    this.state.element = data;\n                    this.resetNode();\n                    this.outlet(1, this.node);\n                }\n            }\n        });\n    }\n    resetNode() {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createMediaElementSource(this.state.element);\n        this.node.channelInterpretation = \"discrete\";\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\nexport default class Merger extends JSPAudioNode<ChannelMergerNode, {}, [Bang | number, ...null[]], [null, ChannelMergerNode], [number]> {\n    static description = \"WebAudio ChannelMergerNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output DestinationNode instance, number to change inputs\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"Node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (n channels)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ChannelMergerNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        description: \"Number of Inputs\"\n    }];\n    state = { node: null as ChannelMergerNode };\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.outlets = 2;\n        });\n        this.on(\"update\", ({ args }) => {\n            const channelCount = (typeof args[0] === \"number\" && ~~args[0]) > 0 ? ~~args[0] : 6;\n            this.resetNode(channelCount);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"number\") {\n                    const channelCount = ~~data > 0 ? ~~data : 6;\n                    if (this.node && channelCount !== this.node.numberOfInputs) this.resetNode(channelCount);\n                    this.outlet(1, this.node);\n                } else if (isBang(data)) this.outlet(1, this.node);\n            }\n        });\n    }\n    resetNode(channelCount: number) {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createChannelMerger(channelCount);\n        this.node.channelInterpretation = \"discrete\";\n        const factoryMeta = Merger.meta;\n        const bangInlet = factoryMeta.inlets[0];\n        const siganlInlet = factoryMeta.inlets[1];\n        this.inletAudioConnections = [{ node: this.node, index: 0 }];\n        this.outletAudioConnections = [{ node: this.node, index: 0 }];\n        factoryMeta.inlets = [bangInlet];\n        for (let i = 1; i < channelCount; i++) {\n            factoryMeta.inlets[i] = siganlInlet;\n            this.inletAudioConnections[i] = { node: this.node, index: i };\n        }\n        this.meta = factoryMeta;\n        this.inlets = channelCount;\n        this.connectAudio();\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\nexport default class Oscillator extends JSPAudioNode<OscillatorNode, {}, [Bang, TBPF, TBPF, OscillatorType], [null, OscillatorNode], [number, OscillatorType], { detune: number }> {\n    static description = \"WebAudio OscillatorNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output OscillatorNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"frequency: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"detune: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"enum\",\n        enums: [\"sine\", \"square\", \"sawtooth\", \"triangle\", \"custom\"],\n        description: 'type: \"sine\" | \"square\" | \"sawtooth\" | \"triangle\" | \"custom\"'\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: OscillatorNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        default: 440,\n        description: \"Initial frequency\"\n    }, {\n        type: \"enum\",\n        enums: [\"sine\", \"square\", \"sawtooth\", \"triangle\", \"custom\"],\n        optional: true,\n        default: \"sine\",\n        description: 'Initial type: \"sine\" | \"square\" | \"sawtooth\" | \"triangle\" | \"custom\"'\n    }];\n    static props: TMeta[\"props\"] = {\n        detune: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial detune\"\n        }\n    };\n    static isOscillatorType = (x: any): x is OscillatorType => x === \"sine\" || x === \"square\" || x === \"sawtooth\" || x === \"triangle\" || x === \"custom\";\n    state = { node: this.audioCtx.createOscillator() };\n    inletAudioConnections = [null, { node: this.node.frequency }, { node: this.node.detune }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 4;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n            this.node.start();\n        });\n        this.on(\"updateProps\", (props) => {\n            if (typeof props.detune === \"number\") {\n                try {\n                    this.node.detune.setValueAtTime(props.detune, this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n        this.on(\"updateArgs\", (args) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.frequency.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n            if (typeof args[1] === \"string\") {\n                try {\n                    this.node.type = args[1];\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else {\n                try {\n                    if (inlet === 1) {\n                        const bpf = decodeLine(data as TBPF);\n                        this.applyBPF(this.node.frequency, bpf);\n                    } else if (inlet === 2) {\n                        const bpf = decodeLine(data as TBPF);\n                        this.applyBPF(this.node.detune, bpf);\n                    } else if (inlet === 3) {\n                        this.node.type = data as OscillatorType;\n                    }\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF, TPropsMeta } from \"../../types\";\n\ntype I = [Bang, TBPF, TBPF, TBPF, TBPF, TBPF, TBPF, PannerOptions];\nexport default class Panner extends JSPAudioNode<PannerNode, {}, I, [null, PannerNode], [], PannerOptions> {\n    static description = \"WebAudio PannerNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output PannerNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"orientationX: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"orientationY: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"orientationZ: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"positionX: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"positionY: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"positionZ: bpf or node connection\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"options: coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (2 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: PannerNode\"\n    }];\n    static props: TPropsMeta<PannerOptions> = {\n        coneInnerAngle: {\n            type: \"number\",\n            default: 360,\n            description: \"Initial coneInnerAngle\"\n        },\n        coneOuterAngle: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial coneOuterAngle\"\n        },\n        coneOuterGain: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial coneOuterGain\"\n        },\n        distanceModel: {\n            type: \"enum\",\n            enums: [\"linear\", \"inverse\", \"exponential\"],\n            default: \"inverse\",\n            description: 'Initial distanceModel: \"linear\" | \"inverse\" | \"exponential\"'\n        },\n        maxDistance: {\n            type: \"number\",\n            default: 10000,\n            description: \"Initial maxDistance\"\n        },\n        orientationX: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial orientationX\"\n        },\n        orientationY: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial orientationY\"\n        },\n        orientationZ: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial orientationZ\"\n        },\n        panningModel: {\n            type: \"enum\",\n            enums: [\"equalpower\", \"HRTF\"],\n            default: \"equalpower\",\n            description: 'Initial panningModel: \"equalpower\" | \"HRTF\"'\n        },\n        positionX: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial positionX\"\n        },\n        positionY: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial positionY\"\n        },\n        positionZ: {\n            type: \"number\",\n            default: 0,\n            description: \"Initial positionZ\"\n        },\n        refDistance: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial refDistance\"\n        },\n        rolloffFactor: {\n            type: \"number\",\n            default: 1,\n            description: \"Initial rolloffFactor\"\n        }\n    };\n    state = { node: this.audioCtx.createPanner() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.orientationX }, { node: this.node.orientationY }, { node: this.node.orientationZ }, null, { node: this.node.positionX }, { node: this.node.positionY }, { node: this.node.positionZ }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 8;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateProps\", (props) => {\n            const paramMap = [\"orientationX\", \"orientationY\", \"orientationZ\", \"positionX\", \"positionY\", \"positionZ\"] as const;\n            const numberParamMap = [\"coneInnerAngle\", \"coneOuterAngle\", \"coneOuterGain\", \"maxDistance\", \"refDistance\", \"rolloffFactor\"] as const;\n            try {\n                paramMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                });\n                numberParamMap.forEach((key) => {\n                    if (typeof props[key] === \"number\") this.node[key] = props[key];\n                });\n                if (typeof props.distanceModel === \"string\") this.node.distanceModel = props.distanceModel;\n                if (typeof props.panningModel === \"string\") this.node.panningModel = props.panningModel;\n            } catch (e) {\n                this.error(e.message);\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const paramMap = [\"orientationX\", \"orientationY\", \"orientationZ\", \"positionX\", \"positionY\", \"positionZ\"] as const;\n            const numberParamMap = [\"coneInnerAngle\", \"coneOuterAngle\", \"coneOuterGain\", \"maxDistance\", \"refDistance\", \"rolloffFactor\"] as const;\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet > 0 && inlet < 7) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node[paramMap[inlet - 1]], bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            } else if (inlet === 7) {\n                if (typeof data === \"object\") {\n                    const props = data as PannerOptions;\n                    try {\n                        paramMap.forEach((key) => {\n                            if (typeof props[key] === \"number\") this.node[key].setValueAtTime(props[key], this.audioCtx.currentTime);\n                        });\n                        numberParamMap.forEach((key) => {\n                            if (typeof props[key] === \"number\") this.node[key] = props[key];\n                        });\n                        if (typeof props.distanceModel === \"string\") this.node.distanceModel = props.distanceModel;\n                        if (typeof props.panningModel === \"string\") this.node.panningModel = props.panningModel;\n                    } catch (e) {\n                        this.error(e.message);\n                    }\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport TransmitterNode from \"../../worklets/Transmitter\";\nimport PatcherAudio from \"../../audio/PatcherAudio\";\nimport OperableAudioBuffer from \"../../audio/OperableAudioBuffer\";\nimport { TMeta, TPropsMeta } from \"../../types\";\n\ntype I = [boolean | number | PatcherAudio, boolean, number, number];\ninterface P {\n    mono: boolean;\n    channelOffset: number;\n    loop: boolean;\n    loopStart: number;\n    loopEnd: number;\n    append: boolean;\n}\ninterface S {\n    dummyNode: ConstantSourceNode;\n    node: TransmitterNode;\n    audio: PatcherAudio;\n    // overwrittenAudio: PatcherAudio;\n    recording: boolean;\n    $: number;\n    $start: number;\n    $end: number;\n    inPlace: boolean;\n}\n\nexport default class Record extends JSPAudioNode<TransmitterNode, S, I, [number], [], P> {\n    static description = \"Record audio into an audio buffer\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"signal to record, boolean/number to start/stop, AudioBuffer/PatcherAudio to set buffer\"\n    }, {\n        isHot: false,\n        type: \"boolean\",\n        description: \"loop\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"loopStart (seconds)\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"loopEnd (seconds)\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"number\",\n        description: \"sample index writted\"\n    }];\n    static props: TPropsMeta<P> = {\n        mono: {\n            type: \"boolean\",\n            default: false,\n            description: \"Record only one channel\"\n        },\n        channelOffset: {\n            type: \"number\",\n            default: 0,\n            description: \"Record into channels with offset\"\n        },\n        loop: {\n            type: \"boolean\",\n            default: false,\n            description: \"Initial loop, Indicates if the region of audio data designated by loopStart and loopEnd should be played continuously in a loop\"\n        },\n        loopStart: {\n            type: \"number\",\n            default: 0,\n            description: \"An optional playhead position where looping should begin if the loop attribute is true. If <=0 or > duration, loop will end at the end of the buffer.\"\n        },\n        loopEnd: {\n            type: \"number\",\n            default: 0,\n            description: \"An optional playhead position where looping should end if the loop attribute is true. If <=0 or > duration, loop will end at the end of the buffer.\"\n        },\n        append: {\n            type: \"boolean\",\n            default: false,\n            description: \"Allows buffer to growth when recording exceeds the end.\"\n        }\n    };\n    state: S = {\n        node: undefined,\n        audio: undefined,\n        dummyNode: this.audioCtx.createConstantSource(),\n        // overwrittenAudio: undefined,\n        recording: false,\n        $: 0,\n        $start: 0,\n        $end: 0,\n        inPlace: true\n    };\n    handleReceiveBuffer = async (bufferIn: Float32Array[], $total: number) => {\n        if (!this.state.recording) return;\n        const { $, audio } = this.state;\n        const { length, numberOfChannels, sampleRate } = audio;\n        const mono = this.getProp(\"mono\");\n        const channelOffset = this.getProp(\"channelOffset\");\n        const loop = this.getProp(\"loop\");\n        const append = this.getProp(\"append\");\n        const $start = loop ? this.getProp(\"loopStart\") : 0;\n        if ($start >= length) return;\n        const $end = loop ? Math.max($start, this.getProp(\"loopEnd\")) : length;\n        if ($end === $start) return;\n        const range = $end - $start;\n        const bufferSize = bufferIn[0].length;\n        if (mono) bufferIn.splice(1);\n        if (channelOffset) bufferIn.unshift(...new Array(channelOffset));\n        const $target = $ + bufferSize;\n        if (append && !loop && $target > $end) { // extend current buffer\n            const newLength = 2 ** Math.ceil(Math.log(length + sampleRate) / Math.log(2));\n            const newBuffer = new OperableAudioBuffer({ numberOfChannels, length: newLength, sampleRate });\n            for (let i = 0; i < numberOfChannels; i++) {\n                const channel = newBuffer.getChannelData(i);\n                channel.set(audio.audioBuffer.getChannelData(i));\n                if (bufferIn[i]) channel.set(bufferIn[i], $);\n            }\n            audio.audioBuffer = newBuffer;\n            audio.waveform.update($, newLength);\n            this.setState({ $: $target });\n        } else {\n            for (let i = 0; i < numberOfChannels; i++) {\n                const channel = audio.audioBuffer.getChannelData(i);\n                if (bufferIn[i]) {\n                    if ($target > $end) {\n                        if (loop) {\n                            const $copyEnd = $start + (($ - $start + bufferSize) % range);\n                            const buffer = bufferSize > range ? bufferIn[i].subarray(bufferSize - range) : bufferIn[i];\n                            const $sSplit = buffer.length - ($copyEnd - $start);\n                            channel.set(buffer.subarray($sSplit), $start);\n                            channel.set(buffer.subarray(0, $sSplit), $);\n                            this.setState({ $: $copyEnd });\n                            audio.waveform.update($, $end);\n                            audio.waveform.update($start, $copyEnd);\n                        } else {\n                            channel.set(bufferIn[i].subarray(0, $end - $), $);\n                            this.setState({ $: $end });\n                            audio.waveform.update($, $end);\n                        }\n                    } else {\n                        channel.set(bufferIn[i], $);\n                        this.setState({ $: $target });\n                        audio.waveform.update($, $target);\n                    }\n                }\n            }\n        }\n        audio.emit(\"setAudio\");\n        audio.emit(\"changed\");\n        this.outlet(0, this.state.$);\n        if (!append && !loop && this.state.$ === $end) {\n            await this.stop();\n        }\n    };\n    async start() {\n        if (!this.node) return false;\n        this.setState({ $: this.getProp(\"loop\") ? this.getProp(\"loopStart\") : 0 });\n        this.setState({ recording: true });\n        await this.node.reset();\n        await this.node.start();\n        return true;\n    }\n    async stop() {\n        this.setState({ recording: false });\n        if (!this.node) return;\n        await this.node.stop();\n        const { inPlace, $, $end } = this.state;\n        if (!inPlace && $ > $end && $ < this.state.audio.length) {\n            const [audio] = await this.state.audio.split($);\n            this.state.audio.setAudio(audio);\n        }\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 4;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", async () => {\n            await TransmitterNode.register(this.audioCtx.audioWorklet);\n            const node = new TransmitterNode(this.audioCtx);\n            node.handleReceiveBuffer = this.handleReceiveBuffer;\n            this.node = node;\n            this.state.dummyNode.offset.value = 0;\n            this.state.dummyNode.connect(this.node);\n            this.state.dummyNode.start();\n            this.disconnectAudioInlet();\n            this.inletAudioConnections = [{ node: this.node, index: 0 }];\n            this.setState({ node });\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"boolean\" || typeof data === \"number\") {\n                    if (data) {\n                        if (!this.state.recording) {\n                            await this.start();\n                        }\n                    } else {\n                        if (this.state.recording) {\n                            await this.stop();\n                        }\n                    }\n                } else if (data instanceof PatcherAudio) {\n                    this.setState({ audio: data });\n                }\n            } else if (inlet === 1) {\n                if (typeof data === \"boolean\" || typeof data === \"number\") {\n                    this.updateBox({ props: { loop: !!data } });\n                }\n            } else if (inlet === 2) {\n                if (typeof data === \"number\") {\n                    this.updateBox({ props: { loopStart: data } });\n                }\n            } else if (inlet === 3) {\n                if (typeof data === \"number\") {\n                    this.updateBox({ props: { loopEnd: data } });\n                }\n            }\n        });\n        this.on(\"destroy\", async () => {\n            this.state.dummyNode.disconnect();\n            if (this.state.recording) await this.stop();\n            await this.node.destroy();\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\nexport default class Splitter extends JSPAudioNode<ChannelSplitterNode, {}, [Bang], (null | ChannelSplitterNode)[], [number]> {\n    static description = \"WebAudio ChannelSplitterNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output ChannelSplitterNode instance, number to change outputs\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection (1 channel)\"\n    }, {\n        type: \"object\",\n        description: \"Instance: ChannelSplitterNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        description: \"Number of Outputs\"\n    }];\n    state = { node: null as ChannelSplitterNode };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n        });\n        this.on(\"update\", ({ args }) => {\n            const channelCount = (args && typeof args[0] === \"number\" && ~~args[0]) > 0 ? ~~args[0] : 6;\n            this.resetNode(channelCount);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"number\") {\n                    const channelCount = ~~data > 0 ? ~~data : 6;\n                    if (this.node && channelCount !== this.node.numberOfOutputs) this.resetNode(channelCount);\n                    this.outlet(this.outlets - 1, this.node);\n                } else if (isBang(data)) this.outlet(this.outlets - 1, this.node);\n            }\n        });\n    }\n    resetNode(channelCount: number) {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createChannelSplitter(channelCount);\n        this.node.channelInterpretation = \"discrete\";\n        const factoryMeta = Splitter.meta;\n        const signalOutlet = factoryMeta.outlets[0];\n        const nodeOutlet = factoryMeta.outlets[1];\n        this.inletAudioConnections = [{ node: this.node, index: 0 }];\n        this.outletAudioConnections = [];\n        for (let i = 0; i < channelCount; i++) {\n            factoryMeta.outlets[i] = signalOutlet;\n            this.outletAudioConnections[i] = { node: this.node, index: i };\n        }\n        factoryMeta.outlets[channelCount] = nodeOutlet;\n        this.meta = factoryMeta;\n        this.outlets = channelCount + 1;\n        this.connectAudio();\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { decodeLine } from \"../../../utils/utils\";\nimport { TMeta, TBPF } from \"../../types\";\n\nexport default class StereoPanner extends JSPAudioNode<StereoPannerNode, {}, [Bang, TBPF], [null, StereoPannerNode], [number]> {\n    static description = \"WebAudio StereoPannerNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output StereoPannerNode instance\"\n    }, {\n        isHot: false,\n        type: \"signal\",\n        description: \"pan: bpf or node connection\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: StereoPannerNode\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"number\",\n        optional: true,\n        description: \"Initial pan\"\n    }];\n    state = { node: this.audioCtx.createStereoPanner() };\n    inletAudioConnections = [{ node: this.node, index: 0 }, { node: this.node.pan }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateArgs\", (args) => {\n            if (typeof args[0] === \"number\") {\n                try {\n                    this.node.pan.setValueAtTime(args[0], this.audioCtx.currentTime);\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(this.node.pan, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\nexport default class StreamDest extends JSPAudioNode<MediaStreamAudioDestinationNode, {}, [Bang], [MediaStreamAudioDestinationNode, MediaStream]> {\n    static description = \"WebAudio MediaStreamAudioDestinationNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output MediaStreamAudioDestinationNode instance with its stream\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Instance: MediaStreamAudioDestinationNode\"\n    }, {\n        type: \"object\",\n        description: \"Stream\"\n    }];\n    state = { node: this.audioCtx.createMediaStreamDestination() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outletAll([this.node, this.node.stream]);\n            }\n        });\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\ntype I = [Bang | MediaStream];\nexport default class StreamSrc extends JSPAudioNode<MediaStreamAudioSourceNode, { stream: MediaStream }, I, [null, MediaStreamAudioSourceNode], [], {}> {\n    static description = \"WebAudio MediaStreamAudioSourceNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"object\",\n        description: \"MediaStream to construct node, bang to output MediaStreamAudioSourceNode instance\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: MediaStreamAudioSourceNode\"\n    }];\n    state = { node: undefined as MediaStreamAudioSourceNode, stream: undefined as MediaStream };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    this.state.stream = data;\n                    this.resetNode();\n                }\n                if (this.node) this.outlet(1, this.node);\n            }\n        });\n    }\n    resetNode() {\n        this.disconnectAudio();\n        this.node = this.audioCtx.createMediaStreamSource(this.state.stream);\n        this.node.channelInterpretation = \"discrete\";\n        this.outletAudioConnections[0] = { node: this.node, index: 0 };\n        this.connectAudio();\n    }\n}\n","import JSPAudioNode from \"./AudioNode\";\nimport { Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\ntype I = [Bang, Float32Array, OverSampleType];\nexport default class WaveShaper extends JSPAudioNode<WaveShaperNode, {}, I, [null, WaveShaperNode], [], { oversample?: OverSampleType }> {\n    static description = \"WebAudio WaveShaperNode\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Node connection, bang to output WaveShaperNode instance\"\n    }, {\n        isHot: false,\n        type: \"object\",\n        description: \"curve: Float32Array\"\n    }, {\n        isHot: false,\n        type: \"enum\",\n        enums: [\"none\", \"2x\", \"4x\"],\n        description: 'oversample: \"none\" | \"2x\" | \"4x\"'\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"signal\",\n        description: \"Node connection\"\n    }, {\n        type: \"object\",\n        description: \"Instance: WaveShaperNode\"\n    }];\n    static props: TMeta[\"props\"] = {\n        oversample: {\n            type: \"enum\",\n            enums: [\"none\", \"2x\", \"4x\"],\n            default: \"none\",\n            description: \"Initial oversample\"\n        }\n    };\n    state = { node: this.audioCtx.createWaveShaper() };\n    inletAudioConnections = [{ node: this.node, index: 0 }];\n    outletAudioConnections = [{ node: this.node, index: 0 }];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n            this.node.channelInterpretation = \"discrete\";\n        });\n        this.on(\"updateProps\", (props) => {\n            try {\n                if (typeof props.oversample === \"string\") this.node.oversample = props.oversample;\n            } catch (e) {\n                this.error(e.message);\n            }\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(1, this.node);\n            } else if (inlet === 1) {\n                try {\n                    if (data instanceof Float32Array) this.node.curve = data;\n                    else this.error(\"The curve is not a Float32Array.\");\n                } catch (e) {\n                    this.error(e.message);\n                }\n            } else if (inlet === 2) {\n                try {\n                    if (typeof data === \"string\") this.node.oversample = data as OverSampleType;\n                    else this.error(\"Incorrect oversample type.\");\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        });\n    }\n}\n","import { WebAudioModule, WamNode } from \"wamsdk/src/api\";\nimport { Bang, BaseObject, isBang } from \"../Base\";\nimport { TMIDIEvent, TBPF, TMeta, TInletMeta, TOutletMeta } from \"../../types\";\nimport { DOMUI, DOMUIState } from \"../BaseUI\";\nimport { isMIDIEvent, decodeLine } from \"../../../utils/utils\";\n\nclass PluginUI extends DOMUI<Plugin> {\n    state: DOMUIState = { ...this.state, children: this.object.state.children };\n}\n\nexport type S = { node: WamNode; plugin: WebAudioModule; children: ChildNode[] };\ntype I = [Bang | number | string | TMIDIEvent | Record<string, TBPF>, ...TBPF[]];\ntype O = (null | WamNode)[];\nexport default class Plugin extends BaseObject<{}, S, I, O, [string], {}, DOMUIState> {\n    static description = \"Dynamically load WebAudioModule\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"A bang to output the instance, url to load, or a param-bpf map, or a MIDI event\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"WebAudioModule instance\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"string\",\n        optional: false,\n        description: \"WebAudioModule URL\"\n    }];\n    static UI = PluginUI;\n    state = { merger: undefined, splitter: undefined, node: undefined, plugin: undefined, children: [] } as S;\n    async load(url: string) {\n        let WAPCtor: typeof WebAudioModule;\n        let plugin: WebAudioModule;\n        try {\n            WAPCtor = (await import(/* webpackIgnore: true */url)).default;\n        } catch (e) {\n            this.error(e.message);\n        }\n        let node: AudioNode;\n        let element: HTMLElement;\n        try {\n            plugin = await WAPCtor.createInstance(this.audioCtx);\n            node = plugin.audioNode;\n            element = await plugin.createGui() as HTMLElement;\n        } catch (e) {\n            if (e) this.error((e as Error).message);\n            return;\n        }\n        this.disconnectAudio();\n        this.handleDestroy();\n        element.style.width = \"100%\";\n        element.style.height = \"100%\";\n        element.style.position = \"absolute\";\n        this.state.children = [element];\n        this.updateUI({ children: this.state.children });\n        node.channelInterpretation = \"discrete\";\n        const inlets = node.numberOfInputs;\n        const outlets = node.numberOfOutputs;\n        Object.assign(this.state, { node, plugin } as S);\n        const Ctor = this.constructor as typeof Plugin;\n        const firstInletMeta = Ctor.inlets[0];\n        const firstInletSignalMeta: TInletMeta = { ...firstInletMeta, type: \"signal\" };\n        const inletMeta: TInletMeta = { isHot: false, type: \"signal\", description: \"Node connection\" };\n        const audioParamInletMeta: TInletMeta = { isHot: false, type: \"number\", description: \": bpf or node connection\" };\n        const outletMeta: TOutletMeta = { type: \"signal\", description: \"Node connection\" };\n        const lastOutletMeta = Ctor.outlets[0];\n        const factoryMeta = Ctor.meta;\n        for (let i = 0; i < inlets; i++) {\n            if (i === 0) factoryMeta.inlets[i] = inlets ? firstInletSignalMeta : firstInletMeta;\n            else factoryMeta.inlets[i] = inletMeta;\n            this.inletAudioConnections[i] = { node, index: i };\n        }\n        for (let i = 0; i < outlets; i++) {\n            factoryMeta.outlets[i] = outletMeta;\n            this.outletAudioConnections[i] = { node, index: i };\n        }\n        factoryMeta.outlets[outlets] = lastOutletMeta;\n        const paramInfo = await plugin.audioNode.getParameterInfo();\n        const params = Object.keys(paramInfo);\n        for (let i = inlets || 1; i < (inlets || 1) + params.length; i++) {\n            const path = params[i - (inlets || 1)];\n            const param = paramInfo[path];\n            const { defaultValue, minValue, maxValue } = param;\n            factoryMeta.inlets[i] = { ...audioParamInletMeta, description: `${path}${audioParamInletMeta.description}: ${defaultValue} (${minValue} - ${maxValue})` };\n        }\n        this.meta = factoryMeta;\n        this.inlets = (inlets || 1) + params.length;\n        this.outlets = outlets + 1;\n        this.connectAudio();\n        this.outlet(this.outlets - 1, this.state.node);\n    }\n    handleDestroy = () => {\n        const { node, plugin } = this.state;\n        if (node) {\n            node.disconnect();\n            node.disconnectEvents();\n        }\n        if (plugin) {\n            plugin.audioNode.destroy();\n            if (this.state.children?.[0]) plugin.destroyGui(this.state.children[0] as Element);\n        }\n    };\n    handlePreInit = () => undefined as any;\n    handlePostInit = async () => {\n        if (this.box.args[0]) await this.load(this.box.args[0]);\n        this.on(\"updateArgs\", this.handleUpdateArgs);\n    };\n    handleUpdateArgs = async (args: Partial<[string]>): Promise<void> => {\n        if (typeof args[0] === \"string\") await this.load(this.box.args[0]);\n    };\n    handleInlet = async ({ data, inlet }: { data: I[number]; inlet: number }) => {\n        if (inlet === 0) {\n            if (isBang(data)) {\n                if (this.state.node) this.outlet(this.outlets - 1, this.state.node);\n            } else if (typeof data === \"string\") {\n                await this.load(data);\n            } else if (isMIDIEvent(data)) {\n                const bytes = Array.from(data) as [number, number, number];\n                if (this.state.node) this.state.node.scheduleEvents({ type: \"midi\", data: { bytes }, time: this.audioCtx.currentTime });\n            } else if (typeof data === \"object\") {\n                if (this.state.node) {\n                    for (const key in data) {\n                        try {\n                            const bpf = decodeLine((data as Record<string, TBPF>)[key]);\n                            let t = 0;\n                            bpf.forEach((a) => {\n                                if (a.length > 1) t += a[1];\n                                this.state.node.scheduleEvents({ type: \"automation\", data: { id: key, value: a[0], normalized: false }, time: this.audioCtx.currentTime + t });\n                            });\n                            // else this.state.node.setParam(key, bpf[bpf.length - 1][0]);\n                        } catch (e) {\n                            this.error(e.message);\n                        }\n                    }\n                }\n            }\n        } else {\n            const con = this.inletAudioConnections[inlet].node;\n            if (con instanceof AudioParam) {\n                try {\n                    const bpf = decodeLine(data as TBPF);\n                    this.applyBPF(con, bpf);\n                } catch (e) {\n                    this.error(e.message);\n                }\n            }\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", this.handlePreInit);\n        this.on(\"postInit\", this.handlePostInit);\n        this.on(\"inlet\", this.handleInlet);\n        this.on(\"destroy\", this.handleDestroy);\n    }\n}\n","import { Bang, DefaultObject, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\nexport default class audioContext extends DefaultObject<{}, {}, [Bang], [AudioContext]> {\n    static description = \"Get currrent patcher's audio context\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output current audio context\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Current audio context\"\n    }];\n    state = {};\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.outlet(0, this.patcher.audioCtx);\n            }\n        });\n    }\n}\n","import { Bang, DefaultObject, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\n\nexport default class audioWorklet extends DefaultObject<{}, {}, [Bang, string], [AudioWorklet, Bang]> {\n    static description = \"Get currrent patcher's audio worklet from context\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"bang\",\n        description: \"Output current audio worklet\"\n    }, {\n        isHot: true,\n        type: \"string\",\n        description: \"Code to add as module\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Current audio worklet\"\n    }, {\n        type: \"bang\",\n        description: \"Output a bang while module is added\"\n    }];\n    state = {};\n    audioWorklet: AudioWorklet;\n    handleInlet: (e: { data: any; inlet: number }) => Promise<void> = async ({ data, inlet }) => {\n        if (inlet === 0) {\n            if (isBang(data)) this.outlet(0, this.audioWorklet);\n        } else if (inlet === 1) {\n            if (typeof data === \"string\") {\n                try {\n                    const url = window.URL.createObjectURL(new Blob([data], { type: \"text/javascript\" }));\n                    await this.audioWorklet.addModule(url);\n                    this.outlet(1, new Bang());\n                } catch (e) {\n                    this.error((e as Error).message);\n                }\n            }\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n            if (!this.patcher.audioCtx.audioWorklet) this.error(\"AudioWorklet not found.\");\n            else this.audioWorklet = this.patcher.audioCtx.audioWorklet;\n        });\n        this.on(\"inlet\", this.handleInlet);\n    }\n}\n","import * as React from \"react\";\nimport { Modal, SemanticICONS, StrictModalProps } from \"semantic-ui-react\";\nimport AudioFile from \"../../audio/AudioFile\";\nimport TempAudioFile from \"../../audio/TempAudioFile\";\nimport PatcherAudio from \"../../audio/PatcherAudio\";\nimport AudioEditor from \"../../audio/AudioEditor\";\nimport AudioEditorUI from \"../../../components/editors/audio/AudioEditorUI\";\nimport { DefaultObject, Bang, isBang } from \"../Base\";\nimport { TMeta } from \"../../types\";\nimport { ProjectItemEventMap } from \"../../file/ProjectItem\";\nimport { DefaultPopupUI, DefaultPopupUIProps, DefaultPopupUIState } from \"../BaseUI\";\n\ninterface BufferUIState {\n    audio: PatcherAudio;\n    timestamp: number;\n    editor: AudioEditor;\n    dockEditor: AudioEditor;\n}\n\nexport class BufferUI extends DefaultPopupUI<Buffer, {}, BufferUIState> {\n    state: BufferUIState & DefaultPopupUIState = {\n        ...this.state,\n        audio: this.object.state.audio,\n        timestamp: performance.now(),\n        editor: undefined,\n        dockEditor: undefined\n    };\n    static dockable = true;\n    async loadEditor() {\n        const key = this.props.inDock ? \"editor\" : \"dockEditor\";\n        const editor = new AudioEditor(this.object.state.audio);\n        await editor.init();\n        editor.on(\"changed\", this.handleChanged);\n        this.setState({ timestamp: performance.now(), [key as \"editor\"]: editor }, () => editor.setActive());\n    }\n    unloadEditor() {\n        const key = this.props.inDock ? \"editor\" : \"dockEditor\";\n        const editor = this.state[key];\n        if (!editor) return;\n        editor.off(\"changed\", this.handleChanged);\n        editor.destroy();\n        this.setState({ timestamp: performance.now(), [key as \"editor\"]: undefined }, () => this.props.editor.setActive());\n    }\n    handleChanged = () => {\n        const editor = this.props.inDock ? this.state.editor : this.state.dockEditor;\n        if (editor.isTemporary) editor.save();\n    };\n    handleDoubleClick = async () => {\n        if (!this.editor.state.locked) return;\n        if (!this.state.audio) return;\n        this.unloadEditor();\n        await this.loadEditor();\n        this.setState({ modalOpen: true });\n    };\n    handleClose = () => {\n        this.unloadEditor();\n        this.setState({ modalOpen: false });\n    };\n    handleMouseDownModal = (e: React.MouseEvent) => e.stopPropagation();\n    componentDidMount() {\n        super.componentDidMount();\n        if (this.props.inDock) this.loadEditor();\n    }\n    componentDidUpdate(prevProps: Readonly<DefaultPopupUIProps>, prevState: Readonly<BufferUIState & DefaultPopupUIState>) {\n        const key = this.props.inDock ? \"editor\" : \"dockEditor\";\n        const editor = this.state[key];\n        if (prevState.audio !== this.state.audio) {\n            if (editor) {\n                this.unloadEditor();\n                this.loadEditor();\n            }\n        }\n        if (prevProps.inDock !== this.props.inDock) {\n            if (this.props.inDock) {\n                this.loadEditor();\n            } else {\n                if (editor) {\n                    this.unloadEditor();\n                }\n            }\n        }\n        if (editor) {\n            if (prevState.width !== this.state.width || prevState.height !== this.state.height) {\n                editor.onUiResized();\n            }\n        }\n        super.componentDidUpdate(prevProps, prevState);\n    }\n    componentWillUnmount() {\n        this.unloadEditor();\n        super.componentWillUnmount();\n    }\n    render() {\n        const editor = this.props.inDock ? this.state.editor : this.state.dockEditor;\n        const content = <div className=\"editor-container\" style={{ height: \"100%\", width: \"100%\", display: \"flex\", position: \"relative\" }}>\n            {\n                editor\n                    ? <AudioEditorUI key={this.state.timestamp} editor={editor} env={this.props.object.patcher.env} lang={this.props.object.patcher.env.language} />\n                    : undefined\n            }\n        </div>;\n        const children = (\n            <Modal.Content style={{ height: \"100%\", width: \"100%\", position: \"relative\" }} onMouseDown={this.handleMouseDownModal}>\n                {content}\n            </Modal.Content>\n        );\n        if (this.props.inDock) return children;\n        const containerProps = { ...this.props.containerProps };\n        if (!containerProps.onDoubleClick) containerProps.onDoubleClick = this.handleDoubleClick;\n        const modalProps: StrictModalProps & { onKeyDown: any } = { ...this.props.modalProps, children, className: \"audio-editor\", open: this.state.modalOpen, onClose: this.handleClose, onKeyDown: undefined, basic: true, size: \"fullscreen\", closeIcon: true };\n        return <DefaultPopupUI {...this.props} modalProps={modalProps} containerProps={containerProps} />;\n    }\n}\n\ninterface BufferState {\n    key: string;\n    audio: PatcherAudio;\n    file: AudioFile | TempAudioFile;\n    numberOfChannels: number;\n    length: number;\n    sampleRate: number;\n}\n\nexport default class Buffer extends DefaultObject<{}, BufferState, [Bang | File | ArrayBuffer | AudioBuffer | PatcherAudio, File | ArrayBuffer | AudioBuffer | PatcherAudio, string | number], [PatcherAudio, Bang], [string | number, number, number, number], {}, BufferUIState> {\n    static package = \"WebAudio\";\n    static icon: SemanticICONS = \"volume up\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n    static description = \"Audio File Decoder\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Bang to output stored buffer, file to decode, AudioBuffer or PatcherAudio to store then output it as PatcherAudio.\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"File to decode, AudioBuffer or PatcherAudio to store the buffer.\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"Set variable name.\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"anything\",\n        description: \"PatcherAudio\"\n    }, {\n        type: \"bang\",\n        description: \"Output a bang while the PatcherAudio buffer object is loaded/changed.\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"anything\",\n        optional: true,\n        description: \"Variable name\"\n    }, {\n        type: \"number\",\n        optional: true,\n        description: \"Initialize buffer's number of channels\"\n    }, {\n        type: \"number\",\n        optional: true,\n        description: \"Initialize buffer's length in samples\"\n    }, {\n        type: \"number\",\n        optional: true,\n        description: \"Initialize buffer's sample rate\"\n    }];\n    static UI = BufferUI;\n    state: BufferState = { key: this.box.args[0]?.toString(), audio: undefined, file: undefined, numberOfChannels: 1, length: this.audioCtx.sampleRate, sampleRate: this.audioCtx.sampleRate };\n    subscribe() {\n        super.subscribe();\n        const assertBuffer = (audio: PatcherAudio) => {\n            if (!audio) return false;\n            const { numberOfChannels, length, sampleRate } = this.state;\n            return audio.numberOfChannels === numberOfChannels && audio.length === length && audio.sampleRate === sampleRate;\n        };\n        const handleFilePathChanged = () => {\n            this.setState({ key: this.state.file?.projectPath });\n        };\n        const handleSaved = async (e: ProjectItemEventMap[\"saved\"]) => {\n            if (e.instance === this.state.audio) return;\n            await reload();\n        };\n        const subsribeItem = async () => {\n            const { audio, file } = this.state;\n            await audio.addObserver(this);\n            if (file) {\n                file.on(\"destroyed\", reload);\n                file.on(\"nameChanged\", handleFilePathChanged);\n                file.on(\"pathChanged\", handleFilePathChanged);\n                file.on(\"saved\", handleSaved);\n            }\n        };\n        const unsubscribeItem = async () => {\n            const { audio, file } = this.state;\n            if (file) {\n                file.off(\"destroyed\", reload);\n                file.off(\"nameChanged\", handleFilePathChanged);\n                file.off(\"pathChanged\", handleFilePathChanged);\n                file.off(\"saved\", handleSaved);\n            }\n            await audio.removeObserver(this);\n        };\n        const reload = async () => {\n            if (this.state.audio) await unsubscribeItem();\n            const { key } = this.state;\n            let audio: PatcherAudio;\n            try {\n                const { item, newItem } = await this.getSharedItem(key, \"audio\", async () => {\n                    const { numberOfChannels, length, sampleRate } = this.state;\n                    audio = await PatcherAudio.fromSilence(this.patcher.project, numberOfChannels, length, sampleRate);\n                    return audio;\n                });\n                if (newItem) {\n                    audio.file = item;\n                } else {\n                    audio = await item.instantiate();\n                }\n                this.setState({ audio, file: item });\n                this.updateUI({ audio });\n            } catch (error) {\n                this.error(error);\n            } finally {\n                await subsribeItem();\n                this.outlet(1, new Bang());\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 2;\n        });\n        this.on(\"updateArgs\", (args) => {\n            if (!this.state.audio) return;\n            const oldKey = this.state.key;\n            const key = args[0]?.toString();\n            const numberOfChannels = typeof args[1] === \"number\" ? ~~args[1] : 1;\n            const length = typeof args[2] === \"number\" ? ~~args[2] : this.audioCtx.sampleRate;\n            const sampleRate = typeof args[3] === \"number\" ? ~~args[3] : this.audioCtx.sampleRate;\n            this.setState({ key, numberOfChannels, length, sampleRate });\n            if (key !== oldKey || !assertBuffer(this.state.audio)) {\n                reload();\n            }\n        });\n        this.on(\"postInit\", reload);\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    if (data instanceof PatcherAudio) {\n                        this.state.audio.setAudio(data);\n                    } else if (data instanceof AudioBuffer) {\n                        const audio = await PatcherAudio.fromNativeAudioBuffer(this.patcher.project, data);\n                        this.state.audio.setAudio(audio);\n                    } else {\n                        let audioBuffer: AudioBuffer;\n                        try {\n                            const ab = data instanceof ArrayBuffer ? data : await (data as File).arrayBuffer();\n                            audioBuffer = await this.patcher.audioCtx.decodeAudioData(ab);\n                        } catch (e) {\n                            this.error(\"Decode File failed.\");\n                            return;\n                        }\n                        const audio = await PatcherAudio.fromNativeAudioBuffer(this.patcher.project, audioBuffer);\n                        this.state.audio.setAudio(audio);\n                    }\n                }\n                this.outlet(0, this.state.audio);\n            } else if (inlet === 1) {\n                if (data instanceof PatcherAudio) {\n                    this.state.audio.setAudio(data);\n                } else if (data instanceof AudioBuffer) {\n                    const audio = await PatcherAudio.fromNativeAudioBuffer(this.patcher.project, data);\n                    this.state.audio.setAudio(audio);\n                } else {\n                    let audioBuffer: AudioBuffer;\n                    try {\n                        const ab = data instanceof ArrayBuffer ? data : await (data as File).arrayBuffer();\n                        audioBuffer = await this.patcher.audioCtx.decodeAudioData(ab);\n                    } catch (e) {\n                        this.error(\"Decode File failed.\");\n                        return;\n                    }\n                    const audio = await PatcherAudio.fromNativeAudioBuffer(this.patcher.project, audioBuffer);\n                    this.state.audio.setAudio(audio);\n                }\n            } else if (inlet === 2) {\n                if (typeof data === \"string\" || typeof data === \"number\") {\n                    this.setState({ key: data?.toString() });\n                    reload();\n                }\n            }\n        });\n        this.on(\"destroy\", unsubscribeItem);\n    }\n}\n","import audioContext from \"./audioContext\";\nimport audioWorklet from \"./audioWorklet\";\nimport AnyNode from \"./AnyNode\";\nimport Constant from \"./Constant\";\nimport Oscillator from \"./Oscillator\";\nimport Destination from \"./Destination\";\nimport Splitter from \"./Splitter\";\nimport Merger from \"./Merger\";\nimport Gain from \"./Gain\";\nimport Analyser from \"./Analyser\";\nimport Biquad from \"./Biquad\";\nimport Convolver from \"./Convolver\";\nimport Delay from \"./Delay\";\nimport Compressor from \"./Compressor\";\nimport IIRFilter from \"./IIRFilter\";\nimport Media from \"./Media\";\nimport StreamDest from \"./StreamDestination\";\nimport StreamSrc from \"./StreamSource\";\nimport Panner from \"./Panner\";\nimport StereoPanner from \"./StereoPanner\";\nimport WaveShaper from \"./WaveShaper\";\nimport { AudioIn, AudioOut } from \"./AudioIO\";\nimport Plugin from \"./WebAudioPlugin\";\nimport Buffer from \"./buffer\";\nimport BufferSrc from \"./BufferSource\";\nimport Record from \"./Record\";\n/*\nconst {\n    BaseAudioContext,\n    AudioContext,\n    webkitAudioContext,\n    AudioParam,\n    AudioNode,\n    AudioScheduledSourceNode,\n    OscillatorNode,\n    GainNode,\n    AudioDestinationNode,\n    ChannelSplitterNode\n} = window;\nconst WebAudioAPI: Record<string, any> = {\n    BaseAudioContext,\n    AudioContext,\n    webkitAudioContext,\n    AudioParam,\n    AudioNode,\n    AudioScheduledSourceNode,\n    OscillatorNode,\n    GainNode,\n    AudioDestinationNode,\n    ChannelSplitterNode\n};\nconst outs: TPackage = {};\nfor (const key in WebAudioAPI) {\n    outs[key] = Importer.import(key, WebAudioAPI[key]);\n}*/\nexport default {\n    // ...outs,\n    audioContext,\n    audioWorklet,\n    \"node~\": AnyNode,\n    \"constant~\": Constant,\n    \"oscillator~\": Oscillator,\n    \"gain~\": Gain,\n    \"destination~\": Destination,\n    \"splitter~\": Splitter,\n    \"merger~\": Merger,\n    \"analyser~\": Analyser,\n    \"biquad~\": Biquad,\n    \"convolver~\": Convolver,\n    \"delay~\": Delay,\n    \"compressor~\": Compressor,\n    \"iir~\": IIRFilter,\n    \"media~\": Media,\n    \"streamdest~\": StreamDest,\n    \"streamsrc~\": StreamSrc,\n    \"panner~\": Panner,\n    \"pan~\": StereoPanner,\n    \"waveshaper~\": WaveShaper,\n    \"audioIn~\": AudioIn,\n    \"audioOut~\": AudioOut,\n    \"plugin~\": Plugin,\n    \"buffer~\": Buffer,\n    \"bufferSource~\": BufferSrc,\n    \"record~\": Record\n};\n"],"sourceRoot":""}