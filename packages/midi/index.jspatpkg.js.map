{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@electrosmith/package-midi/./src/index.ts","webpack://@electrosmith/package-midi/./src/objects/base.ts","webpack://@electrosmith/package-midi/./src/objects/devices.ts","webpack://@electrosmith/package-midi/./src/objects/midiFormat.ts","webpack://@electrosmith/package-midi/./src/objects/midiIn.ts","webpack://@electrosmith/package-midi/./src/objects/midiOut.ts","webpack://@electrosmith/package-midi/./src/objects/midiParse.ts","webpack://@electrosmith/package-midi/./src/objects/monoVoice.ts","webpack://@electrosmith/package-midi/./src/package-info.ts","webpack://@electrosmith/package-midi/./src/sdk.ts","webpack://@electrosmith/package-midi/webpack/bootstrap","webpack://@electrosmith/package-midi/webpack/runtime/create fake namespace object","webpack://@electrosmith/package-midi/webpack/runtime/define property getters","webpack://@electrosmith/package-midi/webpack/runtime/hasOwnProperty shorthand","webpack://@electrosmith/package-midi/webpack/runtime/make namespace object","webpack://@electrosmith/package-midi/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../index\";\r\nimport { DefaultObject } from \"../sdk\";\r\n\r\nexport default class MidiObject<\r\n    D = {},\r\n    S = {},\r\n    I extends any[] = any[],\r\n    O extends any[] = any[],\r\n    A extends any[] = any[],\r\n    P = {},\r\n    U = {},\r\n    E = {}\r\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import type {\n  IArgsMeta,\n  IInletsMeta,\n  IOutletsMeta,\n  IPropsMeta,\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport type { StrictDropdownItemProps } from \"semantic-ui-react\";\nimport { Bang, isBang } from \"../sdk\";\nimport MidiObject from \"./base\";\n\ninterface IS {\n  midiAccess: WebMidi.MIDIAccess;\n}\ninterface P {\n  autoUpdate: boolean;\n}\n\nexport default class midiDevices extends MidiObject<\n  {},\n  {},\n  [Bang | WebMidi.MIDIPortType[]],\n  [WebMidi.MIDIPort[], StrictDropdownItemProps[]],\n  WebMidi.MIDIPortType[],\n  P\n> {\n  static description = \"Enumerate MIDI devices\";\n  static inlets: IInletsMeta = [\n    {\n      isHot: true,\n      type: \"object\",\n      description: \"Bang to enumerate, MIDIPortType[] to use a filter\",\n    },\n  ];\n  static outlets: IOutletsMeta = [\n    {\n      type: \"object\",\n      description: \"Array of MIDIPort\",\n    },\n    {\n      type: \"object\",\n      description: \"Array of DropdownItemProps\",\n    },\n  ];\n  static args: IArgsMeta = [\n    {\n      type: \"enum\",\n      varLength: true,\n      optional: true,\n      enums: [\"input\", \"output\"],\n      default: [\"input\", \"output\"],\n      description: \"Output only kinds of devices\",\n    },\n  ];\n  static props: IPropsMeta<P> = {\n    autoUpdate: {\n      type: \"boolean\",\n      default: true,\n      description: \"Auto output devices when devices change\",\n    },\n  };\n  _ = { midiAccess: undefined as WebMidi.MIDIAccess };\n  handleDeviceChange = async () => {\n    if (!this.getProp(\"autoUpdate\")) return;\n    const filters = this.args.slice();\n    if (!filters.length) filters.push(\"input\", \"output\");\n    const { midiAccess } = this._;\n    if (!midiAccess) {\n      this.error(\"MIDIAccess not available.\");\n      return;\n    }\n    const devices: WebMidi.MIDIPort[] = [];\n    if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach((v) => devices.push(v));\n    if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach((v) => devices.push(v));\n    const options = devices.map((d, key) => {\n      const { type, name, id } = d;\n      return {\n        key,\n        icon: { input: \"sign-in\", output: \"sign-out\" }[type],\n        text: name || id,\n        value: id,\n      };\n    });\n    this.outletAll([devices, options]);\n  };\n  subscribe() {\n    super.subscribe();\n    this.on(\"preInit\", () => {\n      this.inlets = 1;\n      this.outlets = 2;\n    });\n    this.on(\"postInit\", async () => {\n      try {\n        const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\n        this._.midiAccess = midiAccess;\n        midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\n        if (this.getProp(\"autoUpdate\")) this.handleDeviceChange();\n      } catch (e) {\n        this.error(e);\n      }\n    });\n    this.on(\"inlet\", async ({ data, inlet }) => {\n      if (inlet === 0) {\n        let filters: WebMidi.MIDIPortType[];\n        if (isBang(data)) {\n          filters = this.args.slice();\n          if (!filters.length) filters.push(\"input\", \"output\");\n        } else {\n          filters = data.slice();\n        }\n        const { midiAccess } = this._;\n        if (!midiAccess) {\n          this.error(\"MIDIAccess not available.\");\n          return;\n        }\n        const devices: WebMidi.MIDIPort[] = [];\n        if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach((v) => devices.push(v));\n        if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach((v) => devices.push(v));\n        const options = devices.map((d, key) => {\n          const { type, name, id } = d;\n          return {\n            key,\n            icon: { input: \"sign-in\", output: \"sign-out\" }[type],\n            text: name || id,\n            value: id,\n          };\n        });\n        this.outletAll([devices, options]);\n      }\n    });\n    this.on(\"destroy\", () => {\n      if (this._.midiAccess)\n        this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\n    });\n  }\n}\n","import type {\r\n  IInletsMeta,\r\n  IOutletsMeta,\r\n  IPropsMeta,\r\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport MidiObject from \"./base\";\r\n\r\ninterface IS {\r\n  channel: number;\r\n}\r\n\r\ntype I = [Iterable<number>, Iterable<number>, Iterable<number>, number, number, number, number];\r\n\r\ntype O = [Uint8Array];\r\n\r\ninterface P {\r\n  pitchBendResolution: \"7bit\" | \"float\" | \"14bit\";\r\n}\r\n\r\nexport default class midiFormat extends MidiObject<{}, {}, I, O, [string], P> {\r\n  static description = \"Prepare data in the form of a MIDI message\";\r\n  static outlets: IOutletsMeta = [\r\n    {\r\n      type: \"object\",\r\n      description: \"Raw MIDI message: Uint8Array\",\r\n    },\r\n  ];\r\n  static inlets: IInletsMeta = [\r\n    {\r\n      isHot: true,\r\n      type: \"object\",\r\n      description: \"Note-on and Note-off [pitch, velocity]: Iterable<number>\",\r\n    },\r\n    {\r\n      isHot: true,\r\n      type: \"object\",\r\n      description: \"Poly Key Pressure [key, value]: Iterable<number>\",\r\n    },\r\n    {\r\n      isHot: true,\r\n      type: \"object\",\r\n      description: \"Control Change [controller, value]: Iterable<number>\",\r\n    },\r\n    {\r\n      isHot: true,\r\n      type: \"number\",\r\n      description: \"Program Change\",\r\n    },\r\n    {\r\n      isHot: true,\r\n      type: \"number\",\r\n      description: \"Aftertouch\",\r\n    },\r\n    {\r\n      isHot: true,\r\n      type: \"number\",\r\n      description: \"Pitch Bend\",\r\n    },\r\n    {\r\n      isHot: false,\r\n      type: \"number\",\r\n      description: \"MIDI Channel\",\r\n    },\r\n  ];\r\n  static props: IPropsMeta<P> = {\r\n    pitchBendResolution: {\r\n      type: \"enum\",\r\n      enums: [\"14bit\", \"7bit\", \"float\"],\r\n      default: \"float\",\r\n      description:\r\n        \"Pitch Bend Resolution (14-bit (-8192 to 8191), 7-bit (0 to 128), float (-1 to 1))\",\r\n    },\r\n  };\r\n  _: IS = { channel: 0 };\r\n  subscribe() {\r\n    super.subscribe();\r\n    this.on(\"preInit\", () => {\r\n      this.inlets = 7;\r\n      this.outlets = 1;\r\n    });\r\n    this.on(\"inlet\", ({ data, inlet }) => {\r\n      if (inlet < 3) {\r\n        try {\r\n          let [data1, data2] = data as Iterable<number>;\r\n          if (typeof data1 !== \"number\" || typeof data2 !== \"number\") {\r\n            throw new Error(\"Input MIDI data is not numbers\");\r\n          }\r\n          data1 = Math.round(Math.max(0, Math.min(127, data1)));\r\n          data2 = Math.round(Math.max(0, Math.min(127, data2)));\r\n          if (inlet === 0) {\r\n            this.outlet(0, new Uint8Array([0x90 + this._.channel, data1, data2]));\r\n          } else if (inlet === 1) {\r\n            this.outlet(0, new Uint8Array([0xa0 + this._.channel, data1, data2]));\r\n          } else if (inlet === 2) {\r\n            this.outlet(0, new Uint8Array([0xb0 + this._.channel, data1, data2]));\r\n          }\r\n        } catch (e) {\r\n          this.error(e);\r\n        }\r\n      } else if (inlet >= 3) {\r\n        if (typeof data !== \"number\") {\r\n          this.error(\"Input MIDI data is not number\");\r\n          return;\r\n        }\r\n        const data1 = Math.round(Math.max(0, Math.min(127, data)));\r\n        if (inlet === 3) {\r\n          this.outlet(0, new Uint8Array([0xc0 + this._.channel, data1]));\r\n        } else if (inlet === 4) {\r\n          this.outlet(0, new Uint8Array([0xd0 + this._.channel, data1]));\r\n        } else if (inlet === 5) {\r\n          const hires = this.getProp(\"pitchBendResolution\");\r\n          if (hires === \"7bit\") {\r\n            this.outlet(0, new Uint8Array([0xe0 + this._.channel, 0, data1]));\r\n          } else if (hires === \"float\") {\r\n            const data = ~~((Math.max(-1, Math.min(1, data1)) + 1) * 0.5 * 16383);\r\n            this.outlet(0, new Uint8Array([0xe0 + this._.channel, data & 0x7f, data >> 7]));\r\n          } else {\r\n            const data = ~~Math.max(-8192, Math.min(8191, data1)) + 8192;\r\n            this.outlet(0, new Uint8Array([0xe0 + this._.channel, data & 0x7f, data >> 7]));\r\n          }\r\n        } else if (inlet === 6) {\r\n          this._.channel = Math.min(15, data1 - 1);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import type {\r\n  IArgsMeta,\r\n  IInletsMeta,\r\n  IOutletsMeta,\r\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./base\";\r\n\r\ninterface IS {\r\n  midiAccess: WebMidi.MIDIAccess;\r\n  search: string;\r\n  port: WebMidi.MIDIInput;\r\n}\r\n\r\nexport default class midiIn extends MidiObject<\r\n  {},\r\n  {},\r\n  [string | Bang],\r\n  [Uint8Array, WebMidi.MIDIInput],\r\n  [string]\r\n> {\r\n  static description = \"Get MIDI input from device name or ID\";\r\n  static inlets: IInletsMeta = [\r\n    {\r\n      isHot: true,\r\n      type: \"anything\",\r\n      description: \"string to fetch device name or ID, bang to output MIDI port instance\",\r\n    },\r\n  ];\r\n  static outlets: IOutletsMeta = [\r\n    {\r\n      type: \"object\",\r\n      description: \"MIDI message: Uint8Array\",\r\n    },\r\n    {\r\n      type: \"object\",\r\n      description: \"Instance: MIDIPort\",\r\n    },\r\n  ];\r\n  static args: IArgsMeta = [\r\n    {\r\n      type: \"string\",\r\n      optional: true,\r\n      description: \"Device name or ID\",\r\n    },\r\n  ];\r\n  _: IS = {\r\n    midiAccess: undefined as WebMidi.MIDIAccess,\r\n    search: undefined as string,\r\n    port: undefined as WebMidi.MIDIInput,\r\n  };\r\n  handleDeviceChange = async () => {\r\n    const { midiAccess } = this._;\r\n    if (!midiAccess) {\r\n      this.error(\"MIDIAccess not available.\");\r\n      return;\r\n    }\r\n\r\n    const devices: WebMidi.MIDIInput[] = [];\r\n    midiAccess.inputs.forEach((v) => devices.push(v));\r\n    const enums = devices.map((d) => d.name || d.id);\r\n    const { meta } = this;\r\n    meta.args[0] = { ...midiIn.args[0], type: \"enum\", enums };\r\n    this.setMeta(meta);\r\n  };\r\n  handleMIDIMessage = (e: WebMidi.MIDIMessageEvent) => this.outlet(0, e.data);\r\n  newSearch = async (search?: string) => {\r\n    this._.search = search;\r\n    const { midiAccess } = this._;\r\n    if (!midiAccess) {\r\n      this.error(\"MIDIAccess not available.\");\r\n      return;\r\n    }\r\n    const devices: WebMidi.MIDIInput[] = [];\r\n    midiAccess.inputs.forEach((v) => devices.push(v));\r\n\r\n    let found = false;\r\n\r\n    for (let i = 0; i < devices.length; i++) {\r\n      const port = devices[i];\r\n      if (!search || port.id === search || port.name === search) {\r\n        found = true;\r\n        if (port !== this._.port) {\r\n          if (this._.port) this._.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\r\n          this._.port = port;\r\n          port.addEventListener(\"midimessage\", this.handleMIDIMessage);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!found) this.info(\"Unable to find requested MIDI device for input.\");\r\n  };\r\n  subscribe() {\r\n    super.subscribe();\r\n    this.on(\"preInit\", () => {\r\n      this.inlets = 1;\r\n      this.outlets = 2;\r\n    });\r\n    this.on(\"postInit\", async () => {\r\n      const search = this.args[0];\r\n\r\n      try {\r\n        const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n        this._.midiAccess = midiAccess;\r\n        midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\r\n        this.handleDeviceChange();\r\n        if (search) {\r\n          this.newSearch(search);\r\n        }\r\n      } catch (e) {\r\n        this.error(e);\r\n      }\r\n    });\r\n    this.on(\"updateArgs\", (args: [string?]) => {\r\n      this.newSearch(args[0]);\r\n    });\r\n    this.on(\"updateProps\", () => {\r\n      this.newSearch(this._.search);\r\n    });\r\n    this.on(\"inlet\", async ({ data, inlet }) => {\r\n      if (inlet === 0) {\r\n        if (!isBang(data)) {\r\n          await this.newSearch(data);\r\n        }\r\n        if (this._.port) this.outlet(1, this._.port);\r\n      }\r\n    });\r\n    this.on(\"destroy\", () => {\r\n      if (this._.midiAccess)\r\n        this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\r\n      if (this._.port) this._.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\r\n    });\r\n  }\r\n}\r\n","import type {\r\n  IArgsMeta,\r\n  IInletsMeta,\r\n  IOutletsMeta,\r\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./base\";\r\n\r\ninterface IS {\r\n  midiAccess: WebMidi.MIDIAccess;\r\n  search: string;\r\n  port: WebMidi.MIDIOutput;\r\n  timestamp: number;\r\n}\r\n\r\nexport default class midiOut extends MidiObject<\r\n  {},\r\n  IS,\r\n  [Uint8Array | number[] | string | Bang, number],\r\n  [WebMidi.MIDIOutput],\r\n  [string]\r\n> {\r\n  static description = \"Get MIDI output from device name or ID\";\r\n  static inlets: IInletsMeta = [\r\n    {\r\n      isHot: true,\r\n      type: \"anything\",\r\n      description:\r\n        \"Uint8Array or number[] to output MIDI message, string to fetch device name or ID, bang to output MIDI port instance\",\r\n    },\r\n    {\r\n      isHot: false,\r\n      type: \"number\",\r\n      description:\r\n        \"The time at which to begin sending the data to the port. 0 or past means immediate send.\",\r\n    },\r\n  ];\r\n  static outlets: IOutletsMeta = [\r\n    {\r\n      type: \"object\",\r\n      description: \"Instance: MIDIPort\",\r\n    },\r\n  ];\r\n  static args: IArgsMeta = [\r\n    {\r\n      type: \"string\",\r\n      optional: true,\r\n      description: \"Device name or ID\",\r\n    },\r\n  ];\r\n  _: IS = {\r\n    midiAccess: undefined as WebMidi.MIDIAccess,\r\n    search: undefined as string,\r\n    port: undefined as WebMidi.MIDIOutput,\r\n    timestamp: 0,\r\n  };\r\n  handleDeviceChange = async () => {\r\n    const { midiAccess } = this._;\r\n    if (!midiAccess) {\r\n      this.error(\"MIDIAccess not available.\");\r\n      return;\r\n    }\r\n    const devices: WebMidi.MIDIOutput[] = [];\r\n    midiAccess.outputs.forEach((v) => devices.push(v));\r\n    const enums = devices.map((d) => d.name || d.id);\r\n    const { meta } = this;\r\n    meta.args[0] = { ...midiOut.args[0], type: \"enum\", enums };\r\n    this.setMeta(meta);\r\n  };\r\n  newSearch = async (search?: string) => {\r\n    this._.search = search;\r\n    const { midiAccess } = this._;\r\n    if (!midiAccess) {\r\n      this.error(\"MIDIAccess not available.\");\r\n      return;\r\n    }\r\n    let found = false;\r\n\r\n    const devices: WebMidi.MIDIOutput[] = [];\r\n    midiAccess.outputs.forEach((v) => devices.push(v));\r\n    for (let i = 0; i < devices.length; i++) {\r\n      const port = devices[i];\r\n      if (!search || port.id === search || port.name === search) {\r\n        found = true;\r\n        this._.port = port;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!found) this.info(\"Unable to find requested MIDI device for output.\");\r\n  };\r\n  subscribe() {\r\n    super.subscribe();\r\n    this.on(\"preInit\", () => {\r\n      this.inlets = 1;\r\n      this.outlets = 1;\r\n    });\r\n    this.on(\"postInit\", async () => {\r\n      const search = this.box.args[0];\r\n      try {\r\n        const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n        this._.midiAccess = midiAccess;\r\n        midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\r\n        this.handleDeviceChange();\r\n        if (search) {\r\n          this.newSearch(search);\r\n        }\r\n      } catch (e) {\r\n        this.error(e);\r\n      }\r\n    });\r\n    this.on(\"updateArgs\", (args: [string?]) => {\r\n      this.newSearch(args[0]);\r\n    });\r\n    this.on(\"updateProps\", () => {\r\n      this.newSearch(this._.search);\r\n    });\r\n    this.on(\"inlet\", async ({ data, inlet }) => {\r\n      if (inlet === 0) {\r\n        if (!isBang(data)) {\r\n          if (typeof data === \"string\") {\r\n            await this.newSearch(data);\r\n          } else {\r\n            if (this._.port) this._.port.send(data as Uint8Array | number[]);\r\n            return;\r\n          }\r\n        }\r\n        if (this._.port) this.outlet(0, this._.port);\r\n      } else if (inlet === 1) {\r\n        this._.timestamp = +data || (0 as number);\r\n      }\r\n    });\r\n    this.on(\"destroy\", () => {\r\n      if (this._.midiAccess)\r\n        this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\r\n    });\r\n  }\r\n}\r\n","import type {\r\n  IInletsMeta,\r\n  IOutletsMeta,\r\n  IPropsMeta,\r\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport MidiObject from \"./base\";\r\n\r\ntype I = [Iterable<number>];\r\n\r\ntype O = [[number, number], [number, number], [number, number], number, number, number, number];\r\n\r\ninterface P {\r\n  pitchBendResolution: \"14bit\" | \"7bit\" | \"float\";\r\n}\r\n\r\nexport default class midiParse extends MidiObject<{}, {}, I, O, [string], P> {\r\n  static description = \"Interpret raw MIDI data\";\r\n  static inlets: IInletsMeta = [\r\n    {\r\n      isHot: true,\r\n      type: \"anything\",\r\n      description: \"Raw MIDI message: Iterable<number>\",\r\n    },\r\n  ];\r\n  static outlets: IOutletsMeta = [\r\n    {\r\n      type: \"object\",\r\n      description: \"Note-on and Note-off [pitch, velocity]: Uint8Array\",\r\n    },\r\n    {\r\n      type: \"object\",\r\n      description: \"Poly Key Pressure [key, value]: Uint8Array\",\r\n    },\r\n    {\r\n      type: \"object\",\r\n      description: \"Control Change [controller, value]: Uint8Array\",\r\n    },\r\n    {\r\n      type: \"number\",\r\n      description: \"Program Change\",\r\n    },\r\n    {\r\n      type: \"number\",\r\n      description: \"Aftertouch\",\r\n    },\r\n    {\r\n      type: \"number\",\r\n      description: \"Pitch Bend\",\r\n    },\r\n    {\r\n      type: \"number\",\r\n      description: \"MIDI Channel\",\r\n    },\r\n  ];\r\n  static props: IPropsMeta<P> = {\r\n    pitchBendResolution: {\r\n      type: \"enum\",\r\n      enums: [\"14bit\", \"7bit\", \"float\"],\r\n      default: \"float\",\r\n      description:\r\n        \"Pitch Bend Resolution (14-bit (-8192 to 8191), 7-bit (0 to 128), float (-1 to 1))\",\r\n    },\r\n  };\r\n  subscribe() {\r\n    super.subscribe();\r\n    this.on(\"preInit\", () => {\r\n      this.inlets = 1;\r\n      this.outlets = 7;\r\n    });\r\n    this.on(\"inlet\", ({ data, inlet }) => {\r\n      if (inlet === 0) {\r\n        try {\r\n          const [data0, data1, data2] = data;\r\n          const eventType = data0 >> 4;\r\n          const channel = data0 & (0x0f + 1);\r\n          if (eventType === 0x08) {\r\n            this.outlet(0, [data1, 0]);\r\n          } else if (eventType === 0x09) {\r\n            this.outlet(6, channel);\r\n            this.outlet(0, [data1, data2]);\r\n          } else if (eventType === 0x0a) {\r\n            this.outlet(6, channel);\r\n            this.outlet(1, [data1, data2]);\r\n          } else if (eventType === 0x0b) {\r\n            this.outlet(6, channel);\r\n            this.outlet(2, [data1, data2]);\r\n          } else if (eventType === 0x0c) {\r\n            this.outlet(6, channel);\r\n            this.outlet(3, data1);\r\n          } else if (eventType === 0x0d) {\r\n            this.outlet(6, channel);\r\n            this.outlet(4, data1);\r\n          } else if (eventType === 0x0e) {\r\n            this.outlet(6, channel);\r\n            const hires = this.getProp(\"pitchBendResolution\");\r\n            if (hires === \"7bit\") this.outlet(5, data2);\r\n            else if (hires === \"float\") this.outlet(5, ((data1 + (data2 << 7)) / 16383) * 2 - 1);\r\n            else this.outlet(5, -8192 + data1 + (data2 << 7));\r\n          } else {\r\n            this.error(`Unrecognised MIDI event type: ${eventType}`);\r\n          }\r\n        } catch (e) {\r\n          this.error(e);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../sdk\";\nimport type {\n  IInletsMeta,\n  IOutletsMeta,\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class MonoVoice extends DefaultObject<\n  {},\n  {},\n  [any, number],\n  [number, number, number],\n  [],\n  {}\n> {\n  static package = \"midi\";\n  static author = \"Corvus Prudens\";\n  static version = \"1.0.0\";\n  static description = \"Get a mono voice from a MIDI note stream\";\n  static inlets: IInletsMeta = [\n    {\n      isHot: true,\n      type: \"anything\",\n      description: \"Note / velocity pair\",\n    },\n    {\n      isHot: true,\n      type: \"number\",\n      description: \"Pitch bend (in semitones)\",\n    },\n  ];\n  static outlets: IOutletsMeta = [\n    {\n      type: \"number\",\n      description: \"Midi Note Number\",\n    },\n    {\n      type: \"number\",\n      description: \"Velocity\",\n    },\n    {\n      type: \"number\",\n      description: \"Gate\",\n    },\n  ];\n  //   static docs: string = \"utilities/docs/ftom.html\";\n  _ = { notes: [] as number[], lastNote: 69, velocity: 0, bend: 0 };\n  subscribe() {\n    super.subscribe();\n    this.on(\"preInit\", () => {\n      this.inlets = 2;\n      this.outlets = 3;\n    });\n    this.on(\"inlet\", ({ data, inlet }) => {\n      if (inlet === 0) {\n        if (data instanceof Array && data.length >= 2) {\n          const [note, velocity] = data;\n\n          if (velocity > 0 && this._.notes.indexOf(note) === -1) {\n            this._.notes.push(note);\n\n            // This matches the behavior of the hardware\n            if (this._.notes.length > 16) {\n              this._.notes.shift();\n            }\n\n            this._.lastNote = note;\n            this._.velocity = velocity;\n\n            this.outlet(2, 1);\n            this.outlet(1, velocity);\n            this.outlet(0, note + this._.bend);\n          } else if (velocity === 0) {\n            const index = this._.notes.indexOf(note);\n            if (index !== -1) {\n              this._.notes.splice(index, 1);\n            }\n\n            if (this._.notes.length === 0) this.outlet(2, 0);\n            else {\n              this._.lastNote = this._.notes[this._.notes.length - 1];\n              this.outlet(0, this._.lastNote + this._.bend);\n            }\n          }\n        }\n      } else if (inlet === 1) {\n        if (typeof data === \"number\") {\n          this._.bend = data;\n          this.outlet(0, this._.lastNote + this._.bend);\n        }\n      }\n    });\n  }\n}\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    ReactDOM,\r\n    SemanticUI,\r\n    PatcherAudio,\r\n    OperableAudioBuffer,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    DefaultObject,\r\n    BaseUI,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    CodeUI,\r\n    DefaultPopupUI,\r\n    CodePopupUI,\r\n    DOMUI,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    generateRemotedObject,\r\n    Bang,\r\n    isBang,\r\n    TransmitterNode,\r\n    TemporalAnalyserNode,\r\n    SpectralAnalyserNode,\r\n    MathUtils,\r\n    BufferUtils,\r\n    Utils,\r\n    getReactMonacoEditor\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface OperableAudioBuffer extends InstanceType<typeof OperableAudioBuffer> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface TransmitterNode extends InstanceType<typeof TransmitterNode> {}\r\nexport interface TemporalAnalyserNode extends InstanceType<typeof TemporalAnalyserNode> {}\r\nexport interface SpectralAnalyserNode extends InstanceType<typeof SpectralAnalyserNode> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import midiDevices from \"./objects/devices\";\nimport midiFormat from \"./objects/midiFormat\";\nimport midiIn from \"./objects/midiIn\";\nimport midiOut from \"./objects/midiOut\";\nimport midiParse from \"./objects/midiParse\";\nimport midiSequencer from \"./objects/midiSequencer\";\nimport makeNote from \"./objects/makeNote\";\nimport MonoVoice from \"./objects/monoVoice\";\n\nexport default async () => {\n  return {\n    mididevice: midiDevices,\n    midiin: midiIn,\n    midiout: midiOut,\n    midiformat: midiFormat,\n    midiparse: midiParse,\n    // midisequencer: midiSequencer,\n    // makenote: makeNote,\n    monovoice: MonoVoice,\n  };\n};\n"],"names":["data"],"sourceRoot":""}