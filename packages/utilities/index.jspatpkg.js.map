{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@electrosmith/package-utilities/../../../frontend/src/core/message.ts","webpack://@electrosmith/package-utilities/../../common/web/index.ts","webpack://@electrosmith/package-utilities/../../common/web/jsDspObject.ts","webpack://@electrosmith/package-utilities/../../common/web/jsDspProcessor.ts","webpack://@electrosmith/package-utilities/../../common/web/package-info.ts","webpack://@electrosmith/package-utilities/../../common/web/scaleFunction.ts","webpack://@electrosmith/package-utilities/../../common/web/sdk.ts","webpack://@electrosmith/package-utilities/../../common/web/workletCreator.ts","webpack://@electrosmith/package-utilities/./src/objects/block/append.ts","webpack://@electrosmith/package-utilities/./src/objects/block/change.ts","webpack://@electrosmith/package-utilities/./src/objects/block/counter.ts","webpack://@electrosmith/package-utilities/./src/objects/block/dbtopow.ts","webpack://@electrosmith/package-utilities/./src/objects/block/dbtorms.ts","webpack://@electrosmith/package-utilities/./src/objects/block/ftom.ts","webpack://@electrosmith/package-utilities/./src/objects/block/gate.ts","webpack://@electrosmith/package-utilities/./src/objects/block/iter.ts","webpack://@electrosmith/package-utilities/./src/objects/block/loadbang.ts","webpack://@electrosmith/package-utilities/./src/objects/block/loadmess.ts","webpack://@electrosmith/package-utilities/./src/objects/block/mtof.ts","webpack://@electrosmith/package-utilities/./src/objects/block/pack.ts","webpack://@electrosmith/package-utilities/./src/objects/block/powtodb.ts","webpack://@electrosmith/package-utilities/./src/objects/block/prepend.ts","webpack://@electrosmith/package-utilities/./src/objects/block/rmstodb.ts","webpack://@electrosmith/package-utilities/./src/objects/block/scale.ts","webpack://@electrosmith/package-utilities/./src/objects/block/scalec.ts","webpack://@electrosmith/package-utilities/./src/objects/block/select.ts","webpack://@electrosmith/package-utilities/./src/objects/block/swap.ts","webpack://@electrosmith/package-utilities/./src/objects/block/switch.ts","webpack://@electrosmith/package-utilities/./src/objects/block/unpack.ts","webpack://@electrosmith/package-utilities/./src/objects/dsp/mtof_audio.ts","webpack://@electrosmith/package-utilities/./src/objects/dsp/scale_audio.ts","webpack://@electrosmith/package-utilities/./src/objects/dsp/scalec_audio.ts","webpack://@electrosmith/package-utilities/./src/objects/dsp/snapshot.ts","webpack://@electrosmith/package-utilities/./src/sdk.ts","webpack://@electrosmith/package-utilities/webpack/bootstrap","webpack://@electrosmith/package-utilities/webpack/runtime/create fake namespace object","webpack://@electrosmith/package-utilities/webpack/runtime/define property getters","webpack://@electrosmith/package-utilities/webpack/runtime/hasOwnProperty shorthand","webpack://@electrosmith/package-utilities/webpack/runtime/make namespace object","webpack://@electrosmith/package-utilities/./src/index.jspatpkg.ts"],"sourcesContent":["import Bang from \"./objects/base/Bang\";\n\nexport type Token = number | string | Bang;\n\nexport class Message extends Array<Token> {\n    static from(tokens: Token[]) {\n        const newArr = new Message();\n\n        for (let i = 0; i < tokens.length; i++) {\n            newArr[i] = tokens[i];\n        }\n\n        return newArr;\n    }\n\n\n    startsWith(value: Token) {\n        if (this.length) {\n            return this[0] === value;\n        }\n        return false;\n    }\n\n    endsWith(value: Token) {\n        if (this.length) {\n            return this[this.length - 1] === value;\n        }\n        return false;\n    }\n\n    // Produces a function that iterates over two lists,\n    // performs the given operation on any pair of numbers,\n    // and returns the shortest collection between the two\n    arithmetic(op: (a: number, b: number) => number) {\n        return (other: Message) => {\n            const result = new Message();\n            const minLength = Math.min(this.length, other.length);\n\n            for (let i = 0; i < minLength; i++) {\n                if (typeof this[i] === 'number' && typeof other[i] === 'number') {\n                    result.push(op(this[i] as number, other[i] as number));\n                } else {\n                    result.push(this[i]);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\nexport function isMessage(value: any) {\n    return value instanceof Message;\n}\n\nexport function extractFirst(data: any) {\n    if (data instanceof Message || data instanceof Array) {\n        return data[0];\n    }\n\n    return data;\n}\n\nexport function extractFirstIfSingle(data: any) {\n    if ((data instanceof Message || data instanceof Array) && data.length === 1) {\n        return data[0];\n    }\n\n    return data;\n}\n","import packageInfo from \"./package-info\";\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\n\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\n\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\n\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;\n","import { author, name as package_name, version, description } from \"./index\";\nimport { Bang, DefaultObject, DefaultUI } from \"./sdk\";\nimport JsDspProcessor from \"./jsDspProcessor\";\nimport getJsWorkletProcessor from \"./workletCreator\";\n\nexport class JsWorkletManager {\n    static registered_modules: Set<string>;\n\n    private constructor() { }\n\n    static getSet(): Set<string> {\n        if (!JsWorkletManager.registered_modules) {\n            JsWorkletManager.registered_modules = new Set<string>();\n        }\n\n        return JsWorkletManager.registered_modules;\n    }\n\n    public static async addModule(audioCtx: any, name: string, url: string) {\n        let set = JsWorkletManager.getSet();\n        if (!set.has(name)) {\n            set.add(name);\n            await audioCtx.audioWorklet.addModule(url);\n        }\n    }\n}\n\nfunction extractFirst(data: any) {\n    if (data instanceof Array) {\n        return data[0];\n    }\n\n    return data;\n}\n\nexport function generateObject(Processor: typeof JsDspProcessor, name: string, dependencies?: any[], enums?: { name: string, item: any }[]) {\n\n    interface JsDspInternalState {\n        dspId: string;\n        merger: ChannelMergerNode;\n        node: AudioWorkletNode;\n        splitter: ChannelSplitterNode;\n        defaultInputs: number[];\n        constants: ConstantSourceNode[];\n        constantsConnected: boolean[];\n        argsOffset: number;\n    }\n\n    interface Props {\n        smoothInput: number;\n    }\n\n    return class JsDspObject<\n        S = {},\n        I extends [Bang | any, ...any[]] = [Bang],\n        O extends any[] = [],\n        A extends any[] = any[],\n        P = Partial<Props> & Record<string, any>\n    > extends DefaultObject<{}, S, I, O, A, P & Props> {\n\n        static package = package_name;\n        static author = author;\n        static version = version;\n        static description = Processor.description;\n        static inlets = Processor.inlets;\n        static outlets = Processor.outlets;\n        static args = Processor.args;\n        static props = Processor.props;\n        static docs = Processor.docs;\n        static helpFiles = Processor.helpFiles;\n\n        static UI = DefaultUI;\n        _: Partial<JsDspInternalState> = {\n            dspId: name,\n            defaultInputs: [],\n            constants: [],\n            constantsConnected: [],\n            argsOffset: Processor.argsOffset || 0\n        };\n        get audioConnections() {\n            return this.inletLines.map(set => [...set].find(l => !l.disabled && l.isConnectableByAudio)).map(l => !!l);\n        }\n        checkAndFillUnconnected() {\n            const { audioConnections } = this;\n            const { constants, constantsConnected } = this._;\n            if (!this.inlets) return;\n            for (let i = 0; i < this.inlets; i++) {\n                if (audioConnections[i] === constantsConnected[i]) continue;\n                const constant = constants[i];\n                if (audioConnections[i]) {\n                    constant.offset.value = 0;\n                } else if (!audioConnections[i] && !constantsConnected[i]) {\n                    constant.offset.value = this._.defaultInputs[i] || 0;\n                }\n                constantsConnected[i] = audioConnections[i];\n            }\n        }\n        subscribe() {\n            super.subscribe();\n            this.on(\"preInit\", () => {\n                const { inputs, outputs } = { inputs: Processor.inlets.length, outputs: Processor.outlets.length };\n                if (inputs) {\n                    const merger = this.audioCtx.createChannelMerger(inputs);\n                    this._.merger = merger;\n                    for (let i = 0; i < inputs; i++) {\n                        const constant = this.audioCtx.createConstantSource();\n                        this._.constants[i] = constant;\n                        constant.connect(merger, 0, i);\n                        this._.constantsConnected[i] = false;\n                    }\n                }\n                const splitter = this.audioCtx.createChannelSplitter(outputs);\n                this._.splitter = splitter;\n\n                this.inlets = inputs;\n                this.outlets = outputs;\n                this.disconnectAudio();\n                this.inletAudioConnections = this._.constants.map((node) => ({ node: node.offset, index: 0 }));\n                this.outletAudioConnections = new Array(outputs).fill(null).map((v, i) => ({ node: splitter, index: i }));\n                this.connectAudio();\n\n                // this._.defaultInputs = this.meta.args.map(arg => arg.default || 0);\n                for (let i = 0; i < this.inlets; i++) {\n                    if (i >= this._.argsOffset) {\n                        const arg = this.meta.args[i - this._.argsOffset];\n                        if (arg) {\n                            this._.defaultInputs[i] = arg.default ?? 0;\n                        }\n                    } else {\n                        this._.defaultInputs[i] = 0;\n                    }\n                }\n            });\n            this.on(\"postInit\", async () => {\n                // const { dspFactory, faustDspGenerator, dspId, constants, merger, splitter, argsOffset } = this._;\n                const { dspId, constants, merger, splitter, argsOffset } = this._;\n                const url = getJsWorkletProcessor(Processor, dspId, this.audioCtx.sampleRate, dependencies, enums);\n                await JsWorkletManager.addModule(this.audioCtx, dspId, url);\n\n                let attempts = 0;\n                let node;\n                while (true) {\n                    try {\n                        node = new AudioWorkletNode(this.audioCtx, dspId);\n                        break;\n                    } catch (e) {\n                        attempts++;\n                        await new Promise(r => setTimeout(r, 10));\n                        if (attempts >= 10) {\n                            this.error(`Failed to create AudioWorkletNode for ${dspId}`);\n                            return;\n                        }\n                    }\n                }\n                // const node = new AudioWorkletNode(this.audioCtx, dspId);\n                this._.node = node;\n                this.checkAndFillUnconnected();\n                merger?.connect(node);\n                node.connect(splitter);\n                constants.forEach((constant, i) => {\n                    const argValue = this.args[i - argsOffset];\n                    if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                    constant.start();\n                });\n            });\n            this.on(\"argsUpdated\", () => {\n                this._.constants.forEach((constant, i) => {\n                    const argValue = +this.args[i - this._.argsOffset];\n                    if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                });\n            })\n            this.on(\"inlet\", ({ inlet, data }) => {\n                // This is a blanket implementation that we may want to update in the future\n                const value = extractFirst(data);\n                if (typeof value === \"number\") {\n                    if (this._.constants[inlet] && !this._.constantsConnected[inlet]) {\n                        const constant = this._.constants[inlet];\n                        constant.offset.value = constant.offset.value;\n                        constant.offset.linearRampToValueAtTime(value, this.audioCtx.currentTime + this.getProp(\"smoothInput\"));\n                    }\n                }\n            });\n            this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\n            this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\n            this.on(\"destroy\", () => {\n                const { constants, merger, splitter, node } = this._;\n                constants.forEach(constant => constant?.disconnect());\n                merger?.disconnect();\n                splitter?.disconnect();\n                node?.disconnect();\n                // node?.destroy();\n            })\n        }\n    }\n}\n","import { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class JsParamDescriptor {\n    name: string;\n    automationRate?: \"a-rate\" | \"k-rate\";\n    minValue?: number;\n    maxValue?: number;\n    defaultValue?: number;\n}\n\nexport default class JsDspProcessor {\n\n    static paramDescriptors: Record<string, JsParamDescriptor> = {};\n    static description: string;\n\n    static inlets: IInletsMeta = [];\n    static outlets: IOutletsMeta = [];\n    static args: IArgsMeta = [];\n    static props: IPropsMeta = {\n        smoothInput: {\n            type: \"number\",\n            default: 0.00267,\n            description: \"Linear interpolation coefficient to block-rate input values in seconds\"\n        }\n    };\n    static argsOffset: number;\n    static docs: string;\n    static helpFiles: string[];\n\n    static get parameterDescriptors() {\n        const params = [] as JsParamDescriptor[];\n        for (const name in this.paramDescriptors) {\n            params.push(this.paramDescriptors[name]);\n        }\n        return params;\n    }\n\n    init(sampleRate: number) {\n\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        return true;\n    }\n\n}\n","import * as JSON from \"./package.json\";\n\nexport default JSON;\n","\nexport function scale(input: number, inputMin: number, inputMax: number, outputMin: number, outputMax: number) {\n    const inputRange = inputMax - inputMin;\n    const outputRange = outputMax - outputMin;\n\n    if (inputRange === 0) {\n        return outputMin;\n    }\n\n    return (input - inputMin) * outputRange / inputRange + outputMin;\n}\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","\nimport JsDspProcessor from \"./jsDspProcessor\";\n\nconst getJsWorkletProcessor = (processor: typeof JsDspProcessor, dspId: string, sampleRate: number, dependencies?: any[], enums?: { name: string, item: any }[]): string => {\n\n    const inherited_string = processor.toString().replace(/extends (.*?) {/, `extends ${JsDspProcessor.name} {`);\n\n    const js_enums = enums ? enums.map((e) => `const ${e.name} = ${JSON.stringify(e.item)}`).join(\"\\n\") : \"\";\n\n    const deps = dependencies ? dependencies.map((dep) => `const ${dep.name} = ${dep.toString()}`)\n        .join(\"\\n\") : \"\";\n\n    const processorCode = `\n\n        ${js_enums}\n\n        ${deps}\n\n        const ${JsDspProcessor.name} = ${JsDspProcessor.toString()}\n\n        const ProcessorClass = ${inherited_string}\n\n        class JsWorkletProcessor extends AudioWorkletProcessor {\n\n            constructor(options) {\n                super(options);\n                this.processor = new ProcessorClass();\n                this.processor.init(${sampleRate});\n            }\n\n            process(inputs, outputs, parameters) {\n                return this.processor.process(inputs, outputs, parameters);\n            }\n\n            static get parameterDescriptors() {\n                return ProcessorClass.parameterDescriptors;\n            }\n        }\n\n        // TODO -- fix already registered error\n        registerProcessor(\"${dspId}\", JsWorkletProcessor);\n\n    `;\n\n    // replace any webpack-style name spacing\n    const processorCodeCleaned = processorCode.replace(/_.+?__WEBPACK_IMPORTED_MODULE_\\d+__\\./g, \"\");\n\n    const url = URL.createObjectURL(new Blob([processorCodeCleaned], { type: \"text/javascript\" }));\n    return url;\n}\n\nexport default getJsWorkletProcessor;\n","import { Message } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class Append extends DefaultObject<{}, {}, [any], [any], [], {}> {\n    static description = \"Append a value to a message\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"The input message\"\n    },\n    {\n        isHot: false,\n        type: \"anything\",\n        description: \"The item to append\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"The resulting message\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: true,\n        description: \"The item to append\"\n    }];\n    static docs: string = \"utilities/docs/append.html\";\n    static helpFiles: string[] = [\"utilities/help/append.bell\"];\n    _ = { result: undefined as Message, appender: undefined as any };\n    updateAppender(args: any[]) {\n        if (args.length == 0) {\n            this._.appender = undefined;\n        } else {\n            this._.appender = args[0];\n        }\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 1;\n            this.updateAppender(this.args);\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.updateAppender(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        if (data instanceof Array || data instanceof Message) {\n                            this._.result = Message.from(data);\n                        } else {\n                            this._.result = Message.from([data]);\n                        }\n\n                        if (this._.appender instanceof Array || this._.appender instanceof Message) {\n                            this._.result = Message.from(this._.result.concat(this._.appender));\n                        } else {\n                            this._.result.push(this._.appender);\n                        }\n\n                        this.outlet(0, this._.result);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                } else {\n                    this.outlet(0, this._.result);\n                }\n            } else if (inlet === 1) {\n                this.updateAppender([data]);\n            }\n        });\n    }\n}\n","import { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Change extends DefaultObject<{}, {}, [any], [any], [any], {}> {\n    static description = \"Output a value only when the input stream changes\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"The input data stream\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"A value that has changed\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: true,\n        description: \"An initial value to compare against\"\n    }];\n    static docs: string = \"utilities/docs/change.html\";\n    static helpFiles: string[] = [\"utilities/help/change.bell\"];\n    _ = { result: this.args[0] || undefined as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            if (args.length > 0)\n                this._.result = args[0];\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        if (this._.result != data) {\n                            this._.result = data;\n                            this.outlet(0, this._.result);\n                        }\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                } else {\n                    this.outlet(0, this._.result);\n                }\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { Bang, DefaultObject, isBang } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Counter extends DefaultObject<{}, {}, [number], [number, Bang, number], number[], {}> {\n    static package = \"electrosmith\";\n    static author = \"Corvus Prudens\";\n    static version = \"1.0\";\n    static description = \"Iterates over the given range.\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"bang\",\n            description: \"Advance the range one step\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Set the current step in the range\"\n        }\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"number\",\n            description: \"The current step in the range\"\n        },\n        {\n            type: \"bang\",\n            description: \"Bang when the range is satisfied\"\n        },\n        {\n            type: \"number\",\n            description: \"Outputs the number of ranges satisfied\"\n        }\n    ];\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            description: \"The number of iterations if one argument is provided, or the start of the range\",\n            optional: false,\n        },\n        {\n            type: \"number\",\n            description: \"The end of the range\",\n            optional: true,\n        },\n        {\n            type: \"number\",\n            description: \"The step size\",\n            optional: true,\n        }\n    ];\n    static docs: string = \"utilities/docs/counter.html\";\n    updateRange(args: number[]) {\n        if (args.length === 1) {\n            this._.start = 0;\n            this._.stop = +args[0];\n            this._.step = 1;\n        } else if (args.length === 2) {\n            this._.start = +args[0];\n            this._.stop = +args[1];\n            this._.step = 1;\n        } else {\n            this._.start = +args[0];\n            this._.stop = +args[1];\n            this._.step = +args[2];\n        }\n\n        if (this._.start <= this._.stop) {\n            if (this._.step <= 0) {\n                this.error(\"iteration will never terminate\");\n                return;\n            }\n        } else if (this._.start > this._.stop) {\n            if (this._.step >= 0) {\n                this.error(\"iteration will never terminate\");\n                return;\n            }\n        }\n\n        this._.current_step = this._.start;\n    }\n    _ = { start: 0, stop: 0, step: 1, current_step: 0, num_satisfied: 0 };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 3;\n            this.updateRange(this.args);\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            this.updateRange(args);\n        });\n        this.on(\"inlet\", ({ inlet, data }) => {\n            if (inlet === 0) {\n                this.outlet(0, this._.current_step);\n\n                this._.current_step += this._.step;\n                if (this._.start <= this._.stop) {\n                    if (this._.current_step + this._.step > this._.stop) {\n\n                        this._.num_satisfied += 1;\n\n                        this.outlet(1, new Bang());\n                        this.outlet(2, this._.num_satisfied);\n                        this._.current_step = this._.start;\n                    }\n                } else if (this._.start > this._.stop) {\n                    if (this._.current_step + this._.step < this._.stop) {\n\n                        this._.num_satisfied += 1;\n\n                        this.outlet(1, new Bang());\n                        this.outlet(2, this._.num_satisfied);\n                        this._.current_step = this._.start;\n                    }\n                }\n            } else if (inlet === 1) {\n                // clamp the value to the range\n                const step = extractFirst(data);\n                if (typeof step !== \"number\")\n                    return;\n                this._.current_step = step > this._.stop ? this._.stop : step < this._.start ? this._.start : step;\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Dbtopow extends DefaultObject<{}, {}, [number], [number], [], {}> {\n    static package = \"electrosmith\";\n    static author = \"btice\";\n    static version = \"1.0\";\n    static description = \"Convert decibels to power units (equal to the square of RMS Amplitude)\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Decibels\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Power\"\n    }];\n    static docs: string = \"utilities/docs/dbtopow.html\";\n    _ = { power: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    let value = extractFirst(data);\n                    try {\n\n                        if (value <= 0) {\n                            this._.power = 0.;\n                        }\n\n                        else {\n\n                            if (value > 870.) value = 870.;\n\n                            // the natural log of 10, ln(10),  is approximately 2.302585092994046f\n                            this._.power = Math.exp((2.302585092994046 * 0.1) * (value - 100.));\n                        }\n\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.power);\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Dbtorms extends DefaultObject<{}, {}, [number], [number], [], {}> {\n    static package = \"electrosmith\";\n    static author = \"btice\";\n    static version = \"1.0\";\n    static description = \"Convert decibels to power units (equal to the square of RMS Amplitude)\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Decibels\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"RMS Amplitude\"\n    }];\n    static docs: string = \"utilities/docs/dbtorms.html\";\n    _ = { rms: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    let value = extractFirst(data);\n                    try {\n\n                        if (value <= 0) {\n                            this._.rms = 0.;\n                        }\n\n                        else {\n\n                            if (value > 485.) value = 485.;\n\n                            // the natural log of 10, ln(10),  is approximately 2.302585092994046f\n                            this._.rms = Math.exp((2.302585092994046 * 0.05) * (value - 100.));\n                        }\n\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.rms);\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Ftom extends DefaultObject<{}, {}, [number], [number], [], {}> {\n    static package = \"electrosmith\";\n    static author = \"btice\";\n    static version = \"1.0\";\n    static description = \"Convert frequency in Hz to midi note number\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Frequency\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Midi Note Number\"\n    }];\n    static docs: string = \"utilities/docs/ftom.html\";\n    _ = { note: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    const value = extractFirst(data);\n                    try {\n\n                        if (value <= 0) {\n                            this._.note = -1500;\n                        }\n\n                        else {\n                            this._.note = 12. * Math.log(value / 220.) / Math.log(2.) + 57.01;\n                        }\n\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.note);\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Gate extends DefaultObject<{}, {}, any[], [any], [number], {}> {\n    static description = \"Route an inlet to multiple outlets\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Which outlet to send the input to\"\n        },\n        {\n            isHot: true,\n            type: \"anything\",\n            description: \"The value to send out selected outlet\"\n        }\n    ];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: false,\n        default: 2,\n        description: \"The number of outlets to select from\"\n    }];\n    static docs: string = \"utilities/docs/gate.html\";\n    _ = { selection: 0, data: 0 };\n    handleUpdateArgs(args: any[]) {\n        if (args.length !== 1) {\n            this.error(\"Outlet count required\");\n            return;\n        }\n\n        const outlets = +args[0];\n        this.outlets = outlets;\n\n        this.setMeta({\n            outlets: [\n                ...new Array(outlets).fill({\n                    type: \"anything\",\n                    description: \"The value in the right inlet if the index matches\"\n                })\n            ]\n        })\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.handleUpdateArgs(this.args);\n            this.inlets = 2;\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.handleUpdateArgs(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    const value = extractFirst(data);\n                    if (typeof value === \"number\") {\n                        const clamped = Math.min(Math.abs(Math.floor(value)), this.outlets);\n                        this._.selection = clamped;\n                    }\n                }\n            } else if (inlet === 1) {\n                if (this._.selection > 0) {\n                    this.outlet(this._.selection - 1, data);\n                }\n            }\n        });\n    }\n}\n","import { Bang, DefaultObject, isBang } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Iter extends DefaultObject<{}, {}, [number], [Bang, Bang, number], number[], {}> {\n    static package = \"electrosmith\";\n    static author = \"Corvus Prudens\";\n    static version = \"1.0\";\n    static description = \"Repeatedly produce bangs until the range is satisfied.\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"bang\",\n            description: \"Start the iteration\"\n        }\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"bang\",\n            description: \"Bang for each step in the range\"\n        },\n        {\n            type: \"bang\",\n            description: \"Bang when the range is satisfied\"\n        },\n        {\n            type: \"number\",\n            description: \"Outputs the value at each step in the range\"\n        }\n    ];\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            description: \"The number of iterations if one argument is provided, or the start of the range\",\n            optional: false,\n        },\n        {\n            type: \"number\",\n            description: \"The end of the range\",\n            optional: true,\n        },\n        {\n            type: \"number\",\n            description: \"The step size\",\n            optional: true,\n        }\n    ];\n    static docs: string = \"utilities/docs/iter.html\";\n    static helpFiles: string[] = [\"utilities/help/iter.bell\"];\n    updateRange(args: number[]) {\n\n        const processed = args.map(arg => Math.floor(+arg));\n\n        if (args.length === 1) {\n            this._.start = 0;\n            this._.stop = processed[0];\n            this._.step = 1;\n        } else if (args.length === 2) {\n            this._.start = processed[0];\n            this._.stop = processed[1];\n            this._.step = 1;\n        } else {\n            this._.start = processed[0];\n            this._.stop = processed[1];\n            this._.step = processed[2];\n        }\n\n        if (this._.start <= this._.stop && this._.step <= 0) {\n            this.error(\"iteration will never terminate\");\n            return;\n        } else if (this._.start > this._.stop && this._.step >= 0) {\n            this.error(\"iteration will never terminate\");\n            return;\n        }\n    }\n    _ = { start: 0, stop: 0, step: 1 };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 3;\n            this.updateRange(this.args);\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            this.updateRange(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (this._.start <= this._.stop) {\n                    if (this._.step <= 0) {\n                        this.error(\"iteration will never terminate\");\n                        return;\n                    }\n\n                    for (let i = this._.start; i < this._.stop; i += this._.step) {\n                        this.outlet(2, i);\n                        this.outlet(0, new Bang());\n                    }\n                    this.outlet(1, new Bang());\n                } else {\n                    if (this._.step >= 0) {\n                        this.error(\"iteration will never terminate\");\n                        return;\n                    }\n\n                    for (let i = this._.start; i > this._.stop; i += this._.step) {\n                        this.outlet(2, i);\n                        this.outlet(0, new Bang());\n                    }\n                    this.outlet(1, new Bang());\n                }\n            }\n        });\n    }\n}\n","import { Bang, DefaultObject } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Loadbang extends DefaultObject<{}, {}, [Bang], [Bang]> {\n    static description = \"Bang on patcher load.\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Anything to transform to a bang.\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"bang\",\n        description: \"Bang on patcher load or inlet.\"\n    }];\n    static docs: string = \"utilities/docs/loadbang.html\";\n    static helpFiles: string[] = [\"utilities/help/loadbang.bell\"];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n            this.patcher.on(\"postInited\", () => this.outlet(0, new Bang()));\n        });\n        this.on(\"inlet\", ({ inlet }) => {\n            if (inlet === 0)\n                this.outlet(0, new Bang());\n        });\n    }\n}\n","import { Bang, DefaultObject } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Loadmess extends DefaultObject<{}, {}, [Bang], [Bang]> {\n    static description = \"Output the given message on patcher load.\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Trigger the message output.\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"Sent out on patcher load or inlet.\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: false,\n        description: \"Message to output on patcher load.\"\n    }];\n    static docs: string = \"utilities/docs/loadmess.html\";\n    static helpFiles: string[] = [\"utilities/help/loadmess.bell\"];\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n\n            if (this.args.length < 1) {\n                this.error(\"No message to output on patcher load.\");\n                return;\n            }\n\n            this.patcher.on(\"postInited\", () => this.outlet(0, this.args[0]));\n        });\n        this.on(\"inlet\", ({ inlet }) => {\n            if (inlet === 0) {\n                if (this.args.length < 1) {\n                    this.error(\"No message to output on patcher load.\");\n                    return;\n                }\n                this.outlet(0, this.args[0]);\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Mtof extends DefaultObject<{}, {}, [number], [number], [], {}> {\n    static package = \"electrosmith\";\n    static author = \"beserge\";\n    static version = \"1.0\";\n    static description = \"Convert midi note number to frequency in Hz\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Midi Note Number\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Frequency\"\n    }];\n    static docs: string = \"utilities/docs/mtof.html\";\n    _ = { freq: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    const value = extractFirst(data);\n                    try {\n\n                        if (value <= -1500.) {\n                            this._.freq = 0.;\n                        } else if (value > 1499.) {\n                            this._.freq = 440. * Math.exp(0.0577625565 * (1499. - 69.));\n                        } else {\n                            this._.freq = 440. * Math.exp(0.0577625565 * (value - 69.));\n                        }\n\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.freq);\n            }\n        });\n    }\n}\n","import { Message } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type {\n  IInletsMeta,\n  IOutletsMeta,\n  IArgsMeta,\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class Pack extends DefaultObject<{}, {}, [any], [any], [number], {}> {\n  static description = \"Pack the inputs into a list\";\n  static inlets: IInletsMeta = [\n    {\n      isHot: true,\n      type: \"anything\",\n      description: \"Element 1\",\n    },\n  ];\n  static outlets: IOutletsMeta = [\n    {\n      type: \"anything\",\n      description: \"The packed list\",\n    },\n  ];\n  static args: IArgsMeta = [\n    {\n      type: \"number\",\n      optional: true,\n      default: 2,\n      description: \"The number of elements to pack\",\n    },\n  ];\n  //   static docs: string = \"utilities/docs/append.html\";\n  //   static helpFiles: string[] = [\"utilities/help/append.bell\"];\n  _ = { value: undefined as Message };\n  resizeInlets(count: number) {\n    if (count < 1) {\n      this.error(\"Cannot pack less than 1 element\");\n      return;\n    }\n\n    let new_meta = Array.from({ length: count }, (_, i) => {\n      return {\n        type: \"anything\",\n        description: `Element ${i + 1}`,\n        isHot: i === 0,\n      };\n    }) as IInletsMeta;\n\n    this.setMeta({ inlets: new_meta });\n    this.inlets = count;\n    this._.value = Array.from({ length: count }, () => 0) as Message;\n  }\n  subscribe() {\n    super.subscribe();\n    this.on(\"preInit\", () => {\n      this.outlets = 1;\n\n      this.resizeInlets(this.args[0]);\n    });\n    this.on(\"updateArgs\", (args) => {\n      this.resizeInlets(args[0]);\n    });\n    this.on(\"inlet\", ({ data, inlet }) => {\n      if (inlet < this._.value.length) {\n        this._.value[inlet] = data;\n      }\n\n      if (inlet === 0) this.outlet(0, this._.value);\n    });\n  }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Powtodb extends DefaultObject<{}, {}, [number], [number], [], {}> {\n    static package = \"electrosmith\";\n    static author = \"btice\";\n    static version = \"1.0\";\n    static description = \"Convert power units (equal to square of RMS Amplitude), to decibels\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Power\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Decibels\"\n    }];\n    static docs: string = \"utilities/docs/powtodb.html\";\n    _ = { decibels: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    const value = extractFirst(data);\n                    try {\n\n                        if (value <= 0) {\n                            this._.decibels = 0.;\n                        }\n\n                        else {\n\n                            // the natural log of 10, ln(10),  is approximately 2.302585092994046f\n                            this._.decibels = 100. + 10. / 2.302585092994046 * Math.log(value);\n\n                            if (this._.decibels < 0.) {\n                                this._.decibels = 0.;\n                            }\n                        }\n\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.decibels);\n            }\n        });\n    }\n}\n","import { Message } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class Prepend extends DefaultObject<{}, {}, [any], [any], [], {}> {\n    static description = \"Prepend a value to a message\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"The input message\"\n    },\n    {\n        isHot: false,\n        type: \"anything\",\n        description: \"The item to prepend\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"The resulting message\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: true,\n        description: \"The item to prepend\"\n    }];\n    static docs: string = \"utilities/docs/prepend.html\";\n    static helpFiles: string[] = [\"utilities/help/prepend.bell\"];\n    _ = { result: undefined as Message, prepender: undefined as any };\n    updatePrepender(args: any[]) {\n        if (args.length == 0) {\n            this._.prepender = undefined;\n        } else {\n            this._.prepender = args[0];\n        }\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 1;\n            this.updatePrepender(this.args);\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.updatePrepender(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n\n                        if (this._.prepender) {\n                            if (this._.prepender instanceof Array || this._.prepender instanceof Message) {\n                                this._.result = Message.from(this._.prepender);\n                            } else {\n                                this._.result = Message.from([this._.prepender]);\n                            }\n                        } else {\n                            this._.result = new Message();\n                        }\n\n                        if (data instanceof Array || data instanceof Message) {\n                            this._.result = Message.from(this._.result.concat(data));\n                        } else {\n                            this._.result.push(data);\n                        }\n\n                        this.outlet(0, this._.result);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                } else {\n                    this.outlet(0, this._.result);\n                }\n            } else if (inlet === 1) {\n                this.updatePrepender([data]);\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Rmstodb extends DefaultObject<{}, {}, [number], [number], [], {}> {\n    static package = \"electrosmith\";\n    static author = \"btice\";\n    static version = \"1.0\";\n    static description = \"Convert RMS Amplitude to Decibels\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"RMS\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Decibels\"\n    }];\n    static docs: string = \"utilities/docs/rmstodb.html\";\n    _ = { decibels: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    const value = extractFirst(data);\n                    try {\n\n                        if (value <= 0) {\n                            this._.decibels = 0.;\n                        }\n\n                        else {\n\n                            // the natural log of 10, ln(10),  is approximately 2.302585092994046f\n                            this._.decibels = 100. + 20. / 2.302585092994046 * Math.log(value);\n\n                            if (this._.decibels < 0.) {\n                                this._.decibels = 0.;\n                            }\n                        }\n\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.decibels);\n            }\n        });\n    }\n}\n","import { DefaultObject, isBang } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { scale } from \"../../../../../common/web/scaleFunction\";\nimport { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\n\nexport default class Scale extends DefaultObject<{}, {}, [number, number, number, number], [number], [number, number, number, number], {}> {\n    static package = \"electrosmith\";\n    static author = \"Corvus Prudens\";\n    static version = \"1.0\";\n    static description = \"Scale a number from an input range to an output range\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Number to scale\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Input range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Input range maximum\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Output range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Output range maximum\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Scaled number\"\n    }];\n    static args: IArgsMeta = [\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range minimum\"\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range maximum\"\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range minimum\"\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range maximum\"\n        }\n    ];\n    static docs: string = \"utilities/docs/scale.html\";\n    static helpFiles: string[] = [\"utilities/help/scale.bell\"];\n\n    updateRange(args: number[]) {\n        this._.inputLow = args[0] || 0;\n        this._.inputHigh = args[1] || 0;\n        this._.outputLow = args[2] || 0;\n        this._.outputHigh = args[3] || 0;\n    }\n\n    _ = { output: undefined as number, inputLow: undefined as number, inputHigh: undefined as number, outputLow: undefined as number, outputHigh: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 5;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", () => {\n            this.updateRange(this.args);\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            this.updateRange(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        const value = extractFirst(data);\n                        if (typeof value === \"number\")\n                            this._.output = scale(value, this._.inputLow, this._.inputHigh, this._.outputLow, this._.outputHigh);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.output);\n            } else if (inlet === 1) {\n                if (!isBang(data)) {\n                    this._.inputLow = +data;\n                }\n            } else if (inlet === 2) {\n                if (!isBang(data)) {\n                    this._.inputHigh = +data;\n                }\n            } else if (inlet === 3) {\n                if (!isBang(data)) {\n                    this._.outputLow = +data;\n                }\n            } else if (inlet === 4) {\n                if (!isBang(data)) {\n                    this._.outputHigh = +data;\n                }\n            }\n        });\n    }\n}\n","import { DefaultObject, isBang } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { scale } from \"../../../../../common/web/scaleFunction\";\nimport { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\n\nexport default class ScaleClamped extends DefaultObject<{}, {}, [number, number, number, number], [number], [number, number, number, number], {}> {\n    static package = \"electrosmith\";\n    static author = \"Corvus Prudens\";\n    static version = \"1.0\";\n    static description = \"Scale a number from an input range to an output range with clamping\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"number\",\n            description: \"Number to scale\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Input range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Input range maximum\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Output range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Output range maximum\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"number\",\n        description: \"Scaled number\"\n    }];\n    static args: IArgsMeta = [\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range minimum\"\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range maximum\"\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range minimum\"\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range maximum\"\n        }\n    ];\n    static docs: string = \"utilities/docs/scalec.html\";\n    static helpFiles: string[] = [\"utilities/help/scalec.bell\"];\n\n    updateRange(args: number[]) {\n        this._.inputLow = args[0] || 0;\n        this._.inputHigh = args[1] || 0;\n        this._.outputLow = args[2] || 0;\n        this._.outputHigh = args[3] || 0;\n    }\n\n    _ = { output: undefined as number, inputLow: undefined as number, inputHigh: undefined as number, outputLow: undefined as number, outputHigh: undefined as number };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 5;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", () => {\n            this.updateRange(this.args);\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            this.updateRange(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        const value = extractFirst(data);\n                        if (typeof value === \"number\") {\n                            const clamped = Math.min(Math.max(value, this._.inputLow), this._.inputHigh);\n                            this._.output = scale(clamped, this._.inputLow, this._.inputHigh, this._.outputLow, this._.outputHigh);\n                        }\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.output);\n            } else if (inlet === 1) {\n                if (!isBang(data)) {\n                    this._.inputLow = +data;\n                }\n            } else if (inlet === 2) {\n                if (!isBang(data)) {\n                    this._.inputHigh = +data;\n                }\n            } else if (inlet === 3) {\n                if (!isBang(data)) {\n                    this._.outputLow = +data;\n                }\n            } else if (inlet === 4) {\n                if (!isBang(data)) {\n                    this._.outputHigh = +data;\n                }\n            }\n        });\n    }\n}\n","import { Bang, DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\n\nexport default class Select extends DefaultObject<{}, {}, [any], [any], [any], {}> {\n    static description = \"Output a bang when the value matches\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"The input to evaluate\"\n    }];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"anything\",\n            description: \"Any input that did not match\"\n        }\n    ];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: false,\n        description: \"The value to compare against\",\n    }];\n    static docs: string = \"utilities/docs/select.html\";\n    _ = { selectors: [] as any[] };\n    handleUpdateArgs(args: any[]) {\n        if (args.length == 0) {\n            this.error(\"No value to compare against\");\n            return;\n        }\n\n        this._.selectors = args;\n\n        this.setMeta({\n            inlets: [{\n                isHot: true,\n                type: \"anything\",\n                description: \"The input to evaluate\"\n            },\n            ...new Array(args.length).fill({\n                isHot: false,\n                type: \"anything\",\n                description: \"The value to compare against for this index\"\n            })],\n            outlets: [\n                ...new Array(args.length).fill({\n                    type: \"bang\",\n                    description: \"Bangs when the input matches the selector at this index\"\n                }),\n                {\n                    type: \"anything\",\n                    description: \"Any input that did not match\"\n                }\n            ]\n        });\n\n        this.inlets = args.length + 1;\n        this.outlets = args.length + 1;\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.handleUpdateArgs(this.args);\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            this.handleUpdateArgs(args);\n        });\n        this.on(\"inlet\", ({ data: rawData, inlet }) => {\n            if (inlet === 0) {\n                for (let i = 0; i < this._.selectors.length; i++) {\n                    let data = rawData;\n                    if (!(this._.selectors[i] instanceof Array)) {\n                        data = extractFirst(rawData);\n                    }\n\n                    if (data === this._.selectors[i]) {\n                        this.outlet(i, new Bang());\n                        return;\n                    }\n                }\n                this.outlet(this._.selectors.length, rawData);\n            }\n            else if (inlet > 0 && inlet <= this._.selectors.length) {\n                this._.selectors[inlet - 1] = rawData;\n            }\n        });\n    }\n}\n","import { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Swap extends DefaultObject<{}, {}, [any, any], [any, any], [any], {}> {\n    static description = \"Swap input values\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"anything\",\n            description: \"The value to output on the second outlet\"\n        },\n        {\n            isHot: false,\n            type: \"anything\",\n            description: \"The value to output on the first outlet\"\n        },\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"anything\",\n            description: \"The value from the second inlet\"\n        },\n        {\n            type: \"anything\",\n            description: \"The value from the first inlet\"\n        }\n    ];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: true,\n        default: 0,\n        description: \"Initial value to send out the first inlet\"\n    }];\n    static docs: string = \"utilities/docs/swap.html\";\n    static helpFiles: string[] = [\"utilities/help/swap.bell\"];\n    _ = { out2: undefined as any, arg: this.args[0] };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n        });\n        this.on(\"updateArgs\", (args) => {\n            this._.arg = undefined;\n            this._.out2 = undefined;\n            if (!args || args.length === 0) return;\n            this._.arg = args[0];\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this._.out2 = data;\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(1, this._.out2);\n                this.outlet(0, this._.arg);\n            } else if (inlet === 1) {\n                this._.arg = data;\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Switch extends DefaultObject<{}, {}, any[], [any], [number], {}> {\n    static description = \"Route multiple inlets to a single outlet\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Which inlet to route to the output\"\n        }\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"anything\",\n            description: \"The value from the selected inlet\"\n        }\n    ];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: false,\n        default: 2,\n        description: \"The number of inlets to select from\"\n    }];\n    static docs: string = \"utilities/docs/switch.html\";\n    static helpFiles: string[] = [\"utilities/help/switch.bell\"];\n    _ = { selection: 0, data: 0 };\n    handleUpdateArgs(args: any[]) {\n        if (args.length !== 1) {\n            this.error(\"Inlet count required\");\n            return;\n        }\n\n        const inlets = +args[0];\n        this.inlets = inlets + 1;\n\n        this.setMeta({\n            inlets: [\n                {\n                    isHot: false,\n                    type: \"number\",\n                    description: \"Which inlet to route to the output\"\n                },\n                ...new Array(inlets).fill({\n                    isHot: true,\n                    type: \"anything\",\n                    description: \"The value to output on the first outlet\"\n                })\n            ]\n        })\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.handleUpdateArgs(this.args);\n            this.outlets = 1;\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.handleUpdateArgs(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    const value = extractFirst(data);\n\n                    if (typeof value === \"number\") {\n                        const clamped = Math.min(Math.abs(Math.floor(+data)), this.inlets - 1);\n                        this._.selection = clamped;\n                    }\n                }\n            } else {\n                if (inlet === this._.selection) {\n                    this.outlet(0, data);\n                }\n            }\n        });\n    }\n}\n","import { Message } from \"@jspatcher/jspatcher/src/core/message\";\nimport { DefaultObject, isBang } from \"../../sdk\";\nimport type {\n  IInletsMeta,\n  IOutletsMeta,\n  IArgsMeta,\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class Unpack extends DefaultObject<{}, {}, [any], [any], [number], {}> {\n  static description = \"Unpack a list\";\n  static inlets: IInletsMeta = [\n    {\n      isHot: true,\n      type: \"anything\",\n      description: \"The input list\",\n    },\n  ];\n  static outlets: IOutletsMeta = [\n    {\n      type: \"anything\",\n      description: \"Element 1\",\n    },\n    {\n      type: \"anything\",\n      description: \"Element 2\",\n    },\n  ];\n  static args: IArgsMeta = [\n    {\n      type: \"number\",\n      optional: true,\n      default: 2,\n      description: \"The number of elements to unpack\",\n    },\n  ];\n  //   static docs: string = \"utilities/docs/append.html\";\n  //   static helpFiles: string[] = [\"utilities/help/append.bell\"];\n  _ = { value: undefined as Message };\n  resizeOutlets(count: number) {\n    let new_meta = Array.from({ length: count }, (_, i) => {\n      return {\n        type: \"anything\",\n        description: `Element ${i + 1}`,\n      };\n    }) as IOutletsMeta;\n\n    this.setMeta({ outlets: new_meta });\n    this.outlets = count;\n    this._.value = Array.from({ length: count }, () => 0) as Message;\n  }\n  subscribe() {\n    super.subscribe();\n    this.on(\"preInit\", () => {\n      this.inlets = 1;\n\n      this.resizeOutlets(this.args[0]);\n    });\n    this.on(\"updateArgs\", (args) => {\n      this.resizeOutlets(args[0]);\n    });\n    this.on(\"inlet\", ({ data, inlet }) => {\n      if (inlet === 0) {\n        if (!isBang(data)) {\n          try {\n            if (data instanceof Array) {\n              this._.value = data as Message;\n\n              let max_len = Math.min(data.length, this._.value.length);\n\n              for (let i = 0; i < max_len; i++) this._.value[i] = data[i];\n            }\n          } catch (e) {\n            this.error(e);\n            return;\n          }\n        }\n\n        for (let i = this._.value.length - 1; i > -1; i--) {\n          this.outlet(i, this._.value[i]);\n        }\n      }\n    });\n  }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class MtofAudio extends JsDspProcessor {\n    static description: string = \"Convert midi note number to frequency in Hz\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"Midi Note Number\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Frequency\"\n    }];\n    static argsOffset: number = 0;\n    static docs: string = \"utilities/docs/mtof_audio.html\";\n    static helpFiles: string[] = [\"utilities/help/mtof~.bell\"];\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        const frequency = inputs[0][0];\n        const outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            const data = frequency[i];\n\n            if (data <= -1500.) {\n                outputStream[i] = 0.;\n            } else if (data > 1499.) {\n                outputStream[i] = 440. * Math.exp(0.0577625565 * (1499. - 69.));\n            } else {\n                outputStream[i] = 440. * Math.exp(0.0577625565 * (data - 69.));\n            }\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { scale } from \"../../../../../common/web/scaleFunction\";\n\nexport default class ScaleAudio extends JsDspProcessor {\n    static description: string = \"Scale a number from an input range to an output range\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"Number to scale\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Input range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Input range maximum\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Output range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Output range maximum\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Scaled number\"\n    }];\n    static args: IArgsMeta = [\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range minimum\",\n            default: 0\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range maximum\",\n            default: 0\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range minimum\",\n            default: 0\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range maximum\",\n            default: 0\n        }\n    ];\n    static argsOffset: number = 1;\n    static docs: string = \"utilities/docs/scale_audio.html\";\n    static helpFiles: string[] = [\"utilities/help/scale_audio.bell\"];\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        const inputStream = inputs[0][0];\n        const inputLow = inputs[0][1];\n        const inputHigh = inputs[0][2];\n        const outputLow = inputs[0][3];\n        const outputHigh = inputs[0][4];\n\n        const outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            const data = inputStream[i];\n\n            outputStream[i] = scale(data, inputLow[i], inputHigh[i], outputLow[i], outputHigh[i]);\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { scale } from \"../../../../../common/web/scaleFunction\";\n\nexport default class ScaleClampedAudio extends JsDspProcessor {\n    static description: string = \"Scale a number from an input range to an output range with clamping\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"Number to scale\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Input range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Input range maximum\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Output range minimum\"\n        },\n        {\n            isHot: false,\n            type: \"signal\",\n            description: \"Output range maximum\"\n        }\n    ];\n    static outlets: IOutletsMeta = [{\n        type: \"signal\",\n        description: \"Scaled number\"\n    }];\n    static args: IArgsMeta = [\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range minimum\",\n            default: 0\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Input range maximum\",\n            default: 0\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range minimum\",\n            default: 0\n        },\n        {\n            optional: true,\n            type: \"number\",\n            description: \"Output range maximum\",\n            default: 0\n        }\n    ];\n    static argsOffset: number = 1;\n    static docs: string = \"utilities/docs/scalec_audio.html\";\n    static helpFiles: string[] = [\"utilities/help/scalec_audio.bell\"];\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        const inputStream = inputs[0][0];\n        const inputLow = inputs[0][1];\n        const inputHigh = inputs[0][2];\n        const outputLow = inputs[0][3];\n        const outputHigh = inputs[0][4];\n\n        const outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            const data = inputStream[i];\n            const clamped = Math.min(Math.max(data, inputLow[i]), inputHigh[i]);\n            outputStream[i] = scale(clamped, inputLow[i], inputHigh[i], outputLow[i], outputHigh[i]);\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Bang, DefaultObject, DefaultUI } from \"../../sdk\";\nimport { JsWorkletManager } from \"../../../../../common/web/jsDspObject\";\n\nconst SnapshotModule = `\n    class JsWorkletProcessor extends AudioWorkletProcessor {\n\n        interval;\n        accumulator;\n        increment;\n\n        constructor(options) {\n            super(options);\n\n            this.interval = 0.02;\n            this.accumulator = 0;\n            this.increment = 1 / sampleRate;\n\n            this.port.onmessage = (e) => {\n                this.interval = e.data / 1000;\n            }\n        }\n\n        process(inputs, outputs, parameters) {\n            const input = inputs[0][0];\n\n            for (let i = 0; i < input.length; i++) {\n                const level = input[i];\n                this.accumulator += this.increment;\n                if (this.accumulator >= this.interval) {\n                    this.port.postMessage(level);\n                    this.accumulator -= this.interval;\n                }\n            }\n\n            return true;\n        }\n\n        // static get parameterDescriptors() {\n        //     return ProcessorClass.parameterDescriptors;\n        // }\n    }\n\n    registerProcessor(\"snapshot~\", JsWorkletProcessor);\n`;\n\n\ninterface JsDspInternalState {\n    dspId: string;\n    merger: ChannelMergerNode;\n    node: AudioWorkletNode;\n    defaultInputs: [];\n    constants: ConstantSourceNode[];\n    constantsConnected: boolean[];\n    argsOffset: number;\n}\n\ninterface Props {\n    smoothInput: number;\n}\n\nexport default class SnapshotObject<\n    S = {},\n    I extends [Bang | any, ...any[]] = [Bang],\n    O extends any[] = [],\n    A extends any[] = any[],\n    P = Partial<Props> & Record<string, any>\n> extends DefaultObject<{}, S, I, O, A, P & Props> {\n\n    // static package = package_name;\n    static author = \"Corvus Prudens\";\n    static version = \"1.0.0\";\n    static description: string = \"Take a snapshot of a signal\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"Input signal\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"Sampling interval in milliseconds\",\n        }\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"number\",\n            description: \"Signal value at the point of the trigger\"\n        }\n    ];\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"Sampling interval in milliseconds\",\n            default: 20\n        }\n    ];\n    static docs: string = \"utilities/docs/snapshot.html\";\n    static helpFiles: string[] = [\"utilities/help/snapshot~.bell\"];\n    static UI = DefaultUI;\n    _: Partial<JsDspInternalState> = {\n        dspId: 'snapshot~',\n        defaultInputs: [],\n        constants: [],\n        constantsConnected: [],\n        argsOffset: 0\n    };\n    get audioConnections() {\n        return this.inletLines.map(set => [...set].find(l => !l.disabled && l.isConnectableByAudio)).map(l => !!l);\n    }\n    checkAndFillUnconnected() {\n        const { audioConnections } = this;\n        const { constants, constantsConnected } = this._;\n        if (!this.inlets) return;\n        for (let i = 0; i < this.inlets; i++) {\n            if (audioConnections[i] === constantsConnected[i]) continue;\n            const constant = constants[i];\n            if (audioConnections[i]) {\n                constant.offset.value = 0;\n            } else if (!audioConnections[i] && !constantsConnected[i]) {\n                constant.offset.value = this._.defaultInputs[i] || 0;\n            }\n            constantsConnected[i] = audioConnections[i];\n        }\n    }\n    handleUpdateArgs(args: any[]) {\n        if (this._.node && args.length > 0) {\n            this._.node.port.postMessage(+args[0]);\n        }\n    }\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            const { inputs, outputs } = { inputs: SnapshotObject.inlets.length, outputs: SnapshotObject.outlets.length };\n\n            if (inputs) {\n                const merger = this.audioCtx.createChannelMerger(inputs);\n                this._.merger = merger;\n                for (let i = 0; i < inputs; i++) {\n                    const constant = this.audioCtx.createConstantSource();\n                    this._.constants[i] = constant;\n                    constant.connect(merger, 0, i);\n                    this._.constantsConnected[i] = false;\n                }\n            }\n\n            this.inlets = inputs;\n            this.outlets = outputs;\n            this.disconnectAudio();\n            this.inletAudioConnections = this._.constants.map((node) => ({ node: node.offset, index: 0 }));\n            // this.outletAudioConnections = new Array(outputs).fill(null).map((v, i) => ({ node: splitter, index: i }));\n            this.connectAudio();\n        });\n        this.on(\"postInit\", async () => {\n            const { dspId, constants, merger, argsOffset } = this._;\n            const url = URL.createObjectURL(new Blob([SnapshotModule], { type: \"text/javascript\" }));\n            await JsWorkletManager.addModule(this.audioCtx, dspId, url);\n\n            let attempts = 0;\n            let node;\n            while (true) {\n                try {\n                    node = new AudioWorkletNode(this.audioCtx, dspId);\n                    break;\n                } catch (e) {\n                    attempts++;\n                    await new Promise(r => setTimeout(r, 10));\n                    if (attempts >= 10) {\n                        this.error(`Failed to create AudioWorkletNode for ${dspId}`);\n                        return;\n                    }\n                }\n            }\n            // const node = new AudioWorkletNode(this.audioCtx, dspId);\n            this._.node = node;\n            this.checkAndFillUnconnected();\n            merger?.connect(node);\n            constants.forEach((constant, i) => {\n                const argValue = this.args[i - argsOffset];\n                if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                constant.start();\n            });\n\n            this.handleUpdateArgs(this.args);\n\n            this._.node.port.onmessage = (e) => {\n                this.outlet(0, e.data);\n            }\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            this._.constants.forEach((constant, i) => {\n                const argValue = +this.args[i - this._.argsOffset];\n                if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n            });\n\n            this.handleUpdateArgs(args);\n        })\n        this.on(\"inlet\", ({ inlet, data }) => {\n            if (inlet === 1) {\n                this._.node?.port.postMessage(+data);\n            }\n        });\n        this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\n        this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\n        this.on(\"destroy\", () => {\n            const { constants, merger, node } = this._;\n            constants.forEach(constant => constant?.disconnect());\n            merger?.disconnect();\n            node?.disconnect();\n            // node?.destroy();\n        })\n    }\n}\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Change from \"./objects/block/change\";\nimport Swap from \"./objects/block/swap\";\nimport Mtof from \"./objects/block/mtof\";\nimport Ftom from \"./objects/block/ftom\";\nimport Powtodb from \"./objects/block/powtodb\";\nimport Dbtopow from \"./objects/block/dbtopow\";\nimport Dbtorms from \"./objects/block/dbtorms\";\nimport Rmstodb from \"./objects/block/rmstodb\";\nimport Iter from \"./objects/block/iter\";\nimport Counter from \"./objects/block/counter\";\nimport Select from \"./objects/block/select\";\nimport { Append } from \"./objects/block/append\";\nimport { Prepend } from \"./objects/block/prepend\";\nimport MtofAudio from \"./objects/dsp/mtof_audio\";\nimport { generateObject } from \"../../../common/web/jsDspObject\";\nimport Scale from \"./objects/block/scale\";\nimport ScaleClamped from \"./objects/block/scalec\";\nimport ScaleAudio from \"./objects/dsp/scale_audio\";\nimport ScaleClampedAudio from \"./objects/dsp/scalec_audio\";\nimport { scale } from \"../../../common/web/scaleFunction\";\nimport Loadbang from \"./objects/block/loadbang\";\nimport Loadmess from \"./objects/block/loadmess\";\nimport Switch from \"./objects/block/switch\";\nimport Gate from \"./objects/block/gate\";\nimport snapshot from \"./objects/dsp/snapshot\";\nimport { Unpack } from \"./objects/block/unpack\";\nimport { Pack } from \"./objects/block/pack\";\n\nexport default async () => ({\n  change: Change,\n  swap: Swap,\n  mtof: Mtof,\n  ftom: Ftom,\n  powtodb: Powtodb,\n  dbtopow: Dbtopow,\n  dbtorms: Dbtorms,\n  rmstodb: Rmstodb,\n  iter: Iter,\n  counter: Counter,\n  select: Select,\n  append: Append,\n  prepend: Prepend,\n  scale: Scale,\n  scalec: ScaleClamped,\n  \"mtof~\": generateObject(MtofAudio, \"mtof~\"),\n  \"scale~\": generateObject(ScaleAudio, \"scale~\", [scale]),\n  \"scalec~\": generateObject(ScaleClampedAudio, \"scalec~\", [scale]),\n  loadbang: Loadbang,\n  loadmess: Loadmess,\n  switch: Switch,\n  gate: Gate,\n  \"snapshot~\": snapshot,\n  unpack: Unpack,\n  pack: Pack,\n});\n"],"names":["_a"],"sourceRoot":""}