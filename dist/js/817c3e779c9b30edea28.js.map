{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/Max.tsx","webpack://JSPatcher/./src/core/objects/Max.scss","webpack://JSPatcher/./src/core/objects/Max.scss?d04f"],"names":["DefaultMaxObject","DefaultObject","mtof","subscribe","on","inlets","outlets","data","inlet","base","getProp","outlet","isNumberArray","map","n","isHot","type","description","default","ftom","Math","log","EmptyObject","InvalidObject"],"mappings":"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","file":"js/817c3e779c9b30edea28.js","sourcesContent":["import \"./Max.scss\";\nimport { TMeta } from \"../types\";\nimport { DefaultObject, EmptyObject, InvalidObject } from \"./Base\";\nimport { isNumberArray } from \"../../utils/utils\";\n\nclass DefaultMaxObject<D = {}, S = {}, I extends any[] = any[], O extends any[] = any[], A extends any[] = any[], P = {}, U = {}, E = {}> extends DefaultObject<D, S, I, O, A, P, U, E> {\n    static package = \"Max\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n    static description = \"Max/MSP Objects\";\n}\nclass mtof extends DefaultMaxObject<{}, {}, [number | number[]], [number | number[]], [], { base: number }> {\n    static description = \"Convert a MIDI note number to frequency\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"MIDI note: number | number[]\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"anything\",\n        description: \"The frequency corresponding to the received MIDI pitch value.\"\n    }];\n    static props: TMeta[\"props\"] = {\n        base: {\n            type: \"number\",\n            default: 440,\n            description: 'Sets the \"base frequency\" used when calculating frequency values (e.g., A = 440.). The default base frequency is 440 Hz'\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const base = this.getProp(\"base\");\n            if (inlet === 0) {\n                if (typeof data === \"number\") {\n                    this.outlet(0, base * 2 ** ((data - 69) / 12));\n                } else if (isNumberArray(data)) {\n                    this.outlet(0, data.map(n => base * 2 ** ((n - 69) / 12)));\n                }\n            }\n        });\n    }\n}\nclass ftom extends DefaultMaxObject<{}, {}, [number | number[]], [number | number[]], [], { base: number }> {\n    static description = \"Convert frequency to a MIDI note number\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"frequency value: number | number[]\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"anything\",\n        description: \"The MIDI note value that corresponds to the input frequency.\"\n    }];\n    static props: TMeta[\"props\"] = {\n        base: {\n            type: \"number\",\n            default: 440,\n            description: 'Sets the \"base frequency\" used when calculating frequency values (e.g., A = 440.). The default base frequency is 440 Hz'\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            const base = this.getProp(\"base\");\n            if (inlet === 0) {\n                if (typeof data === \"number\") {\n                    this.outlet(0, Math.log(data / base) / Math.log(2) * 12 + 69);\n                } else if (isNumberArray(data)) {\n                    this.outlet(0, data.map(n => Math.log(n / base) / Math.log(2) * 12 + 69));\n                }\n            }\n        });\n    }\n}\n\nexport default {\n    EmptyObject,\n    InvalidObject,\n    ftom,\n    mtof\n};\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Max.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"sourceRoot":""}