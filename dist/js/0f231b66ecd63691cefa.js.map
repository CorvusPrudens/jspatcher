{"version":3,"sources":["webpack://JSPatcher/./src/core/image/PatcherImage.ts"],"names":["PatcherImage","FileInstance","fromProjectItem","options","init","file","data","getEditor","editor","ImageEditor","objectURL","URL","createObjectURL","Response","blob","_isReady","emit","serialize","fetch","arrayBuffer","clone","patcherText","env","project"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAOe,MAAMA,YAAN,SAA2BC,uDAA3B,CAAqF;AAAA;AAAA;;AAAA;AAAA;;AACpE,eAAfC,eAAe,CAACC,OAAD,EAAwG;AAChI,WAAO,IAAI,IAAJ,CAASA,OAAT,EAAkBC,IAAlB,CAAuBD,OAAO,CAACE,IAAR,CAAaC,IAApC,CAAP;AACH;;AAEc,QAATC,SAAS,GAAG;AACd,UAAMC,MAAM,GAAG,IAAIC,iDAAJ,CAAgB,IAAhB,CAAf;AACA,WAAOD,MAAM,CAACJ,IAAP,EAAP;AACH;;AACS,QAAJA,IAAI,CAACE,IAAD,EAAqB;AAC3B,QAAIA,IAAJ,EAAU,KAAKI,SAAL,GAAiBC,GAAG,CAACC,eAAJ,CAAoB,MAAM,IAAIC,QAAJ,CAAaP,IAAb,EAAmBQ,IAAnB,EAA1B,CAAjB,CAAV,KACK,KAAKJ,SAAL,GAAiB,EAAjB;AACL,SAAKK,QAAL,GAAgB,IAAhB;AACA,SAAKC,IAAL,CAAU,OAAV;AACA,WAAO,IAAP;AACH;;AACc,QAATC,SAAS,GAAG;AACd,WAAO,CAAC,MAAMC,KAAK,CAAC,KAAKR,SAAN,CAAZ,EAA8BS,WAA9B,EAAP;AACH;;AACDC,OAAK,GAAG;AACJ,UAAMC,WAAW,GAAG,IAAIrB,YAAJ,CAAiB;AAAEsB,SAAG,EAAE,KAAKA,GAAZ;AAAiBC,aAAO,EAAE,KAAKA,OAA/B;AAAwClB,UAAI,EAAE,KAAKA;AAAnD,KAAjB,CAApB;AACAgB,eAAW,CAACX,SAAZ,GAAwB,KAAKA,SAA7B;AACA,WAAOW,WAAP;AACH;;AAvB+F,C","file":"js/0f231b66ecd63691cefa.js","sourcesContent":["import FileInstance from \"../file/FileInstance\";\nimport ImageEditor from \"./ImageEditor\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\n\nexport interface PatcherImageEventMap {}\n\nexport default class PatcherImage extends FileInstance<PatcherImageEventMap, PersistentProjectFile> {\n    static async fromProjectItem(options: { file: PersistentProjectFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }) {\n        return new this(options).init(options.file.data);\n    }\n    objectURL: string;\n    async getEditor() {\n        const editor = new ImageEditor(this);\n        return editor.init();\n    }\n    async init(data?: ArrayBuffer) {\n        if (data) this.objectURL = URL.createObjectURL(await new Response(data).blob());\n        else this.objectURL = \"\";\n        this._isReady = true;\n        this.emit(\"ready\");\n        return this;\n    }\n    async serialize() {\n        return (await fetch(this.objectURL)).arrayBuffer();\n    }\n    clone() {\n        const patcherText = new PatcherImage({ env: this.env, project: this.project, file: this.file });\n        patcherText.objectURL = this.objectURL;\n        return patcherText;\n    }\n}\n"],"sourceRoot":""}