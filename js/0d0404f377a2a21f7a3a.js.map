{"version":3,"file":"js/0d0404f377a2a21f7a3a.js","mappings":"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","sources":["webpack://DaisyBell/./src/core/hardware/HardwareHistory.ts","webpack://DaisyBell/./src/core/hardware/Patcher.ts"],"sourcesContent":["import History, { IHistoryEvent } from \"../file/History\";\nimport PatcherEditor, { PatcherHistoryEventMap } from \"./HardwareEditor\";\n\nexport default class PatcherHistory extends History<PatcherHistoryEventMap, PatcherEditor> {\n    get eventListening(): (keyof PatcherHistoryEventMap)[] {\n        return [\n            \"create\", \"delete\", \"changeBoxText\", \"boxChanged\",\n            \"changeLineA\", \"changeLineB\", \"moved\", \"resized\", \"propsChanged\"\n        ];\n    }\n    async undoOf(editor: PatcherEditor, eventName: keyof PatcherHistoryEventMap, eventData?: any) {\n        if (eventName === \"delete\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.create(e);\n        } else if (eventName === \"changeBoxText\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, oldText } = e;\n            await editor.instance.changeBoxText(boxId, oldText);\n        } else if (eventName === \"boxChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, oldArgs, oldProps, oldState, oldZIndex } = e;\n            await editor.changeBox(boxId, { args: oldArgs, props: oldProps, state: oldState, zIndex: oldZIndex });\n        } else if (eventName === \"moved\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, presentation } = e;\n            const d = { x: -1 * delta.x, y: -1 * delta.y };\n            editor.move(selected, d, presentation);\n            editor.moveEnd(selected, d);\n        } else if (eventName === \"changeLineA\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, oldA } = e;\n            editor.changeLineA(lineId, oldA[0], oldA[1]);\n        } else if (eventName === \"changeLineB\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, oldB } = e;\n            editor.changeLineB(lineId, oldB[0], oldB[1]);\n        } else if (eventName === \"create\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.delete(e);\n        } else if (eventName === \"resized\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, type: t, presentation } = e;\n            const d = { x: -1 * delta.x, y: -1 * delta.y };\n            editor.resize(selected, d, t, presentation);\n            editor.resizeEnd(selected, d, t);\n        } else if (eventName === \"propsChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            editor.instance.setProps(e.oldProps);\n        }\n    }\n    async redoOf(editor: PatcherEditor, eventName: keyof PatcherHistoryEventMap, eventData?: any) {\n        if (eventName === \"create\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.create(e);\n        } else if (eventName === \"changeBoxText\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, text } = e;\n            await editor.instance.changeBoxText(boxId, text);\n        } else if (eventName === \"boxChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, args, props, state, zIndex } = e;\n            await editor.changeBox(boxId, { args, props, state, zIndex });\n        } else if (eventName === \"moved\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, presentation } = e;\n            editor.move(selected, delta, presentation);\n            editor.moveEnd(selected, delta);\n        } else if (eventName === \"changeLineA\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, newA } = e;\n            editor.changeLineA(lineId, newA[0], newA[1]);\n        } else if (eventName === \"changeLineB\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, newB } = e;\n            editor.changeLineB(lineId, newB[0], newB[1]);\n        } else if (eventName === \"delete\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.delete(e);\n        } else if (eventName === \"resized\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, type: t, presentation } = e;\n            editor.resize(selected, delta, t, presentation);\n            editor.resizeEnd(selected, delta, t);\n        } else if (eventName === \"propsChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            editor.instance.setProps(e.props);\n        }\n    }\n    async mergeChanges(...events: IHistoryEvent<PatcherHistoryEventMap>[]) {\n        this.editors.forEach(e => e.state.selectAfterEdit = false);\n        const merged = await super.mergeChanges(...events);\n        this.editors.forEach(e => e.state.selectAfterEdit = true);\n        return merged;\n    }\n}\n","import FileInstance from \"../file/FileInstance\";\nimport PatcherEditor from \"./HardwareEditor\";\nimport Line from \"./Line\";\nimport Box from \"./Box\";\nimport PatcherHistory from \"./HardwareHistory\";\nimport BaseHardwareObjects from \"./objects/base/BaseHardwareObjects\";\nimport PackageManager, { IPackageManager } from \"../PackageManager\";\n// import { max2js, js2max } from \"../../utils/utils\";\n// import { toFaustDspCode } from \"../patcher/FaustPatcherAnalyser\";\nimport type Env from \"../Env\";\nimport type Project from \"../Project\";\nimport type TempHardwareFile from \"./TempHardwareFile\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\nimport type {\n  IHardwarePatcherObjectMeta,\n  IPropsMeta,\n  IHardwarePatcherObject,\n  THardwareMetaType,\n  IPropMeta,\n  IArgsMeta,\n} from \"./objects/base/AbstractHardwareObject\";\nimport type { TErrorLevel, TFlatPackage, TPackage, ILogInfo, TDependencies } from \"../types\";\nimport type { RawHardwarePatcher } from \"./types\";\nimport type { THardwareBox, THardwareLine, PatcherMode } from \"./types\";\nimport type PatcherNode from \"../worklets/PatcherNode\";\nimport type PatcherProcessor from \"../worklets/Patcher.worklet\";\nimport { IInletMeta, IOutletMeta } from \"../objects/base/AbstractObject\";\nimport { SemanticICONS } from \"semantic-ui-react\";\n\nexport type THardwareSubpatcherInlet = {\n  boxId: string;\n  inlet: number;\n};\n\nexport type THardwareSubpatcherOutlet = {\n  boxId: string;\n  outlet: number;\n};\n\nexport interface TPatcherProps {\n  mode: PatcherMode;\n  dependencies: TDependencies;\n  bgColor: string;\n  editingBgColor: string;\n  grid: [number, number];\n  boxIndexCount: number;\n  lineIndexCount: number;\n  package?: string;\n  name?: string;\n  author?: string;\n  version?: string;\n  description?: string;\n  openInPresentation: boolean;\n  objectInit: boolean;\n  // inlets: THardwareSubpatcherInlet[],\n  // outlets: THardwareSubpatcherOutlet[],\n}\nexport type TPublicPatcherProps = Pick<\n  TPatcherProps,\n  \"dependencies\" | \"bgColor\" | \"editingBgColor\" | \"grid\" | \"openInPresentation\"\n>;\n\nexport interface TPatcherState {\n  name: string;\n  isReady: boolean;\n  log: ILogInfo[];\n  selected: string[];\n  pkgMgr: IPackageManager;\n  preventEmitChanged: boolean;\n  patcherNode?: PatcherNode;\n  patcherProcessor?: PatcherProcessor;\n}\n\nexport interface PatcherEventMap extends TPublicPatcherProps {\n  postInited: never;\n  ready: never;\n  unload: never;\n  changeBoxText: { boxId: string; oldText: string; text: string };\n  boxChanged: {\n    boxId: string;\n    oldArgs?: any[];\n    args?: any[];\n    oldProps?: Record<string, any>;\n    props?: Record<string, any>;\n    oldState?: Record<string, any>;\n    state?: Record<string, any>;\n    oldZIndex?: number;\n    zIndex?: number;\n  };\n  zIndexChanged: { boxId: string; zIndex: number };\n  passiveDeleteLine: Line;\n  graphChanged: never;\n  changed: never;\n  ioChanged: IHardwarePatcherMeta;\n  // \"dataInput\": TInletEvent<any[]>;\n  // \"dataOutput\": TOutletEvent<any[]>;\n  audioInput: { input: number; buffer: Float32Array };\n  paramInput: { param: string; buffer: Float32Array };\n  audioOutput: { output: number; buffer: Float32Array };\n  propsChanged: {\n    props: Partial<TPublicPatcherProps>;\n    oldProps: Partial<TPublicPatcherProps>;\n  };\n  libChanged: { pkg: TPackage; lib: TFlatPackage };\n  highlightBox: string;\n  highlightPort: { boxId: string; isSrc: boolean; i: number } | null;\n}\n\nexport interface IHardwarePatcherMeta<P extends Record<string, any> = Record<string, any>> {\n  name: string;\n  icon: SemanticICONS;\n  version: string;\n  description: string;\n  args: IArgsMeta;\n  props: IPropMeta<P>;\n  patcherInlets: Map<[string, number], IInletMeta>;\n  patcherOutlets: Map<[string, number], IOutletMeta>;\n}\n\nexport default class Patcher extends FileInstance<\n  PatcherEventMap,\n  PersistentProjectFile | TempHardwareFile\n> {\n  static props: IPropsMeta<TPublicPatcherProps> = {\n    dependencies: {\n      type: \"object\",\n      description: \"Patcher dependencies\",\n      default: [],\n    },\n    bgColor: {\n      type: \"color\",\n      description: \"Background color\",\n      default: \"rgba(61, 65, 70, 1)\",\n    },\n    editingBgColor: {\n      type: \"color\",\n      description: \"Background color while unlocked\",\n      default: \"rgba(82, 87, 94, 1)\",\n    },\n    grid: {\n      type: \"object\",\n      description: \"Grid size\",\n      default: [15, 15],\n    },\n    openInPresentation: {\n      type: \"boolean\",\n      description: \"Open patcher in presentation\",\n      default: false,\n    },\n  };\n  static async fromProjectItem(options: {\n    file: PersistentProjectFile | TempHardwareFile;\n    env: IJSPatcherEnv;\n    project?: IProject;\n    instanceId?: string;\n  }): Promise<Patcher> {\n    return new this(options).init();\n  }\n  async getEditor() {\n    const editor = new PatcherEditor(this);\n    return editor.init();\n  }\n  // lib: { [key: string]: typeof IHardwarePatcherObject } = {\n  //   ...BaseHardwareObjects,\n  //   ...SomObjects,\n  //   ...HardwareObjects,\n  // };\n  lines: Record<string, Line> = {};\n  boxes: Record<string, Box> = {};\n  props: TPatcherProps;\n  _state: TPatcherState;\n  _history = new PatcherHistory();\n  constructor(options: {\n    env: IJSPatcherEnv;\n    project?: IProject;\n    file?: PersistentProjectFile | TempHardwareFile;\n    instanceId?: string;\n    objectInit?: boolean;\n  }) {\n    super(options);\n    this._state = {\n      name: \"patcher\",\n      isReady: false,\n      log: [],\n      selected: [],\n      pkgMgr: undefined,\n      preventEmitChanged: false,\n    };\n    this.lines = {};\n    this.boxes = {};\n    this.props = {\n      mode: \"daisy\",\n      dependencies: Patcher.props.dependencies.default.slice(),\n      bgColor: Patcher.props.bgColor.default,\n      editingBgColor: Patcher.props.editingBgColor.default,\n      grid: Patcher.props.grid.default.slice() as [number, number],\n      openInPresentation: Patcher.props.openInPresentation.default,\n      boxIndexCount: 0,\n      lineIndexCount: 0,\n      objectInit: typeof options.objectInit === \"boolean\" ? options.objectInit : true,\n      // inlets: [],\n      // outlets: []\n    };\n  }\n  get state() {\n    return this._state;\n  }\n  get activePkg() {\n    return this._state.pkgMgr.pkg;\n  }\n  get activeLib() {\n    return this._state.pkgMgr.lib;\n  }\n  get isReady() {\n    return !!this._state?.isReady;\n  }\n  get audioCtx() {\n    return (this.project as Project)?.audioCtx || (this.env as Env).audioCtx;\n  }\n  get fileExtension() {\n    return {\n      daisy: \"daisy\",\n    }[this.props.mode];\n  }\n  get fileName() {\n    return this.file?.name || `${this._state.name}.${this.fileExtension}`;\n  }\n  emitGraphChanged() {\n    if (this._state.preventEmitChanged) return;\n    this.emit(\"graphChanged\");\n    this.emitChanged();\n  }\n  emitChanged() {\n    if (this._state.preventEmitChanged) return;\n    this.emit(\"changed\");\n  }\n  boxChanged(\n    boxId: string,\n    changed: {\n      oldArgs?: any[];\n      args?: any[];\n      oldProps?: Record<string, any>;\n      props?: Record<string, any>;\n      oldState?: Record<string, any>;\n      state?: Record<string, any>;\n    }\n  ) {\n    this.emit(\"boxChanged\", { boxId, ...changed });\n  }\n  async init(data = this.file?.data, fileName = this.fileName) {\n    if (data instanceof ArrayBuffer) {\n      if (!data.byteLength) return this.load({});\n      const patcherIn = await new Response(data).json();\n      const splitName = fileName.split(\".\");\n      const ext = splitName.pop();\n      const extMap: Record<string, PatcherMode> = { daisy: \"daisy\" };\n      return this.load(patcherIn, extMap[ext] || \"daisy\");\n    }\n    return this.load(data || {});\n  }\n  async load(patcherIn: RawHardwarePatcher | any, modeIn?: PatcherMode) {\n    this._state.isReady = false;\n    this._state.preventEmitChanged = true;\n    await this.unload();\n    if (typeof patcherIn !== \"object\") {\n      this._state.isReady = true;\n      this._state.preventEmitChanged = false;\n      this.emit(\"ready\");\n      return this;\n    }\n    await this.env.taskMgr.newTask(this, \"Loading patcher...\", async (onUpdate) => {\n      this.props.mode = patcherIn.props?.mode || modeIn || \"daisy\";\n      this.state.pkgMgr = new PackageManager(this);\n      const { mode } = this.props;\n      const $init: Promise<Box>[] = [];\n      onUpdate(\"Decoding Patcher...\");\n      let patcher;\n      // if (mode === \"max\" || mode === \"gen\") {\n      //     if (!(patcherIn as TMaxPatcher).patcher) {\n      //         patcher = patcherIn;\n      //     } else {\n      //         patcher = max2js(patcherIn as TMaxPatcher);\n      //     }\n      // } else if (mode === \"js\" || mode === \"faust\" || mode === \"jsaw\") {\n      if (\"data\" in patcherIn && \"daisy\" in patcherIn) {\n        patcher = patcherIn.patcher;\n      } else {\n        patcher = patcherIn;\n      }\n      // }\n      if (patcher.props) this.props = { ...this.props, ...patcher.props, mode };\n      if (Array.isArray(this.props.bgColor))\n        this.props.bgColor = `rgba(${this.props.bgColor.join(\", \")})`;\n      if (Array.isArray(this.props.editingBgColor))\n        this.props.editingBgColor = `rgba(${this.props.editingBgColor.join(\", \")})`;\n      if (mode === \"daisy\" && this.props.dependencies) {\n        const { dependencies } = this.props;\n        if (!Array.isArray(dependencies)) {\n          this.props.dependencies = [];\n          for (const key in dependencies as Record<string, string>) {\n            this.props.dependencies.push([key, dependencies[key]]);\n          }\n        }\n      }\n      onUpdate(\"Initializing Packages...\");\n      await this._state.pkgMgr.init();\n      onUpdate(\"Creating Boxes...\");\n      if (patcher.boxes) {\n        // Boxes & data\n        for (const id in patcher.boxes) {\n          onUpdate(`Creating Boxes ${id}`);\n          const $ = this.createBox(patcher.boxes[id]);\n          $init.push($);\n          const numID = parseInt(id.match(/\\d+/)[0]);\n          if (numID > this.props.boxIndexCount) this.props.boxIndexCount = numID;\n        }\n      }\n      onUpdate(\"Initializing Boxes...\");\n      await Promise.all($init);\n      onUpdate(\"Creating Lines...\");\n      if (patcher.lines) {\n        // Lines\n        for (const id in patcher.lines) {\n          this.createLine(patcher.lines[id]);\n          const numID = parseInt(id.match(/\\d+/)[0]);\n          if (numID > this.props.lineIndexCount) this.props.lineIndexCount = numID;\n        }\n      }\n      onUpdate(\"Finishing...\");\n      this._state.isReady = true;\n      this._state.preventEmitChanged = false;\n      this.emitGraphChanged();\n      this.emit(\"ready\");\n      await Promise.all(Object.keys(this.boxes).map((id) => this.boxes[id].postInit()));\n      this.emit(\"postInited\");\n    });\n    return this;\n  }\n  // async getPatcherNode(inputs = 2, outputs = 2) {\n  //     if (this.props.mode === \"jsaw\" && this.env.thread === \"main\") {\n  //         const PatcherNode = (await import(\"../worklets/PatcherNode\")).default;\n  //         await PatcherNode.register(this.audioCtx.audioWorklet);\n  //         this.state.patcherNode = new PatcherNode(this.audioCtx, { env: this.env, instanceId: this.id, fileId: this.file?.id, data: this.file ? undefined : this.toSerializable(), inputs, outputs });\n  //         await this.state.patcherNode.init();\n  //         return this.state.patcherNode;\n  //     }\n  //     return null;\n  // }\n  async loadFromURL(url: string) {\n    try {\n      const file = await fetch(url);\n      if (!file.ok) throw new Error();\n      const parsed = (await file.json()) as RawHardwarePatcher;\n      return this.load(parsed);\n    } catch (e) {\n      this.error(`Fetch file ${url} failed.`);\n    }\n    return this;\n  }\n  async loadFromString(sIn: string) {\n    try {\n      const parsed = JSON.parse(sIn) as RawHardwarePatcher;\n      return this.load(parsed);\n    } catch (e) {\n      this.error(`Load from string: ${sIn.slice(20)}... failed.`);\n    }\n    return this;\n  }\n  async loadFromFile(file: File) {\n    const splitName = file.name.split(\".\");\n    const ext = splitName.pop();\n    const name = splitName.join(\".\");\n    const extMap: Record<string, PatcherMode> = { daisy: \"daisy\" };\n    if (!extMap[ext]) return this;\n    const reader = new FileReader();\n    reader.onload = () => {\n      let parsed: RawHardwarePatcher;\n      try {\n        parsed = JSON.parse(reader.result.toString());\n      } catch (e) {\n        this.error((e as Error).message);\n      }\n      if (parsed) {\n        this.load(parsed, extMap[ext]);\n        this._state.name = name;\n      }\n    };\n    reader.onerror = () => this.error(reader.error.message);\n    reader.readAsText(file, \"UTF-8\");\n    return this;\n  }\n  async unload() {\n    await this.emit(\"unload\");\n    if (Object.keys(this.boxes).length) {\n      this._state.preventEmitChanged = true;\n      await Promise.all(Object.keys(this.boxes).map((id) => this.boxes[id].destroy()));\n      this._state.preventEmitChanged = false;\n      this.emitGraphChanged();\n    }\n    this.lines = {};\n    this.boxes = {};\n    this.props = {\n      mode: \"daisy\",\n      dependencies: Patcher.props.dependencies.default.slice(),\n      bgColor: Patcher.props.bgColor.default,\n      editingBgColor: Patcher.props.editingBgColor.default,\n      grid: Patcher.props.grid.default.slice() as [number, number],\n      openInPresentation: Patcher.props.openInPresentation.default,\n      boxIndexCount: 0,\n      lineIndexCount: 0,\n      objectInit: true,\n      // inlets: [],\n      // outlets: [],\n    };\n    this._state.selected = [];\n  }\n  async destroy() {\n    await this.unload();\n    await super.destroy();\n  }\n  async addPackage(namespace: string, url: string) {\n    const { dependencies } = this.props;\n    dependencies.push([namespace, url]);\n    this.setProps({ dependencies: dependencies.slice() });\n    await this.state.pkgMgr.init();\n    if (!(namespace in this.activePkg)) {\n      this.setProps({\n        dependencies: dependencies.filter(([id]) => id !== namespace),\n      });\n    }\n  }\n  async removePackage(id: string) {\n    const { dependencies } = this.props;\n    const i = dependencies.findIndex((t) => t[0] === id);\n    if (i === -1) return;\n    dependencies.splice(i, 1);\n    this.setProps({ dependencies: dependencies.slice() });\n    await this.state.pkgMgr.init();\n  }\n  async createBox(boxIn: THardwareBox) {\n    if (!boxIn.id || boxIn.id in this.boxes) boxIn.id = \"box-\" + ++this.props.boxIndexCount;\n    const box = new Box(this, boxIn);\n    this.boxes[box.id] = box;\n    await box.init();\n    this.emitGraphChanged();\n    this.changeIO();\n    return box;\n  }\n  getObjectConstructor(parsed: { class: string; args: any[]; props: Record<string, any> }) {\n    const className = parsed.class;\n    if (typeof className !== \"string\" || className.length === 0) return this.activeLib.EmptyObject;\n    if (this.activeLib[className]) return this.activeLib[className];\n    return this.activeLib.InvalidObject;\n  }\n  getObjectMeta(parsed: { class: string; args: any[]; props: Record<string, any> }) {\n    return this.getObjectConstructor(parsed).meta;\n  }\n  async changeBoxText(boxId: string, text: string) {\n    const oldText = this.boxes[boxId].text;\n    if (oldText === text) return this.boxes[boxId];\n    await this.boxes[boxId].changeText(text);\n    this.emit(\"changeBoxText\", { oldText, text, boxId });\n    this.emitGraphChanged();\n    return this.boxes[boxId];\n  }\n  async deleteBox(boxId: string) {\n    const box = this.boxes[boxId];\n    if (!box) return null;\n    await box.destroy();\n    this.emitGraphChanged();\n    this.changeIO();\n    return box;\n  }\n  createLine(lineIn: THardwareLine) {\n    if (!this.canCreateLine(lineIn)) return null;\n    if (!lineIn.id || lineIn.id in this.lines) lineIn.id = \"line-\" + ++this.props.lineIndexCount;\n    const line = new Line(this, lineIn);\n    this.lines[line.id] = line;\n    line.enable();\n    this.emitGraphChanged();\n    return line;\n  }\n  canCreateLine(lineIn: THardwareLine) {\n    if (lineIn.aIo[1] >= this.boxes[lineIn.aIo[0]].ios.length) return false;\n    if (this.getLinesByBox(lineIn.aIo[0], lineIn.bIo[0], lineIn.aIo[1], lineIn.bIo[1]).length > 0)\n      return false;\n    return true;\n  }\n  deleteLine(lineId: string) {\n    const line = this.lines[lineId];\n    if (!line) return null;\n    line.destroy();\n    if (!this._state.preventEmitChanged) this.emit(\"passiveDeleteLine\", line);\n    this.emitGraphChanged();\n    return line;\n  }\n\n  changeLineA(lineId: string, aId: string, aIo: number) {\n    const line = this.lines[lineId];\n    const oldA: [string, number] = [...line.aIo];\n    const newA: [string, number] = [aId, aIo];\n    line.setA(newA);\n    this.emitGraphChanged();\n    return { lineId, oldA, newA };\n  }\n\n  changeLineB(lineId: string, bId: string, bIo: number) {\n    const line = this.lines[lineId];\n    const oldB: [string, number] = [...line.bIo];\n    const newB: [string, number] = [bId, bIo];\n    line.setB(newB);\n    this.emitGraphChanged();\n    return { lineId, oldB, newB };\n  }\n\n  // changeLineSrc(lineId: string, srcId: string, srcOutlet: number) {\n  //     const line = this.lines[lineId];\n  //     // if (this.instance.getLinesByBox(srcId, line.destId, srcOutlet, line.destInlet).length > 0) return line;\n  //     const oldSrc: [string, number] = [line.srcId, line.srcOutlet];\n  //     const src: [string, number] = [srcId, srcOutlet];\n  //     line.setSrc(src);\n  //     this.emitGraphChanged();\n  //     return { lineId, oldSrc, src };\n  // }\n  // changeLineDest(lineId: string, destId: string, destOutlet: number) {\n  //     const line = this.lines[lineId];\n  //     // if (this.getLinesByBox(line.srcId, destId, line.destInlet, destOutlet).length > 0) return line;\n  //     const oldDest: [string, number] = [line.destId, line.destInlet];\n  //     const dest: [string, number] = [destId, destOutlet];\n  //     line.setDest(dest);\n  //     this.emitGraphChanged();\n  //     return { lineId, oldDest, dest };\n  // }\n  getLinesByAId(aId: string) {\n    const result = [];\n    for (let i = 0; i < this.boxes[aId].ios.length; i++) {\n      // Array.fill fills the array with same instance\n      result[i] = [];\n    }\n    for (const id in this.lines) {\n      const line = this.lines[id];\n      if (line && line.aId === aId) {\n        const bIo = line.bIo;\n        if (!result[bIo[1]]) result[bIo[1]] = [id];\n        else result[bIo[1]].push(id);\n      }\n    }\n    return result;\n  }\n  getLinesByBId(bId: string) {\n    const result = [];\n    for (let i = 0; i < this.boxes[bId].ios.length; i++) {\n      // Array.fill fills the array with same instance\n      result[i] = [];\n    }\n    for (const id in this.lines) {\n      const line = this.lines[id];\n      if (line && line.bId === bId) {\n        const aIo = line.aIo;\n        if (!result[aIo[1]]) result[aIo[1]] = [id];\n        else result[aIo[1]].push(id);\n      }\n    }\n    return result;\n  }\n  // getLinesBySrcID(srcId: string) {\n  //     const result = [];\n  //     for (let i = 0; i < this.boxes[srcId].outlets; i++) { // Array.fill fills the array with same instance\n  //         result[i] = [];\n  //     }\n  //     for (const id in this.lines) {\n  //         const line = this.lines[id];\n  //         if (line && line.srcId === srcId) {\n  //             const srcOutlet = line.srcOutlet;\n  //             if (!result[srcOutlet]) result[srcOutlet] = [id];\n  //             else result[srcOutlet].push(id);\n  //         }\n  //     }\n  //     return result;\n  // }\n  // getLinesByDestID(destId: string) {\n  //     const result = [];\n  //     for (let i = 0; i < this.boxes[destId].inlets; i++) {\n  //         result[i] = [];\n  //     }\n  //     for (const id in this.lines) {\n  //         const line = this.lines[id];\n  //         if (line && line.destId === destId) {\n  //             const destInlet = line.destInlet;\n  //             if (!result[destInlet]) result[destInlet] = [id];\n  //             else result[destInlet].push(id);\n  //         }\n  //     }\n  //     return result;\n  // }\n  getLinesByBox(aId: string, bId: string, aIo?: number, bIo?: number) {\n    const result: string[] = [];\n    let aIds: string[] = [];\n    let bIds: string[] = [];\n    const aIosWrapped = this.getLinesByAId(aId);\n    if (aIo !== undefined) aIds = aIosWrapped[aIo];\n    else aIosWrapped.forEach((el) => (aIds = aIds.concat(el)));\n\n    const bIosWrapped = this.getLinesByBId(bId);\n    if (bIo !== undefined) bIds = bIosWrapped[bIo];\n    else bIosWrapped.forEach((el) => (bIds = bIds.concat(el)));\n\n    if (!aIds || !bIds) return result;\n\n    bIds.forEach((idOut) =>\n      bIds.forEach((idIn) => (idIn === idOut ? result.push(idIn) : undefined))\n    );\n    return result;\n  }\n  // getLinesByIo(boxId: string, io: number) {\n  //     const box = this.boxes[boxId];\n  //     if (!box || io > box.ios.length) {\n  //         return [];\n  //     }\n\n  //     const lines = [];\n\n  //     if (box.text.startsWith(\"tie\")) {\n  //         for (let key in this.lines) {\n  //             let line = this.lines[key];\n  //             if (line.aId === boxId || line.bId === boxId) {\n  //                 lines.push(line);\n  //             }\n  //         }\n  //     } else {\n  //         for (let key in this.lines) {\n  //             let line = this.lines[key];\n  //             if ((line.aId === boxId && line.aIo[1] === io) || (line.bId === boxId && line.bIo[1] === io)) {\n  //                 lines.push(line);\n  //             }\n  //         }\n  //     }\n  //     return lines;\n  // }\n  // getConnectedPins(boxId: string, io: number) {\n  //     let lines = this.getLinesByIo(boxId, io);\n\n  //     let all_boxes = lines.flatMap(line => [line.aIo, line.bIo]);\n  //     let unique_boxes = Array.from(new Set(all_boxes));\n\n  //     return unique_boxes.map(([id, io]) => this.boxes[id].meta.ios[io].pin);\n  // }\n  fn(data: any, inlet: number) {\n    // this.emit(\"dataInput\", { data, inlet });\n  }\n  inputAudio(input: number, buffer: Float32Array) {\n    this.emitSync(\"audioInput\", { input, buffer });\n  }\n  inputParam(param: string, buffer: Float32Array) {\n    this.emitSync(\"paramInput\", { param, buffer });\n  }\n  outputAudio(output: number, buffer: Float32Array) {\n    this.emitSync(\"audioOutput\", { output, buffer });\n  }\n  // outlet(outlet: number, data: any) {\n  //     this.emit(\"dataOutput\", { data, outlet });\n  // }\n  changeIO() {\n    this.emit(\"ioChanged\", this.meta);\n  }\n  get meta(): IHardwarePatcherMeta {\n    const { metaFromPatcher } = this;\n    return {\n      name: this.props.name || \"\",\n      icon: null,\n      version: this.props.version || \"\",\n      description: this.props.description || \"\",\n      ...metaFromPatcher,\n    };\n  }\n  get metaFromPatcher(): Pick<\n    IHardwarePatcherMeta,\n    \"args\" | \"props\" | \"patcherInlets\" | \"patcherOutlets\"\n  > {\n    const inlets: Map<[string, number], IInletMeta> = new Map();\n    const outlets: Map<[string, number], IOutletMeta> = new Map();\n    for (const boxId in this.boxes) {\n      const box = this.boxes[boxId];\n\n      if (box.meta.patcherInlets) {\n        for (const [index, inlet] of box.meta.patcherInlets.entries()) {\n          inlets.set([boxId, index], inlet);\n        }\n      }\n\n      if (box.meta.patcherOutlets) {\n        for (const [index, outlet] of box.meta.patcherOutlets.entries()) {\n          outlets.set([boxId, index], outlet);\n        }\n      }\n    }\n    // console.log(`inlets: ${JSON.stringify(Array.from(inlets.entries()))}, outlets: ${JSON.stringify(Array.from(outlets.entries()))}`);\n    return {\n      args: [],\n      props: {},\n      patcherInlets: inlets,\n      patcherOutlets: outlets,\n    };\n  }\n  log(message: string) {\n    this.newLog(\"none\", \"Patcher\", message, this);\n  }\n  error(message: string) {\n    this.newLog(\"error\", \"Patcher\", message, this);\n  }\n  newLog(errorLevel: TErrorLevel, title: string, message: string, emitter?: any) {\n    this.env.newLog(errorLevel, title, message, emitter);\n  }\n  setProps(props: Partial<TPublicPatcherProps>) {\n    let changed = false;\n    const oldProps: Partial<TPublicPatcherProps> = {};\n    for (const keyIn in props) {\n      const key = keyIn as keyof TPublicPatcherProps;\n      if (this.props[key] === props[key]) continue;\n      changed = true;\n      (oldProps as any)[key] = this.props[key];\n      (this.props as any)[key] = props[key];\n      this.emit(key, props[key]);\n    }\n    if (changed) {\n      this.emit(\"propsChanged\", { props, oldProps });\n      this.emitChanged();\n    }\n  }\n  get publicProps() {\n    const { dependencies, bgColor, editingBgColor, grid, openInPresentation } = this.props;\n    return {\n      dependencies,\n      bgColor,\n      editingBgColor,\n      grid,\n      openInPresentation,\n    } as TPublicPatcherProps;\n  }\n  toString(spacing?: number) {\n    const { props, meta } = this;\n    const boxes: RawHardwarePatcher[\"boxes\"] = {};\n    const lines: RawHardwarePatcher[\"lines\"] = {};\n\n    const inlets = Array.from(meta.patcherInlets.entries()).map(([key, _]) => key);\n    const outlets = Array.from(meta.patcherOutlets.entries()).map(([key, _]) => key);\n\n    for (const id in this.boxes) {\n      boxes[id] = this.boxes[id].toSerializable();\n    }\n    for (const id in this.lines) {\n      lines[id] = this.lines[id].toSerializable();\n    }\n    return JSON.stringify({ boxes, lines, props, inlets, outlets }, undefined, spacing);\n  }\n  toSerializable(): RawHardwarePatcher {\n    return JSON.parse(this.toString());\n  }\n  serialize() {\n    return new Blob([this.toString()]).arrayBuffer();\n  }\n}\n"],"names":[],"sourceRoot":""}