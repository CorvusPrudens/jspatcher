{"version":3,"file":"index.jspatpkg.js","mappings":";;;;;;;;;;;;;;;;AAIO,MAAM,gBAAgB,MAAa;AAAA,EACtC,OAAO,KAAK,QAAiB;AACzB,UAAM,SAAS,IAAI,QAAQ;AAE3B,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,aAAO,KAAK,OAAO;AAAA,IACvB;AAEA,WAAO;AAAA,EACX;AAAA,EAGA,WAAW,OAAc;AACrB,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK,OAAO;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,OAAc;AACnB,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK,KAAK,SAAS,OAAO;AAAA,IACrC;AACA,WAAO;AAAA,EACX;AAAA,EAKA,WAAW,IAAsC;AAC7C,WAAO,CAAC,UAAmB;AACvB,YAAM,SAAS,IAAI,QAAQ;AAC3B,YAAM,YAAY,KAAK,IAAI,KAAK,QAAQ,MAAM,MAAM;AAEpD,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAI,OAAO,KAAK,OAAO,YAAY,OAAO,MAAM,OAAO,UAAU;AAC7D,iBAAO,KAAK,GAAG,KAAK,IAAc,MAAM,EAAY,CAAC;AAAA,QACzD,OAAO;AACH,iBAAO,KAAK,KAAK,EAAE;AAAA,QACvB;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEO,mBAAmB,OAAY;AAClC,SAAO,iBAAiB;AAC5B;AAEO,sBAAsB,MAAW;AACpC,MAAI,gBAAgB,WAAW,gBAAgB,OAAO;AAClD,WAAO,KAAK;AAAA,EAChB,OAAO;AACH,WAAO;AAAA,EACX;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DyC;AAGlC,MAAM,OAAO,gEAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,aAAa,EAAE;AAEtE,MAAM,EAAE,QAAQ,SAAS,UAAU,SAAS,aAAa,cAAc,qDAAW;AAEzF,iEAAe,iBAAE,MAAM,QAAQ,SAAS,UAAU,SAAS,eAAgB;;;;;;;;;;;;;;;;;;ACP3E;AACA;AAEqD;AAErD,MAAM,iBAAiB;AAAA,EAGnB,cAAsB;AAAA,EAAE;AAAA,EAExB,OAAO,SAAsB;AACzB,QAAI,CAAC,iBAAiB,oBAAoB;AACtC,uBAAiB,qBAAqB,oBAAI,IAAY;AAAA,IAC1D;AAEA,WAAO,iBAAiB;AAAA,EAC5B;AAAA,EAEA,aAAoB,UAAU,UAAe,MAAc,KAAa;AACpE,QAAI,MAAM,iBAAiB,OAAO;AAClC,QAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAChB,UAAI,IAAI,IAAI;AACZ,YAAM,SAAS,aAAa,UAAU,GAAG;AAAA,IAC7C;AAAA,EACJ;AACJ;AAEO,wBAAwB,WAAkC,MAAc,cAAsB,OAAuC;AA3B5I;AA4CI,SAAO,mBAMG,+CAAa,CAA4B;AAAA,IAN5C;AAAA;AAmBH,eAAiC;AAAA,QAC7B,OAAO;AAAA,QACP,eAAe,CAAC;AAAA,QAChB,WAAW,CAAC;AAAA,QACZ,oBAAoB,CAAC;AAAA,QACrB,YAAY,UAAU,cAAc;AAAA,MACxC;AAAA;AAAA,IACA,IAAI,mBAAmB;AACnB,aAAO,KAAK,WAAW,IAAI,SAAO,CAAC,GAAG,GAAG,EAAE,KAAK,OAAK,CAAC,EAAE,YAAY,EAAE,oBAAoB,CAAC,EAAE,IAAI,OAAK,CAAC,CAAC,CAAC;AAAA,IAC7G;AAAA,IACA,0BAA0B;AACtB,YAAM,EAAE,qBAAqB;AAC7B,YAAM,EAAE,WAAW,uBAAuB,KAAK;AAC/C,UAAI,CAAC,KAAK;AAAQ;AAClB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAI,iBAAiB,OAAO,mBAAmB;AAAI;AACnD,cAAM,WAAW,UAAU;AAC3B,YAAI,iBAAiB,IAAI;AACrB,mBAAS,OAAO,QAAQ;AAAA,QAC5B,WAAW,CAAC,iBAAiB,MAAM,CAAC,mBAAmB,IAAI;AACvD,mBAAS,OAAO,QAAQ,KAAK,EAAE,cAAc,MAAM;AAAA,QACvD;AACA,2BAAmB,KAAK,iBAAiB;AAAA,MAC7C;AAAA,IACJ;AAAA,IACA,YAAY;AACR,YAAM,UAAU;AAChB,WAAK,GAAG,WAAW,MAAM;AACrB,cAAM,EAAE,QAAQ,YAAY,EAAE,QAAQ,UAAU,OAAO,QAAQ,SAAS,UAAU,QAAQ,OAAO;AAEjG,YAAI,QAAQ;AACR,gBAAM,SAAS,KAAK,SAAS,oBAAoB,MAAM;AACvD,eAAK,EAAE,SAAS;AAChB,mBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,kBAAM,WAAW,KAAK,SAAS,qBAAqB;AACpD,iBAAK,EAAE,UAAU,KAAK;AACtB,qBAAS,QAAQ,QAAQ,GAAG,CAAC;AAC7B,iBAAK,EAAE,mBAAmB,KAAK;AAAA,UACnC;AAAA,QACJ;AACA,cAAM,WAAW,KAAK,SAAS,sBAAsB,OAAO;AAC5D,aAAK,EAAE,WAAW;AAElB,aAAK,SAAS;AACd,aAAK,UAAU;AACf,aAAK,gBAAgB;AACrB,aAAK,wBAAwB,KAAK,EAAE,UAAU,IAAI,CAAC,SAAU,GAAE,MAAM,KAAK,QAAQ,OAAO,EAAE,EAAE;AAC7F,aAAK,yBAAyB,IAAI,MAAM,OAAO,EAAE,KAAK,IAAI,EAAE,IAAI,CAAC,GAAG,MAAO,GAAE,MAAM,UAAU,OAAO,EAAE,EAAE;AACxG,aAAK,aAAa;AAAA,MACtB,CAAC;AACD,WAAK,GAAG,YAAY,YAAY;AAE5B,cAAM,EAAE,OAAO,WAAW,QAAQ,UAAU,eAAe,KAAK;AAChE,cAAM,MAAM,2DAAqB,CAAC,WAAW,OAAO,KAAK,SAAS,YAAY,cAAc,KAAK;AACjG,cAAM,iBAAiB,UAAU,KAAK,UAAU,OAAO,GAAG;AAC1D,cAAM,OAAO,IAAI,iBAAiB,KAAK,UAAU,KAAK;AACtD,aAAK,EAAE,OAAO;AACd,aAAK,wBAAwB;AAC7B,yCAAQ,QAAQ;AAChB,aAAK,QAAQ,QAAQ;AACrB,kBAAU,QAAQ,CAAC,UAAU,MAAM;AA3HnD;AA4HoB,gBAAM,WAAW,KAAK,KAAK,IAAI;AAC/B,cAAI,CAAC,KAAK,EAAE,mBAAmB;AAAI,qBAAS,OAAO,QAAQ,OAAO,aAAa,WAAW,CAAC,WAAY,YAAK,EAAE,cAAc,OAArB,aAA2B;AAClI,mBAAS,MAAM;AAAA,QACnB,CAAC;AAAA,MACL,CAAC;AACD,WAAK,GAAG,eAAe,MAAM;AACzB,aAAK,EAAE,UAAU,QAAQ,CAAC,UAAU,MAAM;AAlI1D;AAmIoB,gBAAM,WAAW,KAAK,KAAK,IAAI,KAAK,EAAE;AACtC,cAAI,CAAC,KAAK,EAAE,mBAAmB;AAAI,qBAAS,OAAO,QAAQ,OAAO,aAAa,WAAW,CAAC,WAAY,YAAK,EAAE,cAAc,OAArB,aAA2B;AAAA,QACtI,CAAC;AAAA,MACL,CAAC;AACD,WAAK,GAAG,SAAS,CAAC,EAAE,OAAO,WAAW;AAClC,YAAI,OAAO,SAAS,UAAU;AAC1B,cAAI,KAAK,EAAE,UAAU,UAAU,CAAC,KAAK,EAAE,mBAAmB,QAAQ;AAC9D,kBAAM,WAAW,KAAK,EAAE,UAAU;AAClC,qBAAS,OAAO,QAAQ,SAAS,OAAO;AACxC,qBAAS,OAAO,wBAAwB,MAAM,KAAK,SAAS,cAAc,KAAK,QAAQ,aAAa,CAAC;AAAA,UACzG;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,WAAK,GAAG,kBAAkB,MAAM,KAAK,wBAAwB,CAAC;AAC9D,WAAK,GAAG,qBAAqB,MAAM,KAAK,wBAAwB,CAAC;AACjE,WAAK,GAAG,WAAW,MAAM;AACrB,cAAM,EAAE,WAAW,QAAQ,UAAU,SAAS,KAAK;AACnD,kBAAU,QAAQ,cAAY,qCAAU,YAAY;AACpD,yCAAQ;AACR,6CAAU;AACV,qCAAM;AAAA,MAEV,CAAC;AAAA,IACL;AAAA,EACJ,GAvGI,GAAO,UAAU,wCAAY,EAC7B,GAAO,SAAS,0CAAM,EACtB,GAAO,UAAU,2CAAO,EACxB,GAAO,cAAc,UAAU,aAC/B,GAAO,SAAS,UAAU,QAC1B,GAAO,UAAU,UAAU,SAC3B,GAAO,OAAO,UAAU,MACxB,GAAO,QAAQ,UAAU,OACzB,GAAO,OAAO,UAAU,MAExB,GAAO,KAAK,2CAAS,EAlBlB;AAgHX;;;;;;;;;;;;;;;;AC1JO,MAAM,kBAAkB;AAM/B;AAEe,MAAM,eAAe;AAAA,EAkBhC,WAAW,uBAAuB;AAC9B,UAAM,SAAS,CAAC;AAChB,eAAW,QAAQ,KAAK,kBAAkB;AACtC,aAAO,KAAK,KAAK,iBAAiB,KAAK;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AAAA,EAEzB;AAAA,EAEA,QAAQ,QAA0B,SAA2B,YAAmD;AAC5G,WAAO;AAAA,EACX;AAEJ;AAhCI,eAAO,mBAAsD,CAAC;AAG9D,eAAO,SAAsB,CAAC;AAC9B,eAAO,UAAwB,CAAC;AAChC,eAAO,OAAkB,CAAC;AAC1B,eAAO,QAAoB;AAAA,EACvB,aAAa;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACjB;AACJ;;;;;;;;;;;;;;;;;ACxBmC;AAEvC,iEAAe,iNAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApB,MAAM,MAAO,WAAmB,aAAa;AACtC,MAAM;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACA;;;;;;;;;;;;;;;;AClB0C;AAE9C,MAAM,wBAAwB,CAAC,WAAkC,OAAe,YAAoB,cAAsB,UAAkD;AAExK,QAAM,mBAAmB,UAAU,SAAS,EAAE,QAAQ,mBAAmB,WAAW,4DAAmB,IAAI;AAE3G,QAAM,WAAW,QAAQ,MAAM,IAAI,CAAC,MAAM,SAAS,EAAE,UAAU,KAAK,UAAU,EAAE,IAAI,GAAG,EAAE,KAAK,IAAI,IAAI;AAEtG,QAAM,OAAO,eAAe,aAAa,IAAI,CAAC,QAAQ,SAAS,IAAI,UAAU,IAAI,SAAS,GAAG,EACxF,KAAK,IAAI,IAAI;AAElB,QAAM,gBAAgB;AAAA;AAAA,UAEhB;AAAA;AAAA,UAEA;AAAA;AAAA,gBAEM,4DAAmB,MAAM,gEAAuB,CAAC;AAAA;AAAA,iCAEhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAOK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAaT;AAAA;AAAA;AAKzB,QAAM,uBAAuB,cAAc,QAAQ,0CAA0C,EAAE;AAE/F,QAAM,MAAM,IAAI,gBAAgB,IAAI,KAAK,CAAC,oBAAoB,GAAG,EAAE,MAAM,kBAAkB,CAAC,CAAC;AAC7F,SAAO;AACX;AAEA,iEAAe,qBAAqB,EAAC;;;;;;;;;;;;;;;;ACnDrC;AAGe,MAAM,gBAAgB,+CAAa,CAA4E;AAAA,EAA9H;AAAA;AA8CI,aAAI;AAAA,MACA,OAAO;AAAA,MACP,aAAa;AAAA,MACb,OAAO;AAAA,MACP,QAAQ,CAAC;AAAA,MACT,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,eAAe;AAAA,IACnB;AAAA;AAAA,EAEA,aAAa;AACT,UAAM,MAAM,YAAY,IAAI;AAC5B,UAAM,gBAAgB,KAAK,EAAE,OAAO,KAAK,EAAE;AAE3C,QAAI,WAAW,cAAc,aAAa,IACpC,IACC,OAAM,KAAK,EAAE,QAAQ,cAAc;AAE1C,QAAI,WAAW;AACX,iBAAW;AAEf,UAAM,SAAS,KAAK,EAAE,QAAS,eAAc,QAAQ,KAAK,EAAE,SAAS;AAErE,WAAO;AAAA,EACX;AAAA,EAEA,YAAY;AACR,UAAM,UAAU;AAEhB,UAAM,eAAe,MAAM;AACvB,YAAM,gBAAgB,KAAK,EAAE,OAAO,KAAK,EAAE;AAC3C,YAAM,MAAM,YAAY,IAAI;AAC5B,UAAI,MAAM,KAAK,EAAE,QAAQ,cAAc,UAAU;AAC7C,aAAK,EAAE;AACP,YAAI,KAAK,EAAE,iBAAiB,KAAK,EAAE,YAAY;AAC3C,eAAK,EAAE,gBAAgB;AACvB,eAAK,OAAO,GAAG,IAAI,sCAAI,CAAC,CAAC;AACzB,eAAK,OAAO,GAAG,cAAc,KAAK;AAClC,cAAI,KAAK,EAAE,aAAa;AACpB,mBAAO,cAAc,KAAK,EAAE,WAAW;AACvC,iBAAK,EAAE,cAAc;AAAA,UACzB;AACA;AAAA,QACJ;AACA,aAAK,EAAE,OAAO;AACd,aAAK,EAAE,QAAQ,cAAc;AAAA,MACjC;AAEA,YAAM,SAAS,KAAK,WAAW;AAE/B,WAAK,OAAO,GAAG,MAAM;AAAA,IACzB;AAEA,UAAM,gBAAgB,MAAM;AACxB,mBAAa;AACb,WAAK,EAAE,cAAc,OAAO,YAAY,cAAc,KAAK,EAAE,KAAK;AAAA,IACtE;AAEA,UAAM,gBAAgB,MAAM;AACxB,UAAI,KAAK,EAAE,YAAY;AACnB,eAAO,aAAa,KAAK,EAAE,UAAU;AACrC,aAAK,EAAE,aAAa;AAAA,MACxB;AACA,UAAI,KAAK,EAAE,aAAa;AACpB,eAAO,cAAc,KAAK,EAAE,WAAW;AACvC,aAAK,EAAE,cAAc;AAAA,MACzB;AAEA,YAAM,UAAU,KAAK,EAAE;AACvB,WAAK,EAAE,aAAa,OAAO,WAAW,eAAe,OAAO;AAC5D,WAAK,EAAE,OAAO,YAAY,IAAI;AAAA,IAClC;AAGA,SAAK,GAAG,WAAW,MAAM;AACrB,WAAK,SAAS;AACd,WAAK,UAAU;AAEf,UAAI,YAAY,KAAK,QAAQ,WAAW;AACxC,WAAK,EAAE,SAAS,MAAM,KAAK,EAAE,QAAQ,UAAU,GAAG,MAAO,GAAE,OAAO,GAAK,UAAU,EAAI,EAAE;AAEvF,UAAI,KAAK,KAAK,UAAU,GAAG;AACvB,aAAK,EAAE,QAAQ,KAAK,KAAK;AAAA,MAC7B;AAEA,UAAI,KAAK,KAAK,UAAU,GAAG;AACvB,aAAK,EAAE,QAAQ,KAAK,KAAK;AACzB,YAAI,KAAK,EAAE,QAAQ,GAAK;AACpB,eAAK,MAAM,0CAA0C;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,GAAG,gBAAgB,CAAC,EAAE,YAAY;AACnC,UAAI,YAAY,KAAK,QAAQ,WAAW;AACxC,WAAK,EAAE,SAAS,MAAM,KAAK,EAAE,QAAQ,UAAU,GAAG,MAAO,GAAE,OAAO,GAAK,UAAU,EAAI,EAAE;AAAA,IAC3F,CAAC;AACD,SAAK,GAAG,eAAe,CAAC,EAAE,WAAW;AACjC,UAAI,KAAK,UAAU,GAAG;AAClB,aAAK,EAAE,QAAQ,KAAK;AAAA,MACxB;AAEA,UAAI,KAAK,UAAU,GAAG;AAClB,aAAK,EAAE,QAAQ,KAAK;AACpB,YAAI,KAAK,EAAE,QAAQ,GAAK;AACpB,eAAK,MAAM,0CAA0C;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,GAAG,SAAS,OAAO,EAAE,MAAM,YAAY;AACxC,UAAI,UAAU,GAAG;AACb,YAAI,OAAO,SAAS,UAAU;AAC1B,eAAK,EAAE,QAAQ;AACf,cAAI,KAAK,EAAE,aAAa;AACpB,mBAAO,cAAc,KAAK,EAAE,WAAW;AACvC,iBAAK,EAAE,cAAc;AAAA,UACzB;AACA,eAAK,OAAO,GAAG,KAAK,EAAE,KAAK;AAC3B;AAAA,QACJ,WAAW,KAAK,UAAU,GAAG;AACzB,eAAK,EAAE,QAAQ,KAAK;AACpB,cAAI,KAAK,EAAE,aAAa;AACpB,mBAAO,cAAc,KAAK,EAAE,WAAW;AACvC,iBAAK,EAAE,cAAc;AAAA,UACzB;AACA,eAAK,OAAO,GAAG,KAAK,EAAE,KAAK;AAE3B;AAAA,QACJ,OAAO;AAEH,gBAAM,eAAe,KAAK,SAAS;AACnC,gBAAM,aAAa,eAAe,KAAK,EAAE,OAAO,SAAS,KAAK,EAAE,OAAO,SAAS;AAEhF,mBAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,kBAAM,QAAQ,IAAI;AAClB,iBAAK,EAAE,OAAO,GAAG,QAAQ,KAAK;AAC9B,iBAAK,EAAE,OAAO,GAAG,WAAW,KAAK,QAAQ;AAAA,UAC7C;AAEA,eAAK,EAAE,aAAa;AACpB,eAAK,EAAE,gBAAgB;AACvB,wBAAc;AAAA,QAClB;AAAA,MACJ,WAAW,UAAU,GAAG;AACpB,YAAI,OAAO,SAAS,UAAU;AAC1B,eAAK,EAAE,QAAQ;AACf,cAAI,KAAK,EAAE,QAAQ,GAAK;AACpB,iBAAK,MAAM,0CAA0C;AAAA,UACzD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,GAAG,WAAW,MAAM;AACrB,UAAI,KAAK,EAAE,YAAY;AACnB,eAAO,aAAa,KAAK,EAAE,UAAU;AACrC,aAAK,EAAE,aAAa;AAAA,MACxB;AACA,UAAI,KAAK,EAAE,aAAa;AACpB,eAAO,cAAc,KAAK,EAAE,WAAW;AACvC,aAAK,EAAE,cAAc;AAAA,MACzB;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAjNI,QAAO,UAAU;AACjB,QAAO,SAAS;AAChB,QAAO,UAAU;AACjB,QAAO,cAAc;AACrB,QAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AACJ;AACA,QAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AACJ;AACA,QAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,EACd;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,EACd;AACJ;AACA,QAAO,QAA2C;AAAA,EAC9C,WAAW;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACjB;AACJ;;;;;;;;;;;;;;;;;AChDoD;AAEa;AAGtD,MAAM,cAAc,+CAAa,CAAmE;AAAA,EAAnH;AAAA;AA4BI,aAAI;AAAA,MACA,MAAM,CAAC,KAAK,KAAK;AAAA,MACjB,QAAQ,KAAK,QAAQ,QAAQ;AAAA,MAC7B,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,MAAM;AAAA,IACV;AAAA;AAAA,EACA,YAAY;AACR,UAAM,UAAU;AAChB,UAAM,gBAAgB,MAAM;AACxB,WAAK,EAAE,OAAO,YAAY,IAAI;AAC9B,WAAK,OAAO,GAAG,IAAI,sCAAI,CAAC,CAAC;AACzB,WAAK,EAAE,cAAc,OAAO,YAAY,MAAM;AAC1C,aAAK,EAAE,OAAO,YAAY,IAAI;AAC9B,aAAK,OAAO,GAAG,IAAI,sCAAI,CAAC,CAAC;AAAA,MAC7B,GAAG,KAAK,EAAE,IAAI;AAAA,IAClB;AACA,UAAM,gBAAgB,CAAC,SAAiB;AACpC,UAAI,KAAK,EAAE,YAAY;AACnB,eAAO,aAAa,KAAK,EAAE,UAAU;AACrC,aAAK,EAAE,aAAa;AAAA,MACxB;AACA,UAAI,KAAK,EAAE,aAAa;AACpB,eAAO,cAAc,KAAK,EAAE,WAAW;AACvC,aAAK,EAAE,cAAc;AAAA,MACzB;AACA,UAAI,QAAQ,KAAK,EAAE,QAAQ;AACvB,cAAM,UAAU,KAAK,IAAI,GAAG,KAAK,EAAE,OAAO,KAAK,EAAE,OAAO,YAAY,IAAI,CAAC;AACzE,aAAK,EAAE,aAAa,OAAO,WAAW,eAAe,OAAO;AAAA,MAChE;AACA,WAAK,EAAE,OAAO;AAAA,IAClB;AACA,SAAK,GAAG,WAAW,MAAM;AACrB,WAAK,SAAS;AACd,WAAK,UAAU;AAAA,IACnB,CAAC;AACD,SAAK,GAAG,YAAY,MAAM;AACtB,oBAAc,CAAC,KAAK,KAAK,EAAE;AAAA,IAC/B,CAAC;AACD,SAAK,GAAG,cAAc,MAAM;AACxB,UAAI,OAAO,KAAK,KAAK,OAAO,UAAU;AAClC,sBAAc,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,EAAE,CAAC;AAAA,MAC5C;AAAA,IACJ,CAAC;AACD,SAAK,GAAG,eAAe,MAAM;AACzB,WAAK,EAAE,SAAS,KAAK,QAAQ,QAAQ;AAAA,IACzC,CAAC;AACD,SAAK,GAAG,SAAS,CAAC,EAAE,MAAM,SAAS,YAAY;AAC3C,UAAI,UAAU,GAAG;AACb,YAAI,OAAO,mFAAY,CAAC,OAAO;AAE/B,YAAI,4CAAM,CAAC,IAAI,GAAG;AACd,eAAK,EAAE,SAAS;AAAA,QACpB,WAAW,OAAO,SAAS,UAAU;AACjC,cAAI,OAAO;AACP,iBAAK,EAAE,SAAS;AAAA;AAEhB,iBAAK,EAAE,SAAS;AAAA,QACxB;AAEA,sBAAc,KAAK,EAAE,IAAI;AAAA,MAC7B,WAAW,UAAU,GAAG;AACpB,YAAI,OAAO,mFAAY,CAAC,OAAO;AAC/B,sBAAc,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC;AAAA,MACpC;AAAA,IACJ,CAAC;AACD,SAAK,GAAG,WAAW,MAAM;AACrB,UAAI,KAAK,EAAE,YAAY;AACnB,eAAO,aAAa,KAAK,EAAE,UAAU;AACrC,aAAK,EAAE,aAAa;AAAA,MACxB;AACA,UAAI,KAAK,EAAE,aAAa;AACpB,eAAO,cAAc,KAAK,EAAE,WAAW;AACvC,aAAK,EAAE,cAAc;AAAA,MACzB;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAxGI,MAAO,cAAc;AACrB,MAAO,SAAsB,CAAC;AAAA,EAC1B,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AACjB,GAAG;AAAA,EACC,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AACjB,CAAC;AACD,MAAO,UAAwB,CAAC;AAAA,EAC5B,MAAM;AAAA,EACN,aAAa;AACjB,CAAC;AACD,MAAO,OAAkB,CAAC;AAAA,EACtB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AAAA,EACT,aAAa;AACjB,CAAC;AACD,MAAO,QAAyC;AAAA,EAC5C,QAAQ;AAAA,IACJ,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACjB;AACJ;;;;;;;;;;;;;;;;AChCkE;AAGvD,MAAM,cAAc,kEAAc,CAAC;AAAA,EA2C9C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,QAAQ,OAAO,GAAG;AACtB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,UAAI,OAAO,UAAU,KAAK,KAAK;AAC/B,UAAI,eAAe,KAAK,IAAI,KAAK,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC;AACpD,WAAK,UAAU;AACf,UAAI,KAAK,UAAU;AACf,aAAK,UAAU;AAGnB,mBAAa,KAAK,KAAK,IAAK,MAAK,SAAS,gBAAgB,IAAI,KAAK,EAAE;AAAA,IACzE;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,eAAe;AACpB,SAAK,SAAS;AAAA,EAClB;AACJ;AAlEI,MAAO,cAAsB;AAC7B,MAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,MAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,MAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,MAAO,aAAqB;;;;;;;;;;;;;;;;ACxCzB,IAAK,WAAL,kBAAK,cAAL;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATQ;AAAA;AAYL,MAAM,WAAW;AAAA,EAapB,YAAY,YAAoB;AAC5B,SAAK,UAAU,IAAM;AACrB,SAAK,UAAU,aAAa;AAC5B,SAAK,OAAO;AACZ,SAAK,MAAM;AACX,SAAK,KAAK;AACV,SAAK,QAAQ;AACb,SAAK,WAAW,KAAK,aAAa,KAAK,IAAI;AAC3C,SAAK,WAAW;AAChB,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAe,GAAiB;AAC5B,UAAM,UAAU,KAAK,OAAO,GAAG,CAAC,KAAK,SAAS,KAAK,OAAO;AAC1D,SAAK,OAAO;AACZ,SAAK,WAAW,KAAK,aAAa,OAAO;AAAA,EAC7C;AAAA,EAEA,OAAc,GAAiB;AAC3B,SAAK,MAAM;AAAA,EACf;AAAA,EAEA,YAAmB,IAAoB;AACnC,SAAK,WAAW,KAAK,oBAAqB,KAAK;AAAA,EACnD;AAAA,EAEA,MAAa,IAAkB;AAC3B,SAAK,KAAK,KAAK,OAAO,IAAI,GAAK,CAAG;AAAA,EACtC;AAAA,EAEA,QAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,QAAwB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,WAA2B;AACvB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EAEA,YAA4B;AACxB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,SAAgB,QAAsB;AAClC,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,MAAa,SAAiB,GAAW;AACrC,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,aAAqB,GAAmB;AACpC,WAAO,IAAI,KAAK;AAAA,EACpB;AAAA,EAEA,OAAe,OAAe,KAAa,KAAqB;AAC5D,WAAO,KAAK,IAAI,KAAK,IAAI,OAAO,GAAG,GAAG,GAAG;AAAA,EAC7C;AAAA,EAEA,UAAyB;AACrB,QAAI;AACJ,QAAI;AACJ,YAAQ,KAAK;AAAA,WACJ;AACD,cAAM,KAAK,IAAI,KAAK,QAAQ,IAAI,KAAK,EAAE;AACvC;AAAA,WACC;AACD,YAAI,KAAQ,IAAM,KAAK;AACvB,cAAM,IAAO,MAAK,IAAI,CAAC,IAAI;AAC3B;AAAA,WACC;AACD,cAAM,KAAS,MAAK,QAAQ,IAAO;AACnC;AAAA,WACC;AACD,cAAO,KAAK,QAAQ,IAAO;AAC3B;AAAA,WACC;AACD,cAAM,KAAK,QAAQ,KAAK,KAAK,IAAM;AACnC;AAAA,WACC;AACD,YAAI,KAAK;AACT,cAAM,KAAK,QAAQ,MAAM,IAAM;AAC/B,eAAO,KAAK,SAAS,KAAK,UAAU,CAAC;AACrC,eAAO,KAAK,SAAS,KAAK,UAAW,KAAI,OAAO,CAAG;AAEnD,cAAM,KAAK,WAAW,MAAO,KAAM,KAAK,YAAY,KAAK;AACzD,aAAK,UAAU;AACf,eAAO;AACP;AAAA,WACC;AACD,YAAI,KAAK;AACT,cAAO,IAAM,IAAK;AAClB,eAAO,KAAK,SAAS,KAAK,UAAU,CAAC;AACrC,eAAO;AACP;AAAA,WACC;AACD,YAAI,KAAK;AACT,cAAM,KAAK,QAAQ,KAAK,KAAK,IAAM;AACnC,eAAO,KAAK,SAAS,KAAK,UAAU,CAAC;AACrC,eAAO,KAAK,SAAS,KAAK,UAAY,KAAK,KAAM,KAAK,OAAO,CAAI;AACjE,eAAO;AACP;AAAA;AAEA,cAAM;AACN;AAAA;AAER,SAAK,SAAS,KAAK;AACnB,QAAI,KAAK,QAAQ,GAAK;AAClB,WAAK,SAAS;AACd,WAAK,MAAM;AAAA,IACf,OAAO;AACH,WAAK,MAAM;AAAA,IACf;AACA,SAAK,MAAO,KAAK,QAAQ,KAAK,WAAW,OAAO,KAAK,SAAS;AAC9D,WAAO,MAAM,KAAK;AAAA,EACtB;AAAA,EAEA,SAAiB,UAAkB,GAAmB;AAClD,QAAI,KAAK;AACT,QAAI,IAAI,IAAI;AACR,WAAK;AACL,aAAO,IAAI,IAAI,IAAI,IAAI;AAAA,IAC3B,WAAW,IAAI,IAAM,IAAI;AACrB,UAAK,KAAI,KAAO;AAChB,aAAO,IAAI,IAAI,IAAI,IAAI;AAAA,IAC3B,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAEJ;;;;;;;;;;;;;;;;AChKsE;AAGvD,MAAM,eAAe,kEAAc,CAAC;AAAA,EA4C/C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,QAAQ,OAAO,GAAG;AACtB,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAE1C,UAAI,OAAO,UAAU,KAAK,KAAK;AAC/B,aAAO,KAAK,IAAI,KAAK,IAAI,MAAM,CAAE,GAAG,EAAG;AAEvC,UAAI,eAAe,KAAK,IAAI,KAAK,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC;AAEpD,WAAK,UAAU;AAEf,UAAI,KAAK,UAAU;AACf,aAAK,UAAU;AAAA,eAEV,KAAK,SAAS;AACnB,aAAK,UAAU;AAEnB,mBAAa,KAAM,MAAK,SAAS,gBAAgB;AAAA,IAErD;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,eAAe;AACpB,SAAK,SAAS;AAAA,EAClB;AACJ;AA3EI,OAAO,cAAsB;AAC7B,OAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,OAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,OAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,OAAO,aAAqB;AAC5B,OAAO,OAAe;;;;;;;;;;;;;;;;;ACzC4C;AAElB;AAErC,MAAM,iBAAiB,kEAAc,CAAC;AAAA,EA6BjD,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,KAAK,EAAE;AAClC,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,0DAAiB;AAAA,EAC1C;AACJ;AA9CI,SAAO,cAAsB;AAC7B,SAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,SAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,SAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,SAAO,aAAqB;;;;;;;;;;;;;;;;;AC7BsC;AAElB;AAErC,MAAM,iBAAiB,kEAAc,CAAC;AAAA,EAwCjD,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,aAAa,OAAO,GAAG;AAC3B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,EAAE;AAC7B,WAAK,IAAI,MAAM,WAAW,EAAE;AAC5B,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,6DAAoB;AAAA,EAC7C;AACJ;AA3DI,SAAO,cAAsB;AAC7B,SAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AACJ;AACA,SAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,SAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,SAAO,aAAqB;;;;;;;;;;;;;;;;;ACxCsC;AAElB;AAErC,MAAM,gBAAgB,kEAAc,CAAC;AAAA,EA6BhD,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,EAAE;AAC7B,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,0DAAiB;AAAA,EAC1C;AACJ;AA9CI,QAAO,cAAsB;AAC7B,QAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,QAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,QAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,QAAO,aAAqB;;;;;;;;;;;;;;;;;AC7BsC;AAElB;AAErC,MAAM,gBAAgB,kEAAc,CAAC;AAAA,EA6BhD,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,EAAE;AAC7B,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,0DAAiB;AAAA,EAC1C;AACJ;AA9CI,QAAO,cAAsB;AAC7B,QAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,QAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,QAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,QAAO,aAAqB;;;;;;;;;;;;;;;;;AC7BsC;AAElB;AAErC,MAAM,aAAa,kEAAc,CAAC;AAAA,EA6B7C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,KAAK,EAAE;AAClC,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,mEAA0B;AAAA,EACnD;AACJ;AA9CI,KAAO,cAAsB;AAC7B,KAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,KAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,KAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,KAAO,aAAqB;;;;;;;;;;;;;;;;;AC7BsC;AAElB;AAErC,MAAM,aAAa,kEAAc,CAAC;AAAA,EAwC7C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,aAAa,OAAO,GAAG;AAC3B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,EAAE;AAC7B,WAAK,IAAI,MAAM,WAAW,EAAE;AAC5B,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,sEAA6B;AAAA,EACtD;AACJ;AA3DI,KAAO,cAAsB;AAC7B,KAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AACJ;AACA,KAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,KAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AAAA,EACA;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,KAAO,aAAqB;;;;;;;;;;;;;;;;;ACxCsC;AAElB;AAErC,MAAM,YAAY,kEAAc,CAAC;AAAA,EA6B5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,EAAE;AAC7B,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,mEAA0B;AAAA,EACnD;AACJ;AA9CI,IAAO,cAAsB;AAC7B,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;;;;;;;;;;;;;;;;;AC7BsC;AAElB;AAErC,MAAM,YAAY,kEAAc,CAAC;AAAA,EA6B5C,QAAQ,QAA0B,SAA2B,YAAmD;AAE5G,QAAI,YAAY,OAAO,GAAG;AAC1B,QAAI,eAAe,QAAQ,GAAG;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,WAAK,IAAI,QAAQ,UAAU,EAAE;AAC7B,mBAAa,KAAK,KAAK,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,YAAoB;AACrB,SAAK,MAAM,IAAI,mDAAU,CAAC,UAAU;AACpC,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI,YAAY,mEAA0B;AAAA,EACnD;AACJ;AA9CI,IAAO,cAAsB;AAC7B,IAAO,SAAsB;AAAA,EACzB;AAAA,IACI,OAAO;AAAA,IACP,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,UAAwB;AAAA,EAC3B;AAAA,IACI,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AACJ;AACA,IAAO,OAAkB;AAAA,EACrB;AAAA,IACI,MAAM;AAAA,IACN,UAAU;AAAA,IACV,aAAa;AAAA,IACb,SAAS;AAAA,EACb;AACJ;AACA,IAAO,aAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BhC,MAAM,MAAO,WAAmB,aAAa;AACtC,MAAM;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACA;;;;;;;;;;;;;;;;;UCnBJ;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNwC;AACE;AACF;AACE;AACuB;AAC7B;AACA;AACE;AACA;AACK;AACA;AACF;AACA;AACuB;AAEhE,iEAAe,YAAa;AAAA,EACxB,UAAU,uEAAc,CAAC,0DAAK,EAAE,QAAQ;AAAA,EACxC,WAAW,uEAAc,CAAC,2DAAM,EAAE,SAAS;AAAA,EAC3C,QAAQ,uEAAc,CAAC,wDAAG,EAAE,QAAQ,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EACxF,QAAQ,uEAAc,CAAC,wDAAG,EAAE,QAAQ,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EACxF,SAAS,uEAAc,CAAC,yDAAI,EAAE,SAAS,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EAC3F,SAAS,uEAAc,CAAC,yDAAI,EAAE,SAAS,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EAC3F,UAAU,uEAAc,CAAC,0DAAQ,EAAE,UAAU,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EACjG,UAAU,uEAAc,CAAC,2DAAQ,EAAE,UAAU,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EACjG,SAAS,uEAAc,CAAC,0DAAO,EAAE,SAAS,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EAC9F,SAAS,uEAAc,CAAC,0DAAO,EAAE,SAAS,CAAC,gEAAU,GAAG,CAAC,EAAE,MAAM,YAAY,MAAM,8DAAQ,CAAC,CAAC,CAAC;AAAA,EAC9F,QAAQ,2DAAI;AAAJ,EACR,SAAS,4DAAK;AAClB,EAAE,EAAC","sources":["webpack://@electrosmith/package-generators/../../../frontend/src/core/message.ts","webpack://@electrosmith/package-generators/../../common/web/index.ts","webpack://@electrosmith/package-generators/../../common/web/jsDspObject.ts","webpack://@electrosmith/package-generators/../../common/web/jsDspProcessor.ts","webpack://@electrosmith/package-generators/../../common/web/package-info.ts","webpack://@electrosmith/package-generators/../../common/web/sdk.ts","webpack://@electrosmith/package-generators/../../common/web/workletCreator.ts","webpack://@electrosmith/package-generators/./src/objects/block/line.ts","webpack://@electrosmith/package-generators/./src/objects/block/metro.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/cycle.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/oscillator.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/phasor.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/pramp.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/prect.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/psaw.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/ptri.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/ramp.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/rect.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/saw.ts","webpack://@electrosmith/package-generators/./src/objects/dsp/tri.ts","webpack://@electrosmith/package-generators/./src/sdk.ts","webpack://@electrosmith/package-generators/webpack/bootstrap","webpack://@electrosmith/package-generators/webpack/runtime/create fake namespace object","webpack://@electrosmith/package-generators/webpack/runtime/define property getters","webpack://@electrosmith/package-generators/webpack/runtime/hasOwnProperty shorthand","webpack://@electrosmith/package-generators/webpack/runtime/make namespace object","webpack://@electrosmith/package-generators/./src/index.jspatpkg.ts"],"sourcesContent":["import Bang from \"./objects/base/Bang\";\n\nexport type Token = number | string | Bang;\n\nexport class Message extends Array<Token> {\n    static from(tokens: Token[]) {\n        const newArr = new Message();\n\n        for (let i = 0; i < tokens.length; i++) {\n            newArr[i] = tokens[i];\n        }\n\n        return newArr;\n    }\n\n\n    startsWith(value: Token) {\n        if (this.length) {\n            return this[0] === value;\n        }\n        return false;\n    }\n\n    endsWith(value: Token) {\n        if (this.length) {\n            return this[this.length - 1] === value;\n        }\n        return false;\n    }\n\n    // Produces a function that iterates over two lists,\n    // performs the given operation on any pair of numbers,\n    // and returns the shortest collection between the two\n    arithmetic(op: (a: number, b: number) => number) {\n        return (other: Message) => {\n            const result = new Message();\n            const minLength = Math.min(this.length, other.length);\n\n            for (let i = 0; i < minLength; i++) {\n                if (typeof this[i] === 'number' && typeof other[i] === 'number') {\n                    result.push(op(this[i] as number, other[i] as number));\n                } else {\n                    result.push(this[i]);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\nexport function isMessage(value: any) {\n    return value instanceof Message;\n}\n\nexport function extractFirst(data: any) {\n    if (data instanceof Message || data instanceof Array) {\n        return data[0];\n    } else {\n        return data;\n    }\n}\n","import packageInfo from \"./package-info\";\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\n\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\n\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\n\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;\n","import { author, name as package_name, version, description } from \"./index\";\nimport { Bang, DefaultObject, DefaultUI } from \"./sdk\";\nimport JsDspProcessor from \"./jsDspProcessor\";\nimport getJsWorkletProcessor from \"./workletCreator\";\n\nclass JsWorkletManager {\n    static registered_modules: Set<string>;\n\n    private constructor() { }\n\n    static getSet(): Set<string> {\n        if (!JsWorkletManager.registered_modules) {\n            JsWorkletManager.registered_modules = new Set<string>();\n        }\n\n        return JsWorkletManager.registered_modules;\n    }\n\n    public static async addModule(audioCtx: any, name: string, url: string) {\n        let set = JsWorkletManager.getSet();\n        if (!set.has(name)) {\n            set.add(name);\n            await audioCtx.audioWorklet.addModule(url);\n        }\n    }\n}\n\nexport function generateObject(Processor: typeof JsDspProcessor, name: string, dependencies?: any[], enums?: { name: string, item: any }[]) {\n\n    interface JsDspInternalState {\n        dspId: string;\n        merger: ChannelMergerNode;\n        node: AudioWorkletNode;\n        splitter: ChannelSplitterNode;\n        defaultInputs: [];\n        constants: ConstantSourceNode[];\n        constantsConnected: boolean[];\n        argsOffset: number;\n    }\n\n    interface Props {\n        smoothInput: number;\n    }\n\n    return class JsDspObject<\n        S = {},\n        I extends [Bang | any, ...any[]] = [Bang],\n        O extends any[] = [],\n        A extends any[] = any[],\n        P = Partial<Props> & Record<string, any>\n    > extends DefaultObject<{}, S, I, O, A, P & Props> {\n\n        static package = package_name;\n        static author = author;\n        static version = version;\n        static description = Processor.description;\n        static inlets = Processor.inlets;\n        static outlets = Processor.outlets;\n        static args = Processor.args;\n        static props = Processor.props;\n        static docs = Processor.docs;\n\n        static UI = DefaultUI;\n        _: Partial<JsDspInternalState> = {\n            dspId: name,\n            defaultInputs: [],\n            constants: [],\n            constantsConnected: [],\n            argsOffset: Processor.argsOffset || 0\n        };\n        get audioConnections() {\n            return this.inletLines.map(set => [...set].find(l => !l.disabled && l.isConnectableByAudio)).map(l => !!l);\n        }\n        checkAndFillUnconnected() {\n            const { audioConnections } = this;\n            const { constants, constantsConnected } = this._;\n            if (!this.inlets) return;\n            for (let i = 0; i < this.inlets; i++) {\n                if (audioConnections[i] === constantsConnected[i]) continue;\n                const constant = constants[i];\n                if (audioConnections[i]) {\n                    constant.offset.value = 0;\n                } else if (!audioConnections[i] && !constantsConnected[i]) {\n                    constant.offset.value = this._.defaultInputs[i] || 0;\n                }\n                constantsConnected[i] = audioConnections[i];\n            }\n        }\n        subscribe() {\n            super.subscribe();\n            this.on(\"preInit\", () => {\n                const { inputs, outputs } = { inputs: Processor.inlets.length, outputs: Processor.outlets.length };\n\n                if (inputs) {\n                    const merger = this.audioCtx.createChannelMerger(inputs);\n                    this._.merger = merger;\n                    for (let i = 0; i < inputs; i++) {\n                        const constant = this.audioCtx.createConstantSource();\n                        this._.constants[i] = constant;\n                        constant.connect(merger, 0, i);\n                        this._.constantsConnected[i] = false;\n                    }\n                }\n                const splitter = this.audioCtx.createChannelSplitter(outputs);\n                this._.splitter = splitter;\n\n                this.inlets = inputs;\n                this.outlets = outputs;\n                this.disconnectAudio();\n                this.inletAudioConnections = this._.constants.map((node) => ({ node: node.offset, index: 0 }));\n                this.outletAudioConnections = new Array(outputs).fill(null).map((v, i) => ({ node: splitter, index: i }));\n                this.connectAudio();\n            });\n            this.on(\"postInit\", async () => {\n                // const { dspFactory, faustDspGenerator, dspId, constants, merger, splitter, argsOffset } = this._;\n                const { dspId, constants, merger, splitter, argsOffset } = this._;\n                const url = getJsWorkletProcessor(Processor, dspId, this.audioCtx.sampleRate, dependencies, enums);\n                await JsWorkletManager.addModule(this.audioCtx, dspId, url);\n                const node = new AudioWorkletNode(this.audioCtx, dspId);\n                this._.node = node;\n                this.checkAndFillUnconnected();\n                merger?.connect(node);\n                node.connect(splitter);\n                constants.forEach((constant, i) => {\n                    const argValue = this.args[i - argsOffset];\n                    if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                    constant.start();\n                });\n            });\n            this.on(\"argsUpdated\", () => {\n                this._.constants.forEach((constant, i) => {\n                    const argValue = this.args[i - this._.argsOffset];\n                    if (!this._.constantsConnected[i]) constant.offset.value = typeof argValue === \"number\" ? +argValue : (this._.defaultInputs[i] ?? 0);\n                });\n            })\n            this.on(\"inlet\", ({ inlet, data }) => {\n                if (typeof data === \"number\") {\n                    if (this._.constants[inlet] && !this._.constantsConnected[inlet]) {\n                        const constant = this._.constants[inlet];\n                        constant.offset.value = constant.offset.value;\n                        constant.offset.linearRampToValueAtTime(data, this.audioCtx.currentTime + this.getProp(\"smoothInput\"));\n                    }\n                }\n            });\n            this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\n            this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\n            this.on(\"destroy\", () => {\n                const { constants, merger, splitter, node } = this._;\n                constants.forEach(constant => constant?.disconnect());\n                merger?.disconnect();\n                splitter?.disconnect();\n                node?.disconnect();\n                // node?.destroy();\n            })\n        }\n    }\n}\n","import { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class JsParamDescriptor {\n    name: string;\n    automationRate?: \"a-rate\" | \"k-rate\";\n    minValue?: number;\n    maxValue?: number;\n    defaultValue?: number;\n}\n\nexport default class JsDspProcessor {\n\n    static paramDescriptors: Record<string, JsParamDescriptor> = {};\n    static description: string;\n\n    static inlets: IInletsMeta = [];\n    static outlets: IOutletsMeta = [];\n    static args: IArgsMeta = [];\n    static props: IPropsMeta = {\n        smoothInput: {\n            type: \"number\",\n            default: 0.05,\n            description: \"Linear interpolation coefficient to block-rate input values in seconds\"\n        }\n    };\n    static argsOffset: number;\n    static docs: string;\n\n    static get parameterDescriptors() {\n        const params = [] as JsParamDescriptor[];\n        for (const name in this.paramDescriptors) {\n            params.push(this.paramDescriptors[name]);\n        }\n        return params;\n    }\n\n    init(sampleRate: number) {\n\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        return true;\n    }\n\n}\n","import * as JSON from \"./package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","\nimport JsDspProcessor from \"./jsDspProcessor\";\n\nconst getJsWorkletProcessor = (processor: typeof JsDspProcessor, dspId: string, sampleRate: number, dependencies?: any[], enums?: { name: string, item: any }[]): string => {\n\n    const inherited_string = processor.toString().replace(/extends (.*?) {/, `extends ${JsDspProcessor.name} {`);\n\n    const js_enums = enums ? enums.map((e) => `const ${e.name} = ${JSON.stringify(e.item)}`).join(\"\\n\") : \"\";\n\n    const deps = dependencies ? dependencies.map((dep) => `const ${dep.name} = ${dep.toString()}`)\n        .join(\"\\n\") : \"\";\n\n    const processorCode = `\n\n        ${js_enums}\n\n        ${deps}\n\n        const ${JsDspProcessor.name} = ${JsDspProcessor.toString()}\n\n        const ProcessorClass = ${inherited_string}\n\n        class JsWorkletProcessor extends AudioWorkletProcessor {\n\n            constructor(options) {\n                super(options);\n                this.processor = new ProcessorClass();\n                this.processor.init(${sampleRate});\n            }\n\n            process(inputs, outputs, parameters) {\n                return this.processor.process(inputs, outputs, parameters);\n            }\n\n            static get parameterDescriptors() {\n                return ProcessorClass.parameterDescriptors;\n            }\n        }\n\n        // TODO -- fix already registered error\n        registerProcessor(\"${dspId}\", JsWorkletProcessor);\n\n    `;\n\n    // replace any webpack-style name spacing\n    const processorCodeCleaned = processorCode.replace(/_.+?__WEBPACK_IMPORTED_MODULE_\\d+__\\./g, \"\");\n\n    const url = URL.createObjectURL(new Blob([processorCodeCleaned], { type: \"text/javascript\" }));\n    return url;\n}\n\nexport default getJsWorkletProcessor;\n","import { Bang, DefaultObject, isBang } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Counter extends DefaultObject<{}, {}, [number[] | number], [number, Bang], any[], { maxpoints: number }> {\n    static package = \"electrosmith\";\n    static author = \"Corvus Prudens\";\n    static version = \"1.0\";\n    static description = \"Generates linear sequences of numbers given a set of points.\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"anything\",\n            description: \"A single number to set the current value, or a list of number pairs to set the sequence\"\n        },\n        {\n            isHot: false,\n            type: \"number\",\n            description: \"The output rate in milliseconds\"\n        }\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"number\",\n            description: \"The current value in the sequence\"\n        },\n        {\n            type: \"bang\",\n            description: \"Bang when the sequence is complete\"\n        },\n    ];\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            description: \"The initial value\",\n            optional: true,\n        },\n        {\n            type: \"number\",\n            description: \"The output rate in milliseconds\",\n            optional: true,\n        }\n    ];\n    static props: IPropsMeta<{ maxpoints: number }> = {\n        maxpoints: {\n            type: \"number\",\n            default: 32,\n            description: \"The maximum number of points in the sequence\",\n        }\n    }\n    _ = {\n        start: 0,\n        last_output: 0.0,\n        grain: 20.0,\n        points: [] as { value: number; duration: number; }[],\n        num_points: 0,\n        intervalRef: null as number,\n        timeoutRef: null as number,\n        time: 0.0,\n        current_point: 0,\n    };\n\n    get_output() {\n        const now = performance.now();\n        const current_point = this._.points[this._.current_point];\n\n        let progress = current_point.duration === 0\n            ? 1.0\n            : (now - this._.time) / current_point.duration;\n\n        if (progress > 1.)\n            progress = 1.;\n\n        const output = this._.start + (current_point.value - this._.start) * progress;\n\n        return output;\n    }\n\n    subscribe() {\n        super.subscribe();\n\n        const handleUpdate = () => {\n            const current_point = this._.points[this._.current_point];\n            const now = performance.now();\n            if (now - this._.time >= current_point.duration) {\n                this._.current_point++;\n                if (this._.current_point >= this._.num_points) {\n                    this._.current_point = 0;\n                    this.outlet(1, new Bang());\n                    this.outlet(0, current_point.value);\n                    if (this._.intervalRef) {\n                        window.clearInterval(this._.intervalRef);\n                        this._.intervalRef = null;\n                    }\n                    return;\n                }\n                this._.time = now;\n                this._.start = current_point.value;\n            }\n\n            const output = this.get_output();\n\n            this.outlet(0, output);\n        }\n\n        const handleTimeout = () => {\n            handleUpdate();\n            this._.intervalRef = window.setInterval(handleUpdate, this._.grain);\n        };\n\n        const activateTimer = () => {\n            if (this._.timeoutRef) {\n                window.clearTimeout(this._.timeoutRef);\n                this._.timeoutRef = null;\n            }\n            if (this._.intervalRef) {\n                window.clearInterval(this._.intervalRef);\n                this._.intervalRef = null;\n            }\n\n            const timeout = this._.grain;\n            this._.timeoutRef = window.setTimeout(handleTimeout, timeout);\n            this._.time = performance.now();\n        };\n\n\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 2;\n\n            let maxpoints = this.getProp(\"maxpoints\");\n            this._.points = Array.from({ length: maxpoints }, () => ({ value: 0.0, duration: 0.0 }));\n\n            if (this.args.length >= 1) {\n                this._.start = this.args[0];\n            }\n\n            if (this.args.length >= 2) {\n                this._.grain = this.args[1];\n                if (this._.grain < 1.0) {\n                    this.error(\"grain must be greater than or equal to 1\");\n                }\n            }\n        });\n        this.on(\"propsUpdated\", ({ props }) => {\n            let maxpoints = this.getProp(\"maxpoints\");\n            this._.points = Array.from({ length: maxpoints }, () => ({ value: 0.0, duration: 0.0 }));\n        });\n        this.on(\"argsUpdated\", ({ args }) => {\n            if (args.length >= 1) {\n                this._.start = args[0];\n            }\n\n            if (args.length >= 2) {\n                this._.grain = args[1];\n                if (this._.grain < 1.0) {\n                    this.error(\"grain must be greater than or equal to 1\");\n                }\n            }\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === 'number') {\n                    this._.start = data;\n                    if (this._.intervalRef) {\n                        window.clearInterval(this._.intervalRef);\n                        this._.intervalRef = null;\n                    }\n                    this.outlet(0, this._.start);\n                    return;\n                } else if (data.length == 1) {\n                    this._.start = data[0];\n                    if (this._.intervalRef) {\n                        window.clearInterval(this._.intervalRef);\n                        this._.intervalRef = null;\n                    }\n                    this.outlet(0, this._.start);\n\n                    return;\n                } else {\n\n                    const input_points = data.length / 2;\n                    const max_points = input_points > this._.points.length ? this._.points.length : input_points;\n\n                    for (let i = 0; i < max_points; i++) {\n                        const index = i * 2;\n                        this._.points[i].value = data[index];\n                        this._.points[i].duration = data[index + 1];\n                    }\n\n                    this._.num_points = max_points;\n                    this._.current_point = 0;\n                    activateTimer();\n                }\n            } else if (inlet === 1) {\n                if (typeof data === \"number\") {\n                    this._.grain = data;\n                    if (this._.grain < 1.0) {\n                        this.error(\"grain must be greater than or equal to 1\");\n                    }\n                }\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this._.timeoutRef) {\n                window.clearTimeout(this._.timeoutRef);\n                this._.timeoutRef = null;\n            }\n            if (this._.intervalRef) {\n                window.clearInterval(this._.intervalRef);\n                this._.intervalRef = null;\n            }\n        });\n    }\n}\n","import { Bang, DefaultObject, isBang } from \"../../sdk\";\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\n\n\nexport default class Metro extends DefaultObject<{}, {}, [boolean, number], [any], [number?], { active: boolean }> {\n    static description = \"Metronome that outputs bangs according to the specified time\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Start or stop the metronome\"\n    }, {\n        isHot: false,\n        type: \"number\",\n        description: \"interval in milliseconds\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"bang\",\n        description: \"metronomic bangs\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"number\",\n        optional: true,\n        default: 1,\n        description: \"Initial interval in milliseconds\"\n    }];\n    static props: IPropsMeta<{ active: boolean }> = {\n        active: {\n            type: \"boolean\",\n            default: false,\n            description: \"Globally activate or deactivate the metronome\"\n        }\n    };\n    _ = {\n        time: +this.args[0],\n        active: this.getProp(\"active\"),\n        intervalRef: null as number,\n        timeoutRef: null as number,\n        last: 0\n    };\n    subscribe() {\n        super.subscribe();\n        const handleTimeout = () => {\n            this._.last = performance.now();\n            this.outlet(0, new Bang())\n            this._.intervalRef = window.setInterval(() => {\n                this._.last = performance.now();\n                this.outlet(0, new Bang())\n            }, this._.time);\n        };\n        const activateTimer = (time: number) => {\n            if (this._.timeoutRef) {\n                window.clearTimeout(this._.timeoutRef);\n                this._.timeoutRef = null;\n            }\n            if (this._.intervalRef) {\n                window.clearInterval(this._.intervalRef);\n                this._.intervalRef = null;\n            }\n            if (time && this._.active) {\n                const timeout = Math.max(0, this._.last + this._.time - performance.now());\n                this._.timeoutRef = window.setTimeout(handleTimeout, timeout);\n            }\n            this._.time = time;\n        }\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", () => {\n            activateTimer(+this.args[0]);\n        })\n        this.on(\"updateArgs\", () => {\n            if (typeof this.args[0] === \"number\") {\n                activateTimer(Math.max(0, +this.args[0]));\n            }\n        });\n        this.on(\"updateProps\", () => {\n            this._.active = this.getProp(\"active\");\n        });\n        this.on(\"inlet\", ({ data: rawData, inlet }) => {\n            if (inlet === 0) {\n                let data = extractFirst(rawData);\n\n                if (isBang(data)) {\n                    this._.active = true;\n                } else if (typeof data === \"number\") {\n                    if (data > 0)\n                        this._.active = true;\n                    else\n                        this._.active = false;\n                }\n\n                activateTimer(this._.time);\n            } else if (inlet === 1) {\n                let data = extractFirst(rawData);\n                activateTimer(Math.max(0, +data));\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this._.timeoutRef) {\n                window.clearTimeout(this._.timeoutRef);\n                this._.timeoutRef = null;\n            }\n            if (this._.intervalRef) {\n                window.clearInterval(this._.intervalRef);\n                this._.intervalRef = null;\n            }\n        });\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Cycle extends JsDspProcessor {\n    static description: string = \"Pure sine wave\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"phase offset\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        },\n        {\n            type: \"number\",\n            optional: true,\n            description: \"phase offset\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    step: number;\n    sample_rate_: number;\n    phase_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let phase = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            let step = frequency[i] / this.sample_rate_;\n            let phase_offset = Math.min(Math.max(phase[i], 0), 1);\n            this.phase_ += step;\n            if (this.phase_ >= 1)\n                this.phase_ -= 1;\n\n\n            outputStream[i] = Math.sin((this.phase_ + phase_offset) * 2 * Math.PI);\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.sample_rate_ = sampleRate;\n        this.phase_ = 0;\n    }\n}\n","export enum Waveform {\n    WAVE_SIN,\n    WAVE_TRI,\n    WAVE_SAW,\n    WAVE_RAMP,\n    WAVE_SQUARE,\n    WAVE_POLYBLEP_TRI,\n    WAVE_POLYBLEP_SAW,\n    WAVE_POLYBLEP_SQUARE,\n    WAVE_LAST,\n}\n\nexport class Oscillator {\n    private waveform: Waveform;\n    private amp: number;\n    private freq: number;\n    private pw: number;\n    private srRecip: number;\n    private phase: number;\n    private phaseInc: number;\n    private lastOut: number;\n    private eor: boolean;\n    private eoc: boolean;\n    private nyquist: number;\n\n    constructor(sampleRate: number) {\n        this.srRecip = 1.0 / sampleRate;\n        this.nyquist = sampleRate * 0.5;\n        this.freq = 100.0;\n        this.amp = 0.5;\n        this.pw = 0.5;\n        this.phase = 0.0;\n        this.phaseInc = this.CalcPhaseInc(this.freq);\n        this.waveform = Waveform.WAVE_SIN;\n        this.eoc = true;\n        this.eor = true;\n        this.lastOut = 0.0;\n    }\n\n    public SetFreq(f: number): void {\n        const clamped = this.fclamp(f, -this.nyquist, this.nyquist);\n        this.freq = clamped;\n        this.phaseInc = this.CalcPhaseInc(clamped);\n    }\n\n    public SetAmp(a: number): void {\n        this.amp = a;\n    }\n\n    public SetWaveform(wf: Waveform): void {\n        this.waveform = wf < Waveform.WAVE_LAST ? wf : Waveform.WAVE_SIN;\n    }\n\n    public SetPw(pw: number): void {\n        this.pw = this.fclamp(pw, 0.0, 1.0);\n    }\n\n    public IsEOR(): boolean {\n        return this.eor;\n    }\n\n    public IsEOC(): boolean {\n        return this.eoc;\n    }\n\n    public IsRising(): boolean {\n        return this.phase < 0.5;\n    }\n\n    public IsFalling(): boolean {\n        return this.phase >= 0.5;\n    }\n\n    public PhaseAdd(_phase: number): void {\n        this.phase += _phase;\n    }\n\n    public Reset(_phase: number = 0.0): void {\n        this.phase = _phase;\n    }\n\n    private CalcPhaseInc(f: number): number {\n        return f * this.srRecip;\n    }\n\n    private fclamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    public Process(): number {\n        let out: number;\n        let t: number;\n        switch (this.waveform) {\n            case Waveform.WAVE_SIN:\n                out = Math.sin(this.phase * 2 * Math.PI);\n                break;\n            case Waveform.WAVE_TRI:\n                t = -1.0 + (2.0 * this.phase);\n                out = 2.0 * (Math.abs(t) - 0.5);\n                break;\n            case Waveform.WAVE_SAW:\n                out = -1.0 * ((this.phase * 2.0) - 1.0);\n                break;\n            case Waveform.WAVE_RAMP:\n                out = (this.phase * 2.0) - 1.0;\n                break;\n            case Waveform.WAVE_SQUARE:\n                out = this.phase < this.pw ? 1.0 : -1.0;\n                break;\n            case Waveform.WAVE_POLYBLEP_TRI:\n                t = this.phase;\n                out = this.phase < 0.5 ? 1.0 : -1.0;\n                out += this.Polyblep(this.phaseInc, t);\n                out -= this.Polyblep(this.phaseInc, (t + 0.5) % 1.0);\n                // Leaky Integrator: y[n] = A + x[n] + (1 - A) * y[n-1]\n                out = this.phaseInc * out + (1.0 - this.phaseInc) * this.lastOut;\n                this.lastOut = out;\n                out *= 4.0; // normalize amplitude after leaky integration\n                break;\n            case Waveform.WAVE_POLYBLEP_SAW:\n                t = this.phase;\n                out = (2.0 * t) - 1.0;\n                out -= this.Polyblep(this.phaseInc, t);\n                out *= -1.0;\n                break;\n            case Waveform.WAVE_POLYBLEP_SQUARE:\n                t = this.phase;\n                out = this.phase < this.pw ? 1.0 : -1.0;\n                out += this.Polyblep(this.phaseInc, t);\n                out -= this.Polyblep(this.phaseInc, ((t + (1.0 - this.pw)) % 1.0));\n                out *= 0.707; // ?\n                break;\n            default:\n                out = 0.0;\n                break;\n        }\n        this.phase += this.phaseInc;\n        if (this.phase > 1.0) {\n            this.phase -= 1.0;\n            this.eoc = true;\n        } else {\n            this.eoc = false;\n        }\n        this.eor = (this.phase - this.phaseInc < 0.5 && this.phase >= 0.5);\n        return out * this.amp;\n    }\n\n    private Polyblep(phaseInc: number, t: number): number {\n        let dt = phaseInc;\n        if (t < dt) {\n            t /= dt;\n            return t + t - t * t - 1.0;\n        } else if (t > 1.0 - dt) {\n            t = (t - 1.0) / dt;\n            return t * t + t + t + 1.0;\n        } else {\n            return 0.0;\n        }\n    }\n\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Phasor extends JsDspProcessor {\n    static description: string = \"Pure ramp wave\";\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"phase offset\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        },\n        {\n            type: \"number\",\n            optional: true,\n            description: \"phase offset\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 0;\n    static docs: string = \"generators/docs/phasor.html\";\n\n    step: number;\n    sample_rate_: number;\n    phase_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let phase = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n\n            let step = frequency[i] / this.sample_rate_;\n            step = Math.max(Math.min(step, 1.), -1.);\n\n            let phase_offset = Math.min(Math.max(phase[i], 0), 1);\n\n            this.phase_ += step;\n\n            if (this.phase_ >= 1)\n                this.phase_ -= 1;\n\n            else if (this.phase_ < 0.)\n                this.phase_ += 1;\n\n            outputStream[i] = (this.phase_ + phase_offset) % 1.;\n\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.sample_rate_ = sampleRate;\n        this.phase_ = 0;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class PureRamp extends JsDspProcessor {\n    static description: string = \"Pure Ramp wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i] * -1);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_SAW);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class PureRect extends JsDspProcessor {\n    static description: string = \"Pure Rectangle wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"pulse width\",\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        },\n        {\n            type: \"number\",\n            optional: true,\n            description: \"pulse width\",\n            default: 0.5,\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let pulseWidth = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i]);\n            this.osc.SetPw(pulseWidth[i]);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_SQUARE);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class PureSaw extends JsDspProcessor {\n    static description: string = \"Pure Sawtooth wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i]);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_SAW);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class PureTri extends JsDspProcessor {\n    static description: string = \"Pure Triangle wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i]);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_TRI);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class Ramp extends JsDspProcessor {\n    static description: string = \"Ramp wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i] * -1);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_POLYBLEP_SAW);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class Rect extends JsDspProcessor {\n    static description: string = \"Rectangle wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"pulse width\",\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        },\n        {\n            type: \"number\",\n            optional: true,\n            description: \"pulse width\",\n            default: 0.5,\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let pulseWidth = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i]);\n            this.osc.SetPw(pulseWidth[i]);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_POLYBLEP_SQUARE);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class Saw extends JsDspProcessor {\n    static description: string = \"Sawtooth wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i]);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_POLYBLEP_SAW);\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { Oscillator, Waveform } from \"./oscillator\";\n\nexport default class Tri extends JsDspProcessor {\n    static description: string = \"Triangle wave oscillator\"\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"frequency\",\n            default: 440.\n        }\n    ]\n    static argsOffset: number = 0;\n\n    osc: Oscillator;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let frequency = inputs[0][0];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < outputStream.length; i++) {\n            this.osc.SetFreq(frequency[i]);\n            outputStream[i] = this.osc.Process();\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n        this.osc = new Oscillator(sampleRate);\n        this.osc.SetAmp(1);\n        this.osc.SetWaveform(Waveform.WAVE_POLYBLEP_TRI);\n    }\n}\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Cycle from \"./objects/dsp/cycle\";\nimport Phasor from \"./objects/dsp/phasor\";\nimport Line from \"./objects/block/line\";\nimport Metro from \"./objects/block/metro\";\nimport { generateObject } from \"../../../common/web/jsDspObject\";\nimport Saw from \"./objects/dsp/saw\";\nimport Tri from \"./objects/dsp/tri\";\nimport Rect from \"./objects/dsp/rect\";\nimport Ramp from \"./objects/dsp/ramp\";\nimport PureRamp from \"./objects/dsp/pramp\";\nimport PureRect from \"./objects/dsp/prect\";\nimport PureSaw from \"./objects/dsp/psaw\";\nimport PureTri from \"./objects/dsp/ptri\";\nimport { Oscillator, Waveform } from \"./objects/dsp/oscillator\";\n\nexport default async () => ({\n    'cycle~': generateObject(Cycle, 'cycle~'),\n    'phasor~': generateObject(Phasor, 'phasor~'),\n    'saw~': generateObject(Saw, 'saw~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'tri~': generateObject(Tri, 'tri~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'rect~': generateObject(Rect, 'rect~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'ramp~': generateObject(Ramp, 'ramp~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'pramp~': generateObject(PureRamp, 'pramp~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'prect~': generateObject(PureRect, 'prect~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'psaw~': generateObject(PureSaw, 'psaw~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'ptri~': generateObject(PureTri, 'ptri~', [Oscillator], [{ name: \"Waveform\", item: Waveform }]),\n    'line': Line,\n    'metro': Metro,\n});\n"],"names":[],"sourceRoot":""}