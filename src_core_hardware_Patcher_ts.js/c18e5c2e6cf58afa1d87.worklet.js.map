{"version":3,"file":"src_core_hardware_Patcher_ts.js/c18e5c2e6cf58afa1d87.worklet.js","mappings":"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","sources":["webpack://DaisyBell/./src/core/hardware/Box.ts","webpack://DaisyBell/./src/core/hardware/Compatibility.ts","webpack://DaisyBell/./src/core/hardware/HardwareEditor.ts","webpack://DaisyBell/./src/core/hardware/HardwareHistory.ts","webpack://DaisyBell/./src/core/hardware/Line.ts","webpack://DaisyBell/./src/core/hardware/Patcher.ts"],"sourcesContent":["import TypedEventEmitter from \"../../utils/TypedEventEmitter\";\nimport { isTRect, parseToPrimitive, isTPresentationRect, isRectMovable, isRectResizable } from \"../../utils/utils\";\nimport type Patcher from \"./Patcher\";\nimport HardwareLine from \"./Line\";\nimport type { TRect, TPresentationRect } from \"../types\";\nimport type { IoPosition, THardwareBox } from \"./types\";\nimport type { Args, Data, IHardwarePatcherObject, HardwarePatcherObjectEventMap, ObjectUpdateOptions, Props, State, IIosMeta } from \"./objects/base/AbstractHardwareObject\";\n\nexport interface BoxEventMap extends Pick<HardwarePatcherObjectEventMap<any, any, any, any, any, any, any, any, any>, \"metaUpdated\" | \"argsUpdated\" | \"propsUpdated\" | \"dataUpdated\" | \"stateUpdated\"> {\n    \"rectChanged\": HardwareBox;\n    \"presentationRectChanged\": HardwareBox;\n    \"backgroundChanged\": HardwareBox;\n    \"presentationChanged\": HardwareBox;\n    \"textChanged\": HardwareBox;\n    \"error\": string;\n    \"connectedPort\": { io: number; last?: false };\n    \"disconnectedPort\": { io: number; last?: boolean };\n    \"ioCountChanged\": HardwareBox;\n}\n\nexport default class HardwareBox<T extends IHardwarePatcherObject = IHardwarePatcherObject> extends TypedEventEmitter<BoxEventMap> {\n    readonly id: string;\n    text = \"\";\n    ios: IoPosition[];\n    rect: TRect;\n    background: boolean;\n    presentation: boolean;\n    presentationRect: TPresentationRect;\n    /** A timestamp to order boxes UI on z-axis, default = 0, negative = send to back, positive = bring to front */\n    zIndex: number;\n    data: Data<T>;\n    args: Args<T>;\n    props: Props<T>;\n    _editing: boolean;\n    static ios: IIosMeta;\n    private _parsed: { class: string; args: Args<T>; props: Props<T> };\n    private _object: T;\n    private _Object: typeof IHardwarePatcherObject;\n    private readonly _patcher: Patcher;\n    private readonly _ioLines: Set<HardwareLine>[];\n    constructor(patcherIn: Patcher, boxIn: THardwareBox) {\n        super();\n        this.id = boxIn.id;\n        this.text = boxIn.text;\n        this.args = (boxIn.args || []) as Args<T>;\n        this.props = (boxIn.props || {}) as Props<T>;\n        this.ios = boxIn.ios;\n        this._ioLines = new Array(this.ios).fill(null).map(() => new Set<HardwareLine>());\n        this.rect = boxIn.rect;\n        this.background = boxIn.background;\n        this.presentation = boxIn.presentation;\n        this.presentationRect = boxIn.presentationRect;\n        if (!this.presentationRect) this.presentationRect = this.rect.slice() as TRect;\n        this.zIndex = boxIn.zIndex || 0;\n        this.data = boxIn.data || (boxIn as any).prevData?.storage || {};\n        this._editing = !!boxIn._editing;\n        this._patcher = patcherIn;\n        this.on(\"dataUpdated\", () => this._patcher.emitChanged());\n        this.on(\"argsUpdated\", () => this._patcher.emitChanged());\n        this.on(\"propsUpdated\", () => this._patcher.emitChanged());\n    }\n    async init() {\n        this._parsed = HardwareBox.parseObjText(this.text) as { class: string; args: Args<T>; props: Props<T> };\n        const newMeta = this._patcher.getObjectMeta(this._parsed);\n        for (const key in this.props) {\n            if (!newMeta.props[key]) delete this.props[key];\n        }\n        if (this._parsed.args.length) this.args = this._parsed.args;\n        Object.assign(this.props, this._parsed.props);\n        const Constructor = this._patcher.getObjectConstructor(this._parsed);\n        if (Constructor === this._patcher.activeLib.InvalidObject) {\n            this.error(`Object ${this._parsed.class} not found.`);\n        }\n        this._Object = Constructor;\n        if (!this.size.every(v => v > 0)) this.size = this.defaultSize;\n        if (!isTPresentationRect(this.presentationRect) || (this.presentationSize.every(v => typeof v === \"number\") && !this.presentationSize.every(v => v > 0))) this.presentationSize = this.defaultSize;\n        if (this.objectInit) {\n            this._object = new Constructor(this, this._patcher) as T;\n            await this._object.init();\n        }\n        return this;\n    }\n    async postInit() {\n        await this._object?.postInit();\n        return this;\n    }\n    /**\n     * Main function when receive data from a inlet (base 0)\n     */\n    fn(inlet: number, data: any) {\n        this._object?.fn(inlet, data);\n        return this;\n    }\n    get UI() {\n        return this._Object.UI;\n    }\n    get defaultSize() {\n        return this.UI?.defaultSize || [90, 20];\n    }\n    get meta() {\n        return this._object?.meta;\n    }\n    get ioLines() {\n        return this._ioLines;\n    }\n    get objectInit() {\n        return this._patcher.props.objectInit;\n    }\n    get object() {\n        return this._object;\n    }\n    set object(oIn: T) {\n        this._object = oIn;\n    }\n    get Object() {\n        return this._Object;\n    }\n    get parsed() {\n        return this._parsed;\n    }\n    addIoLine(line: HardwareLine, isA: boolean) {\n        const index = isA ? line.aIo[1] : line.bIo[1];\n        if (!this._ioLines[index])\n            this._ioLines[index] = new Set<HardwareLine>();\n        this._ioLines[index].add(line);\n    }\n    removeIoLine(line: HardwareLine, isA: boolean) {\n        const index = isA ? line.aIo[1] : line.bIo[1];\n        if (this._ioLines[index])\n            this._ioLines[index].delete(line);\n    }\n\n    setIos(positions: IoPosition[]) {\n        const lines = this.allLines;\n        lines.forEach(line => line.disable());\n\n        this.ios = positions;\n        lines.forEach(line => line.enable());\n\n        const linesSetLen = this._ioLines.length;\n        if (positions.length > linesSetLen)\n            this._ioLines.push(...new Array(positions.length - linesSetLen).fill(null).map(() => new Set<HardwareLine>()));\n        else if (positions.length < linesSetLen)\n            this._ioLines.splice(positions.length);\n        this._ioLines.forEach(set => set.forEach(line => { line.uiUpdateA(); line.uiUpdateB(); }));\n        this.emit(\"ioCountChanged\", this);\n    }\n\n    getIoPos(port: number) {\n        const { rect, ios } = this;\n        const [left, top, width, height] = rect;\n\n        const [x1, y1, x2, y2] = {\n            \"T\": [left, top, left + width, top],\n            \"B\": [left, top + height, left + width, top + height],\n            \"L\": [left, top, left, top + height],\n            \"R\": [left + width, top, left + width, top + height],\n        }[ios[port].edge];\n\n        let [diffx, diffy] = [x2 - x1, y2 - y1];\n        let magnitude = ios[port].position;\n\n        return { top: y1 + diffy * magnitude, left: x1 + diffx * magnitude };\n    }\n\n    get ioPositions() {\n        const positions = [];\n        for (let i = 0; i < this.ios.length; i++) {\n            positions[i] = this.getIoPos(i);\n        }\n        return positions;\n    }\n\n    get allLines() {\n        return this._ioLines.flatMap(set => Array.from(set.values()));\n    }\n    connectedIo(io: number, otherBoxIo: number, otherBoxId: string, lineId: string) {\n        if (this._object) this._object.connectedIo(io, otherBoxIo, otherBoxId, lineId);\n        this.emit(\"connectedPort\", { io });\n        return this;\n    }\n    disconnectedIo(io: number, otherBoxIo: number, otherBoxId: string, lineId: string) {\n        if (this._object) this._object.disconnectedIo(io, otherBoxIo, otherBoxId, lineId);\n        this.emit(\"connectedPort\", { io });\n        return this;\n    }\n\n    // // called when inlet or outlet are connected or disconnected\n    // connectedOutlet(outlet: number, destBoxId: string, destInlet: number, lineId: string) {\n    //     if (this._object) this._object.connectedOutlet(outlet, destBoxId, destInlet, lineId);\n    //     this.emit(\"connectedPort\", { isSrc: true, i: outlet });\n    //     return this;\n    // }\n    // connectedInlet(inlet: number, srcBoxId: string, srcOutlet: number, lineId: string) {\n    //     if (this._object) this._object.connectedInlet(inlet, srcBoxId, srcOutlet, lineId);\n    //     this.emit(\"connectedPort\", { isSrc: false, i: inlet });\n    //     return this;\n    // }\n    // disconnectedOutlet(outlet: number, destBoxId: string, destInlet: number, lineId: string) {\n    //     if (this._object) this._object.disconnectedOutlet(outlet, destBoxId, destInlet, lineId);\n    //     const last = this._patcher.getLinesBySrcID(this.id)[outlet].length === 1;\n    //     this.emit(\"disconnectedPort\", { isSrc: true, i: outlet, last });\n    //     return this;\n    // }\n    // disconnectedInlet(inlet: number, srcBoxId: string, srcOutlet: number, lineId: string) {\n    //     if (this._object) this._object.disconnectedInlet(inlet, srcBoxId, srcOutlet, lineId);\n    //     const last = this._patcher.getLinesByDestID(this.id)[inlet].length === 1;\n    //     this.emit(\"disconnectedPort\", { isSrc: false, i: inlet, last });\n    //     return this;\n    // }\n    // isOutletTo(outlet: number, box: HardwareBox, inlet: number) {\n    //     const iterator = this._outletLines[outlet].values();\n    //     let r: IteratorResult<HardwareLine, HardwareLine>;\n    //     while (!(r = iterator.next()).done) {\n    //         const line = r.value;\n    //         if (line.destBox === box && line.destInlet === inlet) return true;\n    //     }\n    //     return false;\n    // }\n    // isInletFrom(inlet: number, box: HardwareBox, outlet: number) {\n    //     const iterator = this._inletLines[inlet].values();\n    //     let r: IteratorResult<HardwareLine, HardwareLine>;\n    //     while (!(r = iterator.next()).done) {\n    //         const line = r.value;\n    //         if (line.srcBox === box && line.srcOutlet === outlet) return true;\n    //     }\n    //     return false;\n    // }\n    isConnectedTo(io: number, otherBox: HardwareBox, otherIo: number) {\n        const iterator = this._ioLines[io].values();\n        let iter: IteratorResult<HardwareLine, HardwareLine>;\n        while (!(iter = iterator.next()).done) {\n            const line = iter.value;\n            if ((line.aBox === otherBox && line.aIo[1] === otherIo) || (line.bBox === otherBox && line.bIo[1] === otherIo))\n                return true;\n        }\n        return false;\n    }\n\n    async changeText(textIn: string, force?: boolean) {\n        if (!force && textIn === this.text) return this;\n        const { defaultSize: oldDefaultSize } = this;\n        this.allLines.forEach(line => line.disable());\n        await this._object?.destroy();\n        this.text = textIn;\n        this.args = [] as Args<T>;\n        await this.init();\n        this.allLines.forEach(line => line.enable());\n        const { defaultSize } = this;\n        if (!defaultSize.every((v, i) => v === oldDefaultSize[i])) {\n            this.size = defaultSize;\n            this.presentationSize = defaultSize;\n        }\n        this.emit(\"textChanged\", this);\n        this._object?.setMeta(this._object.meta);\n        await this.postInit();\n        return this;\n    }\n    update(e: { args?: any[]; props?: Record<string, any> }) {\n        const { args, props } = e;\n        if (args) this.args = args as Args<T>;\n        if (props) {\n            if (isTRect(props.rect)) {\n                this.setRect(props.rect);\n                delete props.rect;\n            }\n            if (isTPresentationRect(props.presentationRect)) {\n                this.setPresentationRect(props.presentationRect);\n                delete props.presentationRect;\n            }\n            if (typeof props.presentation === \"boolean\") {\n                this.setPresentation(props.presentation);\n                delete props.presentation;\n            }\n            if (typeof props.background === \"boolean\") {\n                this.setBackground(props.background);\n                delete props.background;\n            }\n            this.props = Object.assign(this.props, props);\n        }\n        return this;\n    }\n    get position() {\n        return this.rect.slice(0, 2) as [number, number];\n    }\n    set position([leftIn, topIn]: [number, number]) {\n        const [left, top, width, height] = this.rect;\n        this.setRect([typeof leftIn === \"number\" ? leftIn : left, typeof topIn === \"number\" ? topIn : top, width, height] as TRect);\n    }\n    get presentationPosition() {\n        return this.presentationRect.slice(0, 2) as [number | string, number | string];\n    }\n    set presentationPosition([leftIn, topIn]: [number | string, number | string]) {\n        const [left, top, width, height] = this.presentationRect;\n        this.setPresentationRect([typeof leftIn === \"number\" || typeof leftIn === \"string\" ? leftIn : left, typeof topIn === \"number\" || typeof topIn === \"string\" ? topIn : top, width, height] as TPresentationRect);\n    }\n    get size() {\n        return this.rect.slice(2) as [number, number];\n    }\n    set size([widthIn, heightIn]: [number, number]) {\n        const [left, top, width, height] = this.rect;\n        this.setRect([left, top, widthIn || width, heightIn || height] as TRect);\n    }\n    get presentationSize() {\n        return this.presentationRect.slice(2) as [number | string, number | string];\n    }\n    set presentationSize([widthIn, heightIn]: [number | string, number | string]) {\n        const [left, top, width, height] = this.presentationRect;\n        this.setPresentationRect([left, top, widthIn || width, heightIn || height] as TPresentationRect);\n    }\n    getLeft(inPresentation = false) {\n        const rectKey = inPresentation ? \"presentationRect\" : \"rect\";\n        return this[rectKey][0];\n    }\n    setLeft(leftIn: number | string, inPresentation = false) {\n        const positionKey = inPresentation ? \"presentationPosition\" : \"position\";\n        this[positionKey] = [leftIn as any, undefined];\n    }\n    getTop(inPresentation = false) {\n        const rectKey = inPresentation ? \"presentationRect\" : \"rect\";\n        return this[rectKey][1];\n    }\n    setTop(topIn: number | string, inPresentation = false) {\n        const positionKey = inPresentation ? \"presentationPosition\" : \"position\";\n        this[positionKey] = [undefined, topIn as any];\n    }\n    getWidth(inPresentation = false) {\n        const rectKey = inPresentation ? \"presentationRect\" : \"rect\";\n        return this[rectKey][2];\n    }\n    setWidth(widthIn: number | string, inPresentation = false) {\n        const sizeKey = inPresentation ? \"presentationSize\" : \"size\";\n        this[sizeKey] = [widthIn as any, undefined];\n    }\n    getHeight(inPresentation = false) {\n        const rectKey = inPresentation ? \"presentationRect\" : \"rect\";\n        return this[rectKey][3];\n    }\n    setHeight(heightIn: number | string, inPresentation = false) {\n        const sizeKey = inPresentation ? \"presentationSize\" : \"size\";\n        this[sizeKey] = [undefined, heightIn as any];\n    }\n    setBackground(bool: boolean) {\n        if (!!this.background === !!bool) return this;\n        this.background = bool;\n        this.emit(\"backgroundChanged\", this);\n        return this;\n    }\n    setPresentation(bool: boolean) {\n        if (!!this.presentation === !!bool) return this;\n        this.presentation = bool;\n        if (bool) this.presentationRect = this.rect.slice() as TRect;\n        this.emit(\"presentationChanged\", this);\n        return this;\n    }\n    setRect(rect: TRect) {\n        if (!isTRect(rect)) return this;\n        rect[0] = Math.max(0, rect[0]);\n        rect[1] = Math.max(0, rect[1]);\n        rect[2] = Math.max(15, rect[2]);\n        rect[3] = Math.max(15, rect[3]);\n        this.rect = rect;\n        this.ioLines.forEach(set => set.forEach(line => { line.uiUpdateA(); line.uiUpdateB(); }));\n\n        // this.inletLines.forEach(set => set.forEach(line => line.uiUpdateDest()));\n        // this.outletLines.forEach(set => set.forEach(line => line.uiUpdateSrc()));\n        this.emit(\"rectChanged\", this);\n        return this;\n    }\n    setPresentationRect(rect: TPresentationRect) {\n        if (!isTPresentationRect(rect)) return this;\n        if (typeof rect[0] === \"number\") rect[0] = Math.max(0, rect[0]);\n        if (typeof rect[1] === \"number\") rect[1] = Math.max(0, rect[1]);\n        if (typeof rect[2] === \"number\") rect[2] = Math.max(15, rect[2]);\n        if (typeof rect[3] === \"number\") rect[3] = Math.max(15, rect[3]);\n        this.presentationRect = rect;\n        this.emit(\"presentationRectChanged\", this);\n        return this;\n    }\n    getIsMovable(inPresentation = false) {\n        if (!inPresentation) return true;\n        return isRectMovable(this.presentationRect);\n    }\n    getIsResizable(inPresentation = false) {\n        if (!inPresentation) return true;\n        return isRectResizable(this.presentationRect);\n    }\n    setZIndex(zIndex: number) {\n        const oldZIndex = this.zIndex;\n        this.zIndex = zIndex;\n        this.undoable({ oldZIndex, zIndex });\n        this._patcher.emit(\"zIndexChanged\", { boxId: this.id, zIndex });\n    }\n    error(text: string) {\n        this.emit(\"error\", text);\n        this._patcher.newLog(\"error\", \"Patcher\", text, this);\n    }\n    highlight() {\n        this._patcher.emit(\"highlightBox\", this.id);\n    }\n    highlightPort(isSrc: boolean, portIndex: number) {\n        this._patcher.emit(\"highlightPort\", { boxId: this.id, isSrc, i: portIndex });\n    }\n    undoable(e: { oldArgs?: Args<T>; args?: Args<T>; oldProps?: Props<T>; props?: Props<T>; oldState?: State<T>; state?: State<T>; oldZIndex: number; zIndex?: number }) {\n        this._patcher.boxChanged(this.id, e);\n    }\n    minWidth() {\n        // const mostBubbles = this.inlets > this.outlets ? this.inlets : this.outlets;\n        // const minWidth = mostBubbles ? 20 + (mostBubbles - 1) * 20 : 30;\n        return 20;\n    }\n    async changeObject({ args, props, state, zIndex }: { args?: Args<T>; props?: Props<T>; state?: State<T>; zIndex?: number }, options?: ObjectUpdateOptions) {\n        if (args) await this._object?.updateArgs(args, options);\n        if (props) await this._object?.updateProps(props, options);\n        if (state) await this._object?.updateState(state, options);\n    }\n    async destroy() {\n        this.allLines.forEach(line => this._patcher.deleteLine(line.id));\n        delete this._patcher.boxes[this.id];\n        await this._object?.destroy();\n        return this;\n    }\n    static parseObjText(strIn: string) {\n        const REGEX = /[^\\s]+/gi;\n        const strArray = [];\n        let match = REGEX.exec(strIn);\n        while (match != null) {\n            // Index 1 in the array is the captured group if it exists\n            // Index 0 is the matched text, which we use if no captured group exists\n            strArray.push(match[1] ? match[1] : match[0]);\n            // Each call to exec returns the next regex match as an array\n            match = REGEX.exec(strIn);\n        }\n        const objOut: { class: string; args: any[]; props: Record<string, any> } = { class: \"\", args: [], props: {} };\n        let lastProp;\n        if (strArray.length) objOut.class = strArray.shift();\n        while (strArray.length) {\n            const el = strArray.shift();\n            if (typeof lastProp === \"undefined\" && el.charAt(0) !== \"@\") { // is arg, to push\n\n                const number = Number(el);\n\n                if (!isNaN(number)) {\n                    objOut.args.push(number);\n                    continue;\n                }\n\n                try {\n                    objOut.args.push(JSON.parse(el));\n                } catch (e) {\n                    objOut.args.push(el);\n                }\n                continue;\n            }\n            if (el.length > 1 && el.charAt(0) === \"@\") { // is prop key\n                lastProp = el.substr(1);\n                objOut.props[lastProp] = [];\n                continue;\n            }\n            try { // is prop value\n                objOut.props[lastProp].push(JSON.parse(el));\n            } catch (e) {\n                objOut.props[lastProp].push(el);\n            }\n        }\n        for (const key in objOut.props) { // no value = true, one value need to parse, else array\n            if (objOut.props[key].length === 0) objOut.props[key] = true;\n            else if (objOut.props[key].length === 1) objOut.props[key] = parseToPrimitive(objOut.props[key][0]);\n            else objOut.props[key] = parseToPrimitive(objOut.props[key].join(\" \"));\n        }\n        return objOut;\n    }\n    toString() {\n        const { id, text, ios, rect, background, presentation, presentationRect, args, props, data, zIndex } = this;\n\n        const defaultProps: Record<string, any> = structuredClone(props);\n        let pinNames: string[] = [];\n        if (this.meta) {\n            for (const key in this.meta.props) {\n                if (this.meta.props[key].alwaysSerialize) {\n                    if (!(key in defaultProps)) {\n                        defaultProps[key] = this.meta.props[key].default;\n                    }\n                }\n            }\n            pinNames = this.meta.ios.map(io => io.pin.pinName);\n        }\n\n        return JSON.stringify({ id, text, pinNames, rect, background, presentation, presentationRect, args, props: defaultProps, data, zIndex });\n    }\n    toSerializable(): THardwareBox {\n        return JSON.parse(this.toString());\n    }\n}\n","import { BasePin, I2CBus, USBBus } from \"./types\";\n\nfunction compatibleI2c(pins: BasePin[]) {\n  let sdaCount = 0;\n  let sclCount = 0;\n\n  pins.forEach((pin) => {\n    if (pin.busCapabilities) {\n      for (const busType in pin.busCapabilities) {\n        const bus = pin.busCapabilities[busType] as I2CBus;\n        if (bus.i2c) {\n          // Increment counters based on I2C capabilities\n          if (bus.sda) sdaCount++;\n          if (bus.scl) sclCount++;\n        }\n      }\n    }\n  });\n\n  return sdaCount > 1 || sclCount > 1;\n}\n\nfunction compatibleUsb(pins: BasePin[]) {\n  let dplusCount = 0;\n  let dminusCount = 0;\n  let idCount = 0;\n\n  pins.forEach((pin) => {\n    if (pin.busCapabilities) {\n      for (const busType in pin.busCapabilities) {\n        const bus = pin.busCapabilities[busType] as USBBus;\n        if (bus.usb) {\n          // Increment counters based on USB capabilities\n          if (bus.dplus) dplusCount++;\n          if (bus.dminus) dminusCount++;\n          if (bus.id) idCount++;\n        }\n      }\n    }\n  });\n\n  // Let's consider tie flexibility\n  const tiePinsCount = pins.filter((p) => p.tie).length;\n\n  if (\n    pins.length === 2 &&\n    (dplusCount === 1 || dminusCount === 1 || idCount === 1) &&\n    tiePinsCount === 1\n  ) {\n    // If there's only one dplus, dminus, or id, the tie pin can accommodate it\n    return true;\n  }\n\n  if (dplusCount >= 2 || dminusCount >= 2) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction compatibleBus(pins: BasePin[]) {\n  let compatibilities = [compatibleUsb, compatibleI2c];\n\n  return compatibilities.some((f) => f(pins));\n}\n\nfunction compatibleDigital(pins: BasePin[]) {\n  let num_outputs = pins.filter((p) => p.digitalOutput && !p.digitalInput).length;\n\n  if (num_outputs > 1) {\n    return false;\n  }\n\n  // now, for all fixed outputs, every other pin must have an input\n  let outputs = pins.map((p, i) => ({ p, i })).filter(({ p }) => p.digitalOutput);\n\n  let some_valid_config = false;\n  for (const output of outputs) {\n    const { p: pin, i: index } = output;\n\n    // In any configuration where an output is able to not conflict, there must be a compatibility\n    if (pins.filter((_, i) => i !== index).every((p) => p.digitalInput || p.tie)) {\n      some_valid_config = true;\n      break;\n    }\n  }\n\n  // otherwise, simple analog connections should be compatible\n  return some_valid_config;\n}\n\nfunction compatibleAnalog(pins: BasePin[]) {\n  let num_outputs = pins.filter((p) => p.analogOutput && !p.analogInput).length;\n\n  if (num_outputs > 1) {\n    return false;\n  }\n\n  // now, for all outputs, every other pin must have an input\n  let outputs = pins.map((p, i) => ({ p, i })).filter(({ p }) => p.analogOutput);\n\n  let some_valid_config = false;\n  for (const output of outputs) {\n    const { p: pin, i: index } = output;\n\n    // In any configuration where an output is able to not conflict, there must be a compatibility\n    if (pins.filter((_, i) => i !== index).every((p) => p.analogInput || p.tie)) {\n      some_valid_config = true;\n      break;\n    }\n  }\n\n  // otherwise, simple analog connections should be compatible\n  return some_valid_config;\n}\n\nexport function compatiblePins(pins: BasePin[]) {\n  let compatibilities = [compatibleBus, compatibleDigital, compatibleAnalog];\n\n  // If any of the compatibilities are true, then the pins are compatible\n  // TODO -- this should probably return exactly which aspects are compatible\n  return compatibilities.some((f) => f(pins));\n}\n","import type { SemanticICONS } from \"semantic-ui-react\";\nimport { getTimestamp, isRectMovable, isRectResizable, isTRect } from \"../../utils/utils\";\nimport FileEditor from \"../file/FileEditor\";\nimport Box from \"./Box\";\nimport Line from \"./Line\";\nimport type { TRect, TResizeHandlerType } from \"../types\";\nimport type { BasePin, RawHardwarePatcher, THardwareBox, THardwareLine } from \"./types\";\nimport type Patcher from \"./Patcher\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type TempPatcherFile from \"./TempHardwareFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\nimport type { PatcherEventMap, TPublicPatcherProps } from \"./Patcher\";\nimport HardwareLine from \"./Line\";\nimport { compatiblePins } from \"./Compatibility\";\n\nexport interface PatcherEditorEventMap extends PatcherEditorState {\n    \"create\": RawHardwarePatcher;\n    \"delete\": RawHardwarePatcher;\n    \"changeBoxText\": { boxId: string; oldText: string; text: string };\n    \"boxChanged\": { boxId: string; oldArgs?: any[]; args?: any[]; oldProps?: Record<string, any>; props?: Record<string, any>; oldState?: Record<string, any>; state?: Record<string, any>; oldZIndex?: number; zIndex?: number };\n    \"zIndexChanged\": { boxId: string; zIndex: number };\n    \"changeLineA\": { lineId: string, oldA: [string, number]; newA: [string, number] };\n    \"changeLineB\": { lineId: string, oldB: [string, number]; newB: [string, number] };\n\n    // \"changeLineSrc\": { lineId: string; oldSrc: [string, number]; src: [string, number] };\n    // \"changeLineDest\": { lineId: string; oldDest: [string, number]; dest: [string, number] };\n    \"selected\": string[];\n    \"moving\": { selected: string[]; delta: { x: number; y: number }; presentation: boolean };\n    \"moved\": { selected: string[]; delta: { x: number; y: number }; presentation: boolean };\n    \"resized\": { selected: string[]; delta: { x: number; y: number }; type: TResizeHandlerType; presentation: boolean };\n    \"tempLine\": { findSrc: boolean; from: [string, number] };\n    \"inspector\": never;\n    \"reference\": never;\n    \"help\": never;\n    \"dockUI\": string;\n    \"propsChanged\": { props: Partial<TPublicPatcherProps>; oldProps: Partial<TPublicPatcherProps> };\n    \"highlightBox\": string;\n    \"highlightPort\": { boxId: string; isSrc: boolean; i: number } | null;\n    \"bubblePorts\": { boxId: string; i: number; pin: BasePin } | null;\n}\n\nexport interface PatcherHistoryEventMap extends Pick<PatcherEditorEventMap, \"create\" | \"delete\" | \"changeBoxText\" | \"changeLineA\" | \"changeLineB\" | \"moved\" | \"resized\" | \"boxChanged\" | \"propsChanged\"> { }\n\nexport interface PatcherEditorState {\n    locked: boolean;\n    presentation: boolean;\n    showGrid: boolean;\n    snapToGrid: boolean;\n    selectAfterEdit: boolean;\n    selected: string[];\n}\n\nexport default class PatcherEditor extends FileEditor<Patcher, PatcherEditorEventMap> {\n    static async fromProjectItem({ file, env, project, instanceId }: { file: PersistentProjectFile | TempPatcherFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }): Promise<PatcherEditor> {\n        const patcher = await file.instantiate({ env, project, instanceId }) as Patcher;\n        const editor = new this(patcher);\n        return editor.init();\n    }\n    state: PatcherEditorState = {\n        locked: false,\n        presentation: false,\n        showGrid: true,\n        snapToGrid: true,\n        selectAfterEdit: true,\n        selected: []\n    };\n    get isLocked() {\n        return this.state.locked;\n    }\n    get boxes() {\n        return this.instance.boxes;\n    }\n    get lines() {\n        return this.instance.lines;\n    }\n    get props() {\n        return this.instance.props;\n    }\n    get publicProps() {\n        return this.instance.publicProps;\n    }\n    get fileExtension() {\n        return this.instance.fileExtension;\n    }\n    get fileName() {\n        return this.instance.fileName;\n    }\n    get fileIcon(): SemanticICONS {\n        return \"sitemap\";\n    }\n    handleChangeBoxText = (e: PatcherEventMap[\"changeBoxText\"]) => this.emit(\"changeBoxText\", e);\n    handlePassiveDeleteLine = (e: PatcherEventMap[\"passiveDeleteLine\"]) => this.emit(\"delete\", { boxes: {}, lines: { [e.id]: e.toSerializable() } });\n    handleBoxChanged = (e: PatcherEventMap[\"boxChanged\"]) => this.emit(\"boxChanged\", e);\n    handlePropsChanged = (e: PatcherEventMap[\"propsChanged\"]) => this.emit(\"propsChanged\", e);\n    handleZIndexChanged = (e: PatcherEventMap[\"zIndexChanged\"]) => this.emit(\"zIndexChanged\", e);\n    handleHighlightBox = (e: PatcherEventMap[\"highlightBox\"]) => this.emit(\"highlightBox\", e);\n    handleHighlightPort = (e: PatcherEventMap[\"highlightPort\"]) => this.emit(\"highlightPort\", e);\n    handleChanged = () => this.instance.emitChanged();\n    constructor(instance: Patcher) {\n        super(instance);\n        const { openInPresentation } = this.props;\n        this.setState({\n            locked: false,\n            presentation: !!openInPresentation,\n            showGrid: true,\n            snapToGrid: true,\n            selectAfterEdit: true,\n            selected: []\n        });\n    }\n    async init() {\n        if (!this.instance.isReady) {\n            await new Promise<void>((resolve, reject) => {\n                const handleReady = () => {\n                    resolve();\n                    this.instance.off(\"ready\", handleReady);\n                };\n                this.instance.on(\"ready\", handleReady);\n            });\n        }\n        this.on(\"changed\", this.handleChanged);\n        this.instance.on(\"changeBoxText\", this.handleChangeBoxText);\n        this.instance.on(\"passiveDeleteLine\", this.handlePassiveDeleteLine);\n        this.instance.on(\"boxChanged\", this.handleBoxChanged);\n        this.instance.on(\"propsChanged\", this.handlePropsChanged);\n        this.instance.on(\"zIndexChanged\", this.handleZIndexChanged);\n        this.instance.on(\"highlightBox\", this.handleHighlightBox);\n        this.instance.on(\"highlightPort\", this.handleHighlightPort);\n        const { openInPresentation } = this.props;\n        this.setState({\n            locked: false,\n            presentation: !!openInPresentation,\n            showGrid: true,\n            snapToGrid: true,\n            selectAfterEdit: true,\n            selected: []\n        });\n        this._isReady = true;\n        this.emit(\"ready\");\n        return this;\n    }\n    setState(state: Partial<PatcherEditorState>) {\n        let changed = false;\n        for (const keyIn in state) {\n            const key = keyIn as keyof PatcherEditorState;\n            if (this.state[key] === state[key]) continue;\n            changed = true;\n            if (key === \"locked\" || key === \"presentation\") this.deselectAll();\n            this.state[key] = state[key] as any;\n            this.emit(key, state[key]);\n        }\n        // if (changed) this.emit(\"stateChanged\", this.state);\n        return changed;\n    }\n    async createBox(boxIn: THardwareBox) {\n        const box = await this.instance.createBox(boxIn);\n        this.emit(\"create\", { boxes: { [box.id]: box.toSerializable() }, lines: {} });\n        await box.postInit();\n        return box;\n    }\n    async createBoxFromFile(file: PersistentProjectFile, boxIn: Omit<THardwareBox, \"text\">) {\n        const path = file.projectPath;\n        const type = file.type;\n        const ext = file.fileExtension;\n        if (type === \"patcher\") {\n            const extMap: Record<string, string> = this.props.mode === \"daisy\"\n                ? { json: \"p\", jspat: \"p\", maxpat: \"max\", gendsp: \"gen\", dsppat: \"pfaust\" }\n                : this.props.mode === \"faust\"\n                    ? { gendsp: \"gen\", dsppat: \"p\" }\n                    : this.props.mode === \"gen\"\n                        ? { gendsp: \"gen\" }\n                        : {};\n            const obj = extMap[ext];\n            if (obj) await this.createBox({ text: `${obj} ${path}`, ...boxIn });\n        } else if (type === \"audio\") {\n            await this.createBox({ text: `buffer~ ${path}`, ...boxIn });\n        } else if (type === \"image\") {\n            await this.createBox({ text: `img ${path}`, ...boxIn });\n        } else if (type === \"text\") {\n            await this.createBox({ text: `ptext ${path}`, ...boxIn });\n        }\n    }\n    async deleteBox(boxId: string) {\n        this.deselect(boxId);\n        const box = await this.instance.deleteBox(boxId);\n        if (!box) return null;\n        this.emit(\"delete\", { boxes: { [box.id]: box.toSerializable() }, lines: {} });\n        return box;\n    }\n    createLine(lineIn: THardwareLine) {\n        const line = this.instance.createLine(lineIn);\n        if (!line) return null;\n        this.emit(\"create\", { boxes: {}, lines: { [line.id]: line.toSerializable() } });\n        return line;\n    }\n    deleteLine(lineId: string) {\n        this.deselect(lineId);\n        const line = this.instance.deleteLine(lineId);\n        if (!line) return null;\n        this.emit(\"delete\", { boxes: {}, lines: { [line.id]: line.toSerializable() } });\n        return line;\n    }\n    changeLineA(lineId: string, aId: string, aIo: number) {\n        const e = this.instance.changeLineA(lineId, aId, aIo);\n        this.emit(\"changeLineA\", e);\n    }\n    changeLineB(lineId: string, bId: string, bIo: number) {\n        const e = this.instance.changeLineB(lineId, bId, bIo);\n        this.emit(\"changeLineB\", e);\n    }\n    async changeBox(boxId: string, change: { args?: any[]; props?: Record<string, any>; state?: Record<string, any>; zIndex?: number }) {\n        if (typeof change.zIndex === \"number\") this.instance.boxes[boxId]?.setZIndex(change.zIndex);\n        await this.instance.boxes[boxId]?.changeObject(change);\n    }\n\n    select(...ids: string[]) {\n        ids.forEach((id) => {\n            if (this.state.selected.indexOf(id) >= 0) return;\n            if (this.boxes[id] || this.lines[id]) this.state.selected.push(id);\n        });\n        this.emit(\"selected\", this.state.selected.slice());\n    }\n    selectAllBoxes() {\n        let ids = Object.keys(this.boxes);\n        if (this.state.presentation) ids = ids.filter(id => this.boxes[id].presentation);\n        this.state.selected = ids;\n        this.emit(\"selected\", ids);\n    }\n    selectOnly(...ids: string[]) {\n        this.state.selected = [];\n        this.select(...ids);\n    }\n    deselect(...ids: string[]) {\n        ids.forEach((id) => {\n            const i = this.state.selected.indexOf(id);\n            if (i === -1) return;\n            this.state.selected.splice(i, 1);\n        });\n        this.emit(\"selected\", this.state.selected.slice());\n    }\n    deselectAll() {\n        this.state.selected = [];\n        this.emit(\"selected\", []);\n    }\n    selectedToString() {\n        const lineSet = new Set<Line>();\n        const patcher: RawHardwarePatcher = { lines: {}, boxes: {} };\n        this.state.selected\n            .filter(id => id.startsWith(\"box\") && this.boxes[id])\n            .map(id => this.boxes[id])\n            .forEach((box) => {\n                box.allLines.forEach(line => lineSet.add(line));\n                patcher.boxes[box.id] = box.toSerializable();\n            });\n        lineSet.forEach((line) => {\n            if (patcher.boxes[line.aId] && patcher.boxes[line.bId])\n                patcher.lines[line.id] = line.toSerializable();\n        });\n        if (!Object.keys(patcher.boxes)) return undefined;\n        return JSON.stringify(patcher, undefined, 4);\n    }\n    bringToFront() {\n        this.state.selected\n            .filter(id => id.startsWith(\"box\") && this.boxes[id])\n            .map(id => this.boxes[id])\n            .forEach((box) => {\n                box.setZIndex(getTimestamp());\n            });\n    }\n    sendToBack() {\n        this.state.selected\n            .filter(id => id.startsWith(\"box\") && this.boxes[id])\n            .map(id => this.boxes[id])\n            .forEach((box) => {\n                box.setZIndex(-getTimestamp());\n            });\n    }\n    async pasteToPatcher(clipboard: RawHardwarePatcher) {\n        const idMap: Record<string, string> = {};\n        const pasted: RawHardwarePatcher = { boxes: {}, lines: {} };\n        if (!clipboard || !clipboard.boxes) return pasted;\n        const $init: Promise<Box>[] = [];\n        const $postInit: Promise<Box>[] = [];\n        // if (Array.isArray(clipboard.boxes)) { // Max Patcher\n        //     this.instance.state.preventEmitChanged = true;\n        //     const maxBoxes = clipboard.boxes;\n        //     for (let i = 0; i < maxBoxes.length; i++) {\n        //         const maxBox = maxBoxes[i].box;\n        //         const numID = parseInt(maxBox.id.match(/\\d+/)[0]);\n        //         let id = \"box-\" + numID;\n        //         if (this.boxes[id]) {\n        //             idMap[id] = \"box-\" + ++this.props.boxIndexCount;\n        //             id = idMap[id];\n        //         } else {\n        //             idMap[id] = id;\n        //             if (numID > this.props.boxIndexCount) this.props.boxIndexCount = numID;\n        //         }\n        //         const box: THardwareBox = {\n        //             id,\n        //             ios: max\n        //             inlets: maxBox.numinlets,\n        //             outlets: maxBox.numoutlets,\n        //             rect: maxBox.patching_rect,\n        //             text: (maxBox.maxclass === \"newobj\" ? \"\" : maxBox.maxclass + \" \") + (maxBox.text ? maxBox.text : \"\")\n        //         };\n        //         $init.push(this.instance.createBox(box));\n        //     }\n        //     const createdBoxes = (await Promise.all($init)).filter(box => !!box);\n        //     createdBoxes.forEach((box) => {\n        //         pasted.boxes[box.id] = box.toSerializable();\n        //         $postInit.push(box.postInit());\n        //     });\n        //     if (Array.isArray(clipboard.lines)) {\n        //         const maxLines = clipboard.lines;\n        //         for (let i = 0; i < maxLines.length; i++) {\n        //             const lineArgs = maxLines[i].patchline;\n        //             const id = \"line-\" + ++this.props.lineIndexCount;\n        //             const line: THardwareLine = {\n        //                 id,\n        //                 src: [idMap[lineArgs.source[0].replace(/obj/, \"box\")], lineArgs.source[1]],\n        //                 dest: [idMap[lineArgs.destination[0].replace(/obj/, \"box\")], lineArgs.destination[1]]\n        //             };\n        //             const createdLine = this.instance.createLine(line);\n        //             if (createdLine) pasted.lines[createdLine.id] = createdLine.toSerializable();\n        //         }\n        //     }\n        //     this.instance.state.preventEmitChanged = false;\n        //     if (Object.keys(pasted.boxes).length) {\n        //         if (this.state.selectAfterEdit) {\n        //             this.deselectAll();\n        //             this.select(...Object.keys(pasted.boxes));\n        //         }\n        //         this.emit(\"create\", pasted);\n        //         this.instance.emitGraphChanged();\n        //         await Promise.all($postInit);\n        //     }\n        //     return pasted;\n        // }\n        if (Array.isArray(clipboard.boxes) || Array.isArray(clipboard.lines))\n            return pasted;\n        this.instance.state.preventEmitChanged = true;\n        for (const boxId in clipboard.boxes) {\n            const box = clipboard.boxes[boxId];\n            if (this.boxes[box.id]) {\n                idMap[box.id] = \"box-\" + ++this.props.boxIndexCount;\n                box.id = idMap[box.id];\n            } else {\n                idMap[box.id] = box.id;\n                const numID = parseInt(box.id.match(/\\d+/)[0]);\n                if (numID > this.props.boxIndexCount) this.props.boxIndexCount = numID;\n            }\n            box.rect = [box.rect[0] + 30, box.rect[1] + 30, box.rect[2], box.rect[3]];\n            $init.push(this.instance.createBox(box));\n        }\n        const createdBoxes = (await Promise.all($init)).filter(box => !!box);\n        createdBoxes.forEach((box) => {\n            pasted.boxes[box.id] = box.toSerializable();\n            $postInit.push(box.postInit());\n        });\n        await Promise.all($postInit);\n        for (const lineId in clipboard.lines) {\n            const line = clipboard.lines[lineId];\n            line.id = \"line-\" + ++this.props.lineIndexCount;\n            line.aIo[0] = idMap[line.aIo[0]];\n            line.bIo[0] = idMap[line.bIo[0]];\n            const createdLine = this.instance.createLine(line);\n            if (createdLine) pasted.lines[createdLine.id] = createdLine.toSerializable();\n        }\n        this.instance.state.preventEmitChanged = false;\n        if (Object.keys(pasted.boxes).length) {\n            if (this.state.selectAfterEdit) {\n                this.deselectAll();\n                this.select(...Object.keys(pasted.boxes));\n            }\n            this.emit(\"create\", pasted);\n            this.instance.emitGraphChanged();\n        }\n        return pasted;\n    }\n    async create(objects: RawHardwarePatcher) {\n        const $init: Promise<Box>[] = [];\n        const $postInit: Promise<Box>[] = [];\n        const created: RawHardwarePatcher = { boxes: {}, lines: {} };\n        for (const boxId in objects.boxes) {\n            const boxIn = objects.boxes[boxId];\n            const box = new Box(this.instance, boxIn);\n            this.boxes[box.id] = box;\n            created.boxes[box.id] = box.toSerializable();\n            $init.push(box.init());\n            $postInit.push(box.postInit());\n        }\n        await Promise.all($init);\n        await Promise.all($postInit);\n        for (const lineId in objects.lines) {\n            const lineIn = objects.lines[lineId];\n            if (!this.instance.canCreateLine(lineIn)) continue;\n            const line = new Line(this.instance, lineIn);\n            this.lines[line.id] = line;\n            created.lines[line.id] = line.toSerializable();\n            line.enable();\n        }\n        if (this.state.selectAfterEdit) {\n            this.deselectAll();\n            this.select(...Object.keys(objects.boxes));\n        }\n        this.emit(\"create\", created);\n        this.instance.emitGraphChanged();\n    }\n    async deleteSelected() {\n        const boxSet = new Set<Box>();\n        const lineSet = new Set<Line>();\n        this.state.selected.filter(id => id.startsWith(\"line\")).forEach(id => lineSet.add(this.lines[id]));\n        this.state.selected.filter(id => id.startsWith(\"box\")).forEach((id) => {\n            boxSet.add(this.boxes[id]);\n            this.boxes[id].allLines.forEach(line => lineSet.add(line));\n        });\n        if (!boxSet.size && !lineSet.size) return undefined;\n        this.state.selected = [];\n        const deleted: RawHardwarePatcher = { boxes: {}, lines: {} };\n        const promises: Promise<Box>[] = [];\n        lineSet.forEach((line) => {\n            deleted.lines[line.id] = line.toSerializable();\n            line.destroy();\n        });\n        boxSet.forEach((box) => {\n            deleted.boxes[box.id] = box.toSerializable();\n            promises.push(box.destroy());\n        });\n        await Promise.all(promises);\n        this.emit(\"selected\", this.state.selected.slice());\n        this.emit(\"delete\", deleted);\n        this.instance.emitGraphChanged();\n        return deleted;\n    }\n    async delete(objects: RawHardwarePatcher) {\n        const deleted: RawHardwarePatcher = { boxes: {}, lines: {} };\n\n        console.log(`deleted objects: ${objects}`);\n        console.log(this.instance);\n        console.log(Object.keys(this.lines));\n\n        for (const id in objects.lines) {\n            console.log(`id: ${id}`);\n            deleted.lines[id] = this.lines[id].destroy().toSerializable();\n        }\n        const promises: Promise<Box>[] = [];\n        for (const id in objects.boxes) {\n            deleted.boxes[id] = this.boxes[id].toSerializable();\n            promises.push(this.boxes[id].destroy());\n        }\n        await Promise.all(promises);\n        this.emit(\"selected\", this.state.selected.slice());\n        this.emit(\"delete\", deleted);\n        this.instance.emitGraphChanged();\n    }\n    async cut() {\n        if (this.state.locked) return;\n        await this.copy();\n        this.deleteSelected();\n    }\n    async copy() {\n        if (this.state.locked) return;\n        const s = this.selectedToString();\n        if (!s) return;\n        await navigator.clipboard.writeText(s);\n    }\n    async paste() {\n        if (this.state.locked) return;\n        const s = await navigator.clipboard.readText();\n        if (!s) return;\n        let parsed: RawHardwarePatcher;\n        try {\n            parsed = JSON.parse(s);\n        } catch (e) { } // eslint-disable-line no-empty\n        await this.pasteToPatcher(parsed);\n    }\n    async duplicate() {\n        if (this.state.locked) return;\n        const s = this.selectedToString();\n        if (!s) return;\n        let parsed: RawHardwarePatcher;\n        try {\n            parsed = JSON.parse(s);\n        } catch (e) { } // eslint-disable-line no-empty\n        await this.pasteToPatcher(parsed);\n    }\n    async selectAll() {\n        this.selectAllBoxes();\n    }\n    selectRegion(selectionRect: number[], selectedBefore: string[]) {\n        let [left, top, right, bottom] = selectionRect;\n        if (left > right) [left, right] = [right, left];\n        if (top > bottom) [top, bottom] = [bottom, top];\n        const { presentation } = this.state;\n        const rectKey = presentation ? \"presentationRect\" : \"rect\";\n        const select = selectedBefore.slice();\n        for (const boxId in this.boxes) {\n            const box = this.boxes[boxId];\n            if (presentation && !box.presentation) continue;\n            const rect = box[rectKey];\n            if (!isTRect(rect)) continue;\n            const [boxLeft, boxTop, boxWidth, boxHeight] = rect;\n            const [boxRight, boxBottom] = [boxLeft + boxWidth, boxTop + boxHeight];\n            if (boxLeft < right && boxTop < bottom && boxRight > left && boxBottom > top) {\n                const i = select.indexOf(boxId);\n                if (i === -1) select.push(boxId);\n                else select.splice(i, 1);\n            }\n        }\n        const deselect = this.state.selected.filter(id => select.indexOf(id) === -1);\n        this.select(...select);\n        this.deselect(...deselect);\n    }\n    moveSelectedBox(dragOffset: { x: number; y: number }, refBoxID?: string) {\n        const { presentation, snapToGrid, selected } = this.state;\n        const rectKey = presentation ? \"presentationRect\" : \"rect\";\n        const delta = { ...dragOffset };\n        if (refBoxID) {\n            const rect = this.boxes[refBoxID][rectKey];\n            if (!isRectMovable(rect)) return { x: 0, y: 0 };\n            delta.x = snapToGrid ? Math.round((rect[0] + dragOffset.x) / this.props.grid[0]) * this.props.grid[0] - rect[0] : dragOffset.x;\n            delta.y = snapToGrid ? Math.round((rect[1] + dragOffset.y) / this.props.grid[1]) * this.props.grid[1] - rect[1] : dragOffset.y;\n        }\n        if (!delta.x && !delta.y) return dragOffset;\n        this.move(selected, delta, presentation);\n        return { x: dragOffset.x - delta.x, y: dragOffset.y - delta.y };\n    }\n    moveEnd(selected: string[], delta: { x: number; y: number }) {\n        const { presentation } = this.state;\n        const rectKey = presentation ? \"presentationRect\" : \"rect\";\n        let ids = selected.filter(id => id.startsWith(\"box\") && this.boxes[id]);\n        if (presentation) ids = ids.filter(id => isRectMovable(this.boxes[id][rectKey]));\n        const boxes = ids.map(id => this.boxes[id]);\n        boxes.forEach(box => box.emit(presentation ? \"presentationRectChanged\" : \"rectChanged\", box));\n        this.emit(\"moved\", { delta, selected: ids, presentation: this.state.presentation });\n    }\n    move(selected: string[], delta: { x: number; y: number }, presentation: boolean) {\n        if (this.state.selectAfterEdit) this.select(...selected);\n        const rectKey = presentation ? \"presentationRect\" : \"rect\";\n        let ids = selected.filter(id => id.startsWith(\"box\") && this.boxes[id]);\n        if (presentation) ids = ids.filter(id => isRectMovable(this.boxes[id][rectKey]));\n        const boxes = ids.map(id => this.boxes[id]);\n        if (boxes.length === 0) return;\n        let [left, top] = boxes[0][rectKey] as TRect;\n        for (let i = 1; i < boxes.length; i++) {\n            const box = boxes[i];\n            const [$left, $top] = box[rectKey] as TRect;\n            if ($left < left) left = $left;\n            if ($top < top) top = $top;\n        }\n        // Not allowing resize out of bound\n        delta.x = Math.max(delta.x, -left);\n        delta.y = Math.max(delta.y, -top);\n        if (delta.x) boxes.forEach(box => (box[rectKey] as TRect)[0] += delta.x);\n        if (delta.y) boxes.forEach(box => (box[rectKey] as TRect)[1] += delta.y);\n        // Emit events\n        if (!delta.x && !delta.y) return;\n        if (presentation !== this.state.presentation) return;\n        // boxes.forEach(box => box.emit(presentation ? \"presentationRectChanged\" : \"rectChanged\", box));\n        this.emit(\"moving\", { selected: ids, delta, presentation });\n        if (presentation) return;\n        const lineSet = new Set<Line>();\n        boxes.forEach((box) => {\n            box.ioLines.forEach(set => set.forEach(line => lineSet.add(line)));\n        });\n        lineSet.forEach(line => line.emit(\"posChanged\", line));\n    }\n    resizeSelectedBox(boxId: string, dragOffset: { x: number; y: number }, type: TResizeHandlerType) {\n        const { presentation, snapToGrid, selected } = this.state;\n        const rectKey = presentation ? \"presentationRect\" : \"rect\";\n        const rect = this.boxes[boxId][rectKey];\n        if (!isRectResizable(rect)) return { x: 0, y: 0 };\n        const delta = { x: 0, y: 0 };\n        // Round delta to grid\n        if (type === \"e\" || type === \"se\" || type === \"ne\") {\n            delta.x = snapToGrid ? Math.round((rect[0] + rect[2] + dragOffset.x) / this.props.grid[0]) * this.props.grid[0] - rect[0] - rect[2] : dragOffset.x;\n        }\n        if (type === \"s\" || type === \"se\" || type === \"sw\") {\n            delta.y = snapToGrid ? Math.round((rect[1] + rect[3] + dragOffset.y) / this.props.grid[1]) * this.props.grid[1] - rect[1] - rect[3] : dragOffset.y;\n        }\n        if (type === \"w\" || type === \"nw\" || type === \"sw\") {\n            delta.x = snapToGrid ? Math.round((rect[0] + dragOffset.x) / this.props.grid[0]) * this.props.grid[0] - rect[0] : dragOffset.x;\n        }\n        if (type === \"n\" || type === \"nw\" || type === \"ne\") {\n            delta.y = snapToGrid ? Math.round((rect[1] + dragOffset.y) / this.props.grid[1]) * this.props.grid[1] - rect[1] : dragOffset.y;\n        }\n        if (!delta.x && !delta.y) return dragOffset;\n        this.resize(selected, delta, type, presentation);\n        return { x: dragOffset.x - delta.x, y: dragOffset.y - delta.y };\n    }\n    resizeEnd(selected: string[], delta: { x: number; y: number }, type: TResizeHandlerType) {\n        const { presentation } = this.state;\n        this.emit(\"resized\", { delta, type, selected, presentation });\n    }\n    resize(selected: string[], delta: { x: number; y: number }, type: TResizeHandlerType, presentation: boolean) {\n        if (this.state.selectAfterEdit) this.select(...selected);\n        const rectKey = presentation ? \"presentationRect\" : \"rect\";\n        let ids = selected.filter(id => id.startsWith(\"box\") && this.boxes[id]);\n        if (presentation) ids = ids.filter(id => isRectResizable(this.boxes[id][rectKey]));\n        const boxes = ids.map(id => this.boxes[id]);\n        if (boxes.length === 0) return;\n        let [left, top, width, height] = boxes[0][rectKey] as TRect;\n        for (let i = 1; i < boxes.length; i++) {\n            const box = boxes[i];\n            const [$left, $top, $width, $height] = box[rectKey] as TRect;\n            if ($left < left) left = $left;\n            if ($top < top) top = $top;\n            if ($width < width) width = $width;\n            if ($height < height) height = $height;\n        }\n        // Not allowing resize out of bound\n        if (type === \"sw\" || type === \"w\" || type === \"nw\") delta.x = Math.max(delta.x, -left);\n        if (type === \"nw\" || type === \"n\" || type === \"ne\") delta.y = Math.max(delta.y, -top);\n        // Not allowing resize below 15px width or height\n        if (type === \"ne\" || type === \"e\" || type === \"se\") delta.x = Math.max(delta.x, 15 - width);\n        if (type === \"sw\" || type === \"w\" || type === \"nw\") delta.x = Math.min(delta.x, width - 15);\n        if (type === \"se\" || type === \"s\" || type === \"sw\") delta.y = Math.max(delta.y, 15 - height);\n        if (type === \"nw\" || type === \"n\" || type === \"ne\") delta.y = Math.min(delta.y, height - 15);\n        boxes.forEach((box) => {\n            const sizingX = box.UI ? box.UI?.sizing === \"horizontal\" || box.UI?.sizing === \"both\" : true;\n            const sizingY = box.UI ? box.UI?.sizing === \"vertical\" || box.UI?.sizing === \"both\" : true;\n            if (delta.x && sizingX) {\n                if (type === \"ne\" || type === \"e\" || type === \"se\") (box[rectKey] as TRect)[2] += delta.x;\n                if (type === \"sw\" || type === \"w\" || type === \"nw\") {\n                    (box[rectKey] as TRect)[2] -= delta.x;\n                    (box[rectKey] as TRect)[0] += delta.x;\n                }\n            }\n            if (delta.y && sizingY) {\n                if (type === \"se\" || type === \"s\" || type === \"sw\") (box[rectKey] as TRect)[3] += delta.y;\n                if (type === \"nw\" || type === \"n\" || type === \"ne\") {\n                    (box[rectKey] as TRect)[3] -= delta.y;\n                    (box[rectKey] as TRect)[1] += delta.y;\n                }\n            }\n        });\n        // Emit events\n        if (!delta.x && !delta.y) return;\n        if (presentation !== this.state.presentation) return;\n        boxes.forEach(box => box.emit(presentation ? \"presentationRectChanged\" : \"rectChanged\", box));\n        if (presentation) return;\n        const lineSet = new Set<Line>();\n        boxes.forEach((box) => {\n            box.ioLines.forEach(set => set.forEach(line => lineSet.add(line)));\n        });\n        lineSet.forEach(line => line.emit(\"posChanged\", line));\n    }\n    findNearestPort(left: number, top: number, from: [string, number], to?: [string, number]) {\n        let nearest: [string, number] = [null, null];\n        let minDistance = 100;\n\n        if (to && this.getPortsCompatible(from[0], from[1], to[0], to[1])) {\n            const currentPos = this.boxes[to[0]].getIoPos(to[1]);\n            const currentDistance = ((currentPos.left - left) ** 2 + (currentPos.top - top) ** 2) ** 0.5;\n            if (currentDistance < 100) {\n                nearest = to;\n                minDistance = currentDistance;\n            }\n        }\n\n        for (const id in this.boxes) {\n            const box = this.boxes[id];\n            box.ioPositions.map((pos, i) => ({ pos, i, compatible: this.getPortsCompatible(from[0], from[1], id, i) }))\n                .filter(({ compatible }) => compatible)\n                .forEach(({ pos, i }) => {\n                    const distance = ((pos.left - left) ** 2 + (pos.top - top) ** 2) ** 0.5;\n                    if (distance < minDistance) {\n                        const potentialLine: THardwareLine = { aIo: from, bIo: [id, i] };\n                        const canCreate = this.instance.canCreateLine(potentialLine);\n                        if (!canCreate) return;\n                        nearest = [id, i];\n                        minDistance = distance;\n                    }\n                });\n        }\n        return nearest;\n    }\n    getLinesByIo(boxId: string, io: number) {\n        const box = this.boxes[boxId];\n        if (!box || io > box.ios.length) {\n            return [];\n        }\n\n        const lines = [];\n\n        if (box.text.startsWith(\"tie\")) {\n            for (let key in this.lines) {\n                let line = this.lines[key];\n                if (line.aId === boxId || line.bId === boxId) {\n                    lines.push(line);\n                }\n            }\n        } else {\n            for (let key in this.lines) {\n                let line = this.lines[key];\n                if ((line.aId === boxId && line.aIo[1] === io) || (line.bId === boxId && line.bIo[1] === io)) {\n                    lines.push(line);\n                }\n            }\n        }\n        return lines;\n    }\n    getConnectedPins(boxId: string, io: number) {\n        let lines = this.getLinesByIo(boxId, io);\n\n        let all_boxes = lines.flatMap(line => [line.aIo, line.bIo]);\n        let unique_boxes = Array.from(new Set([...all_boxes, [boxId, io] as [string, number]]));\n\n        return unique_boxes.map(([id, io]) => this.boxes[id].meta.ios[io].pin);\n    }\n    getPortsCompatible(aBox: string, aIo: number, bBox: string, bIo: number) {\n\n        if (aBox === bBox) {\n            return false;\n        }\n\n        let aPins = this.getConnectedPins(aBox, aIo);\n        let bPins = this.getConnectedPins(bBox, bIo);\n\n        return compatiblePins([...aPins, ...bPins]);\n    }\n    // TODO -- this is where the magic happens\n    highlightNearestPort(findSrc: boolean, dragOffset: { x: number; y: number }, from: [string, number], to?: [string, number]) { // to = the port need to be reconnect\n        const origPos = to ? this.boxes[to[0]].getIoPos(to[1]) : this.boxes[from[0]].getIoPos(from[1]);\n        const left = origPos.left + dragOffset.x;\n        const top = origPos.top + dragOffset.y;\n        const [boxId, portIndex] = this.findNearestPort(left, top, from, to);\n\n        if (boxId) this.highlightPort(boxId, findSrc, portIndex);\n        else this.unhighlightPort();\n        return [boxId, portIndex] as [string, number];\n    }\n    highlightBox(boxId: string) {\n        this.emit(\"highlightBox\", boxId);\n    }\n    highlightPort(boxId: string, isSrc: boolean, portIndex: number) {\n        this.emit(\"highlightPort\", { boxId, isSrc, i: portIndex });\n    }\n    unhighlightPort() {\n        this.emit(\"highlightPort\", null);\n    }\n    bubblePorts(boxId: string, portIndex: number, pin: BasePin) {\n        this.emit(\"bubblePorts\", { boxId, i: portIndex, pin });\n    }\n    unBubblePorts() {\n        this.emit(\"bubblePorts\", null);\n    }\n    tempLine(findSrc: boolean, from: [string, number]) {\n        this.emit(\"tempLine\", { findSrc, from });\n        this.bubblePorts(from[0], from[1], this.boxes[from[0]].meta.ios[from[1]].pin);\n        return this;\n    }\n    inspector(box?: Box) {\n        if (box) this.emit(\"inspector\");\n        else if (this.state.selected.length) {\n            const found = this.state.selected.find(id => id.startsWith(\"box\"));\n            if (found && this.boxes[found]) this.emit(\"inspector\");\n        }\n    }\n    reference(box?: Box) {\n        if (box) this.emit(\"reference\");\n        else if (this.state.selected.length) {\n            const found = this.state.selected.find(id => id.startsWith(\"box\"));\n            if (found && this.boxes[found]) this.emit(\"reference\");\n        }\n    }\n    help(box?: Box) {\n        if (box) {\n            this.emit(\"help\");\n        } else if (this.state.selected.length) {\n            const found = this.state.selected.find(id => id.startsWith(\"box\"));\n            if (found && this.boxes[found]) {\n                this.emit(\"help\");\n            }\n        }\n    }\n    dockUI(box?: Box) {\n        if (box && box.UI.dockable) this.emit(\"dockUI\", box.id);\n        else if (this.state.selected.length) {\n            const found = this.state.selected.find(id => id.startsWith(\"box\"));\n            if (found && this.boxes[found] && this.boxes[found].UI.dockable) this.emit(\"dockUI\", found);\n        }\n    }\n    onUiResized() { }\n    async toTempData() {\n        return this.instance.toSerializable();\n    }\n}\n","import History, { IHistoryEvent } from \"../file/History\";\nimport PatcherEditor, { PatcherHistoryEventMap } from \"./HardwareEditor\";\n\nexport default class PatcherHistory extends History<PatcherHistoryEventMap, PatcherEditor> {\n    get eventListening(): (keyof PatcherHistoryEventMap)[] {\n        return [\n            \"create\", \"delete\", \"changeBoxText\", \"boxChanged\",\n            \"changeLineA\", \"changeLineB\", \"moved\", \"resized\", \"propsChanged\"\n        ];\n    }\n    async undoOf(editor: PatcherEditor, eventName: keyof PatcherHistoryEventMap, eventData?: any) {\n        if (eventName === \"delete\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.create(e);\n        } else if (eventName === \"changeBoxText\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, oldText } = e;\n            await editor.instance.changeBoxText(boxId, oldText);\n        } else if (eventName === \"boxChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, oldArgs, oldProps, oldState, oldZIndex } = e;\n            await editor.changeBox(boxId, { args: oldArgs, props: oldProps, state: oldState, zIndex: oldZIndex });\n        } else if (eventName === \"moved\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, presentation } = e;\n            const d = { x: -1 * delta.x, y: -1 * delta.y };\n            editor.move(selected, d, presentation);\n            editor.moveEnd(selected, d);\n        } else if (eventName === \"changeLineA\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, oldA } = e;\n            editor.changeLineA(lineId, oldA[0], oldA[1]);\n        } else if (eventName === \"changeLineB\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, oldB } = e;\n            editor.changeLineB(lineId, oldB[0], oldB[1]);\n        } else if (eventName === \"create\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.delete(e);\n        } else if (eventName === \"resized\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, type: t, presentation } = e;\n            const d = { x: -1 * delta.x, y: -1 * delta.y };\n            editor.resize(selected, d, t, presentation);\n            editor.resizeEnd(selected, d, t);\n        } else if (eventName === \"propsChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            editor.instance.setProps(e.oldProps);\n        }\n    }\n    async redoOf(editor: PatcherEditor, eventName: keyof PatcherHistoryEventMap, eventData?: any) {\n        if (eventName === \"create\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.create(e);\n        } else if (eventName === \"changeBoxText\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, text } = e;\n            await editor.instance.changeBoxText(boxId, text);\n        } else if (eventName === \"boxChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { boxId, args, props, state, zIndex } = e;\n            await editor.changeBox(boxId, { args, props, state, zIndex });\n        } else if (eventName === \"moved\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, presentation } = e;\n            editor.move(selected, delta, presentation);\n            editor.moveEnd(selected, delta);\n        } else if (eventName === \"changeLineA\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, newA } = e;\n            editor.changeLineA(lineId, newA[0], newA[1]);\n        } else if (eventName === \"changeLineB\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { lineId, newB } = e;\n            editor.changeLineB(lineId, newB[0], newB[1]);\n        } else if (eventName === \"delete\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            await editor.delete(e);\n        } else if (eventName === \"resized\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            const { selected, delta, type: t, presentation } = e;\n            editor.resize(selected, delta, t, presentation);\n            editor.resizeEnd(selected, delta, t);\n        } else if (eventName === \"propsChanged\") {\n            const e: PatcherHistoryEventMap[typeof eventName] = eventData;\n            editor.instance.setProps(e.props);\n        }\n    }\n    async mergeChanges(...events: IHistoryEvent<PatcherHistoryEventMap>[]) {\n        this.editors.forEach(e => e.state.selectAfterEdit = false);\n        const merged = await super.mergeChanges(...events);\n        this.editors.forEach(e => e.state.selectAfterEdit = true);\n        return merged;\n    }\n}\n","import type { WamNode } from \"@webaudiomodules/api\";\nimport TypedEventEmitter from \"../../utils/TypedEventEmitter\";\nimport type Patcher from \"./Patcher\";\nimport type { THardwareLine, THardwareLineType } from \"./types\";\nimport type { IJSPatcherObject, TMetaType } from \"../objects/base/AbstractObject\";\n\nexport interface HardwareLineEventMap {\n    \"passData\": any;\n    \"bPosChanged\": { top: number; left: number };\n    \"aPosChanged\": { top: number; left: number };\n    \"posChanged\": HardwareLine;\n    \"typeChanged\": THardwareLineType;\n}\n\nexport default class HardwareLine extends TypedEventEmitter<HardwareLineEventMap> {\n    static compare(line1: HardwareLine, line2: HardwareLine) {\n        return line2.positionHash - line1.positionHash;\n    }\n    readonly id: string;\n    aIo: [string, number];\n    bIo: [string, number];\n    disabled = true;\n    private _type: THardwareLineType;\n    private readonly _patcher: Patcher;\n    constructor(patcherIn: Patcher, lineIn: THardwareLine) {\n        super();\n        this.id = lineIn.id;\n        this.aIo = lineIn.aIo;\n        this.bIo = lineIn.bIo;\n        this.disabled = true;\n        this._patcher = patcherIn;\n        const { aBox, bBox } = this;\n        this._type = this.calcType();\n        if (aBox) {\n            aBox.on(\"metaUpdated\", this.updateType);\n            aBox.addIoLine(this, true);\n        }\n        if (bBox) {\n            bBox.on(\"metaUpdated\", this.updateType);\n            bBox.addIoLine(this, false);\n        }\n    }\n    get presentation() {\n        return this.aBox && this.aBox.presentation && this.bBox && this.bBox.presentation;\n    }\n    setA(a: [string, number]) {\n        const aId = a[0];\n        const aIo = a[1];\n        if (aId === this.aIo[0] && aIo === this.aIo[1]) return this;\n        this.aBox.off(\"metaUpdated\", this.updateType);\n        this.disable();\n        this.aBox.removeIoLine(this, true);\n        this.aIo = [aId, aIo];\n        this.aBox.addIoLine(this, true);\n        this.enable();\n        this.aBox.on(\"metaUpdated\", this.updateType);\n        this.updateType();\n        return this.uiUpdateA();\n    }\n    getA() {\n        return this.aIo;\n    }\n    uiUpdateA() {\n        this.emit(\"aPosChanged\", this.aPos);\n        return this;\n    }\n    setB(b: [string, number]) {\n        const bId = b[0];\n        const bIo = b[1];\n        if (bId === this.bIo[0] && bIo === this.bIo[1]) return this;\n        this.aBox.off(\"metaUpdated\", this.updateType);\n        this.disable();\n        this.bBox.removeIoLine(this, false);\n        this.bIo = [bId, bIo];\n        this.bBox.removeIoLine(this, false);\n        this.enable();\n        this.bBox.on(\"metaUpdated\", this.updateType);\n        this.updateType();\n        return this.uiUpdateB();\n    }\n    getB() {\n        return this.aIo;\n    }\n    uiUpdateB() {\n        this.emit(\"bPosChanged\", this.bPos);\n        return this;\n    }\n    disable(bool?: boolean): HardwareLine {\n        if (bool === false)\n            return this.enable();\n        if (this.disabled)\n            return this;\n        this.disabled = true;\n        const { aBox, bBox } = this;\n        if (this._patcher.getLinesByBox(this.aId, this.bId, this.aIo[1], this.bIo[1]).length > 1)\n            return this; // not last cable\n        aBox.disconnectedIo(this.aIo[1], this.bIo[1], bBox.id, this.id);\n        bBox.disconnectedIo(this.bIo[1], this.aIo[1], aBox.id, this.id);\n        return this;\n    }\n    enable(bool?: boolean): HardwareLine {\n        if (bool === false)\n            return this.disable();\n        if (!this.disabled)\n            return this;\n        const { aBox, bBox } = this;\n        if (this.aIo[1] >= aBox.ios.length || this.bIo[1] >= bBox.ios.length)\n            return this._patcher.deleteLine(this.id);\n        if (this._patcher.getLinesByBox(this.aId, this.bId, this.aIo[1], this.bIo[1]).length > 1)\n            return this; // not last cable\n        this.disabled = false;\n        aBox.connectedIo(this.aIo[1], this.bIo[1], bBox.id, this.id);\n        bBox.connectedIo(this.bIo[1], this.aIo[1], aBox.id, this.id);\n        return this;\n    }\n    destroy() {\n        this.bBox.off(\"metaUpdated\", this.updateType);\n        this.aBox.off(\"metaUpdated\", this.updateType);\n        this.disable();\n        this.aBox.removeIoLine(this, true);\n        this.bBox.removeIoLine(this, false);\n        delete this._patcher.lines[this.id];\n        return this;\n    }\n    pass(data: any) {\n        this.emit(\"passData\", data);\n        return this.disabled ? this : this.bBox.fn(this.bIo[1], data);\n    }\n    get positionHash() {\n        const { top, left } = this._patcher.boxes[this.bIo[0]].getIoPos(this.bIo[1]);\n        return left * 65536 + top;\n    }\n    get aPos() {\n        return this._patcher.boxes[this.aIo[0]].getIoPos(this.aIo[1]);\n    }\n    get bPos() {\n        return this._patcher.boxes[this.bIo[0]].getIoPos(this.bIo[1]);\n    }\n    get aId() {\n        return this.aIo[0];\n    }\n    // get srcOutlet() {\n    //     return this.src[1];\n    // }\n    get bId() {\n        return this.bIo[0];\n    }\n    // get destInlet() {\n    //     return this.bIo[1];\n    // }\n    get aBox() {\n        return this._patcher.boxes[this.aIo[0]];\n    }\n    get bBox() {\n        return this._patcher.boxes[this.bIo[0]];\n    }\n    private calcType() {\n        // const srcMeta = this.srcBox.object.meta.outlets;\n        // const destMeta = this.destBox.object.meta.inlets;\n        // let srcType: TMetaType = \"anything\";\n        // let destType: TMetaType = \"anything\";\n        // if (srcMeta[this.srcOutlet]) srcType = srcMeta[this.srcOutlet].type;\n        // else if (srcMeta[srcMeta.length - 1] && srcMeta[srcMeta.length - 1].varLength) srcType = srcMeta[srcMeta.length - 1].type;\n        // if (destMeta[this.destInlet]) destType = destMeta[this.destInlet].type;\n        // else if (destMeta[destMeta.length - 1] && destMeta[destMeta.length - 1].varLength) destType = destMeta[destMeta.length - 1].type;\n        // return srcType === \"signal\" && destType === \"signal\" ? \"audio\" : \"normal\";\n\n        // TODO -- complete this implementation\n        return \"analog\" as THardwareLineType;\n    }\n    updateType = () => {\n        const type = this.calcType();\n        if (type !== this._type) {\n            this._type = type;\n            this.emit(\"typeChanged\", type);\n        }\n    };\n    get type(): THardwareLineType {\n        return this._type;\n    }\n    toString() {\n        return JSON.stringify(this.toSerializable());\n    }\n    toSerializable(): THardwareLine {\n        const { id, aIo, bIo, disabled } = this;\n        return { id, aIo: [...aIo], bIo: [...bIo], disabled };\n    }\n}\n","import FileInstance from \"../file/FileInstance\";\nimport PatcherEditor from \"./HardwareEditor\";\nimport Line from \"./Line\";\nimport Box from \"./Box\";\nimport PatcherHistory from \"./HardwareHistory\";\nimport BaseHardwareObjects from \"./objects/base/BaseHardwareObjects\";\nimport PackageManager, { IPackageManager } from \"../PackageManager\";\n// import { max2js, js2max } from \"../../utils/utils\";\n// import { toFaustDspCode } from \"../patcher/FaustPatcherAnalyser\";\nimport type Env from \"../Env\";\nimport type Project from \"../Project\";\nimport type TempHardwareFile from \"./TempHardwareFile\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\nimport type {\n  IHardwarePatcherObjectMeta,\n  IPropsMeta,\n  IHardwarePatcherObject,\n  THardwareMetaType,\n  IPropMeta,\n  IArgsMeta,\n} from \"./objects/base/AbstractHardwareObject\";\nimport type { TErrorLevel, TFlatPackage, TPackage, ILogInfo, TDependencies } from \"../types\";\nimport type { RawHardwarePatcher } from \"./types\";\nimport type { THardwareBox, THardwareLine, PatcherMode } from \"./types\";\nimport type PatcherNode from \"../worklets/PatcherNode\";\nimport type PatcherProcessor from \"../worklets/Patcher.worklet\";\nimport { IInletMeta, IOutletMeta } from \"../objects/base/AbstractObject\";\nimport { SemanticICONS } from \"semantic-ui-react\";\n\nexport type THardwareSubpatcherInlet = {\n  boxId: string;\n  inlet: number;\n};\n\nexport type THardwareSubpatcherOutlet = {\n  boxId: string;\n  outlet: number;\n};\n\nexport interface TPatcherProps {\n  mode: PatcherMode;\n  dependencies: TDependencies;\n  bgColor: string;\n  editingBgColor: string;\n  grid: [number, number];\n  boxIndexCount: number;\n  lineIndexCount: number;\n  package?: string;\n  name?: string;\n  author?: string;\n  version?: string;\n  description?: string;\n  openInPresentation: boolean;\n  objectInit: boolean;\n  // inlets: THardwareSubpatcherInlet[],\n  // outlets: THardwareSubpatcherOutlet[],\n}\nexport type TPublicPatcherProps = Pick<\n  TPatcherProps,\n  \"dependencies\" | \"bgColor\" | \"editingBgColor\" | \"grid\" | \"openInPresentation\"\n>;\n\nexport interface TPatcherState {\n  name: string;\n  isReady: boolean;\n  log: ILogInfo[];\n  selected: string[];\n  pkgMgr: IPackageManager;\n  preventEmitChanged: boolean;\n  patcherNode?: PatcherNode;\n  patcherProcessor?: PatcherProcessor;\n}\n\nexport interface PatcherEventMap extends TPublicPatcherProps {\n  postInited: never;\n  ready: never;\n  unload: never;\n  changeBoxText: { boxId: string; oldText: string; text: string };\n  boxChanged: {\n    boxId: string;\n    oldArgs?: any[];\n    args?: any[];\n    oldProps?: Record<string, any>;\n    props?: Record<string, any>;\n    oldState?: Record<string, any>;\n    state?: Record<string, any>;\n    oldZIndex?: number;\n    zIndex?: number;\n  };\n  zIndexChanged: { boxId: string; zIndex: number };\n  passiveDeleteLine: Line;\n  graphChanged: never;\n  changed: never;\n  ioChanged: IHardwarePatcherMeta;\n  // \"dataInput\": TInletEvent<any[]>;\n  // \"dataOutput\": TOutletEvent<any[]>;\n  audioInput: { input: number; buffer: Float32Array };\n  paramInput: { param: string; buffer: Float32Array };\n  audioOutput: { output: number; buffer: Float32Array };\n  propsChanged: {\n    props: Partial<TPublicPatcherProps>;\n    oldProps: Partial<TPublicPatcherProps>;\n  };\n  libChanged: { pkg: TPackage; lib: TFlatPackage };\n  highlightBox: string;\n  highlightPort: { boxId: string; isSrc: boolean; i: number } | null;\n}\n\nexport interface IHardwarePatcherMeta<P extends Record<string, any> = Record<string, any>> {\n  name: string;\n  icon: SemanticICONS;\n  version: string;\n  description: string;\n  args: IArgsMeta;\n  props: IPropMeta<P>;\n  patcherInlets: Map<[string, number], IInletMeta>;\n  patcherOutlets: Map<[string, number], IOutletMeta>;\n}\n\nexport default class Patcher extends FileInstance<\n  PatcherEventMap,\n  PersistentProjectFile | TempHardwareFile\n> {\n  static props: IPropsMeta<TPublicPatcherProps> = {\n    dependencies: {\n      type: \"object\",\n      description: \"Patcher dependencies\",\n      default: [],\n    },\n    bgColor: {\n      type: \"color\",\n      description: \"Background color\",\n      default: \"rgba(61, 65, 70, 1)\",\n    },\n    editingBgColor: {\n      type: \"color\",\n      description: \"Background color while unlocked\",\n      default: \"rgba(82, 87, 94, 1)\",\n    },\n    grid: {\n      type: \"object\",\n      description: \"Grid size\",\n      default: [15, 15],\n    },\n    openInPresentation: {\n      type: \"boolean\",\n      description: \"Open patcher in presentation\",\n      default: false,\n    },\n  };\n  static async fromProjectItem(options: {\n    file: PersistentProjectFile | TempHardwareFile;\n    env: IJSPatcherEnv;\n    project?: IProject;\n    instanceId?: string;\n  }): Promise<Patcher> {\n    return new this(options).init();\n  }\n  async getEditor() {\n    const editor = new PatcherEditor(this);\n    return editor.init();\n  }\n  // lib: { [key: string]: typeof IHardwarePatcherObject } = {\n  //   ...BaseHardwareObjects,\n  //   ...SomObjects,\n  //   ...HardwareObjects,\n  // };\n  lines: Record<string, Line> = {};\n  boxes: Record<string, Box> = {};\n  props: TPatcherProps;\n  _state: TPatcherState;\n  _history = new PatcherHistory();\n  constructor(options: {\n    env: IJSPatcherEnv;\n    project?: IProject;\n    file?: PersistentProjectFile | TempHardwareFile;\n    instanceId?: string;\n    objectInit?: boolean;\n  }) {\n    super(options);\n    this._state = {\n      name: \"patcher\",\n      isReady: false,\n      log: [],\n      selected: [],\n      pkgMgr: undefined,\n      preventEmitChanged: false,\n    };\n    this.lines = {};\n    this.boxes = {};\n    this.props = {\n      mode: \"daisy\",\n      dependencies: Patcher.props.dependencies.default.slice(),\n      bgColor: Patcher.props.bgColor.default,\n      editingBgColor: Patcher.props.editingBgColor.default,\n      grid: Patcher.props.grid.default.slice() as [number, number],\n      openInPresentation: Patcher.props.openInPresentation.default,\n      boxIndexCount: 0,\n      lineIndexCount: 0,\n      objectInit: typeof options.objectInit === \"boolean\" ? options.objectInit : true,\n      // inlets: [],\n      // outlets: []\n    };\n  }\n  get state() {\n    return this._state;\n  }\n  get activePkg() {\n    return this._state.pkgMgr.pkg;\n  }\n  get activeLib() {\n    return this._state.pkgMgr.lib;\n  }\n  get isReady() {\n    return !!this._state?.isReady;\n  }\n  get audioCtx() {\n    return (this.project as Project)?.audioCtx || (this.env as Env).audioCtx;\n  }\n  get fileExtension() {\n    return {\n      daisy: \"daisy\",\n    }[this.props.mode];\n  }\n  get fileName() {\n    return this.file?.name || `${this._state.name}.${this.fileExtension}`;\n  }\n  emitGraphChanged() {\n    if (this._state.preventEmitChanged) return;\n    this.emit(\"graphChanged\");\n    this.emitChanged();\n  }\n  emitChanged() {\n    if (this._state.preventEmitChanged) return;\n    this.emit(\"changed\");\n  }\n  boxChanged(\n    boxId: string,\n    changed: {\n      oldArgs?: any[];\n      args?: any[];\n      oldProps?: Record<string, any>;\n      props?: Record<string, any>;\n      oldState?: Record<string, any>;\n      state?: Record<string, any>;\n    }\n  ) {\n    this.emit(\"boxChanged\", { boxId, ...changed });\n  }\n  async init(data = this.file?.data, fileName = this.fileName) {\n    if (data instanceof ArrayBuffer) {\n      if (!data.byteLength) return this.load({});\n      const patcherIn = await new Response(data).json();\n      const splitName = fileName.split(\".\");\n      const ext = splitName.pop();\n      const extMap: Record<string, PatcherMode> = { daisy: \"daisy\" };\n      return this.load(patcherIn, extMap[ext] || \"daisy\");\n    }\n    return this.load(data || {});\n  }\n  async load(patcherIn: RawHardwarePatcher | any, modeIn?: PatcherMode) {\n    this._state.isReady = false;\n    this._state.preventEmitChanged = true;\n    await this.unload();\n    if (typeof patcherIn !== \"object\") {\n      this._state.isReady = true;\n      this._state.preventEmitChanged = false;\n      this.emit(\"ready\");\n      return this;\n    }\n    await this.env.taskMgr.newTask(this, \"Loading patcher...\", async (onUpdate) => {\n      this.props.mode = patcherIn.props?.mode || modeIn || \"daisy\";\n      this.state.pkgMgr = new PackageManager(this);\n      const { mode } = this.props;\n      const $init: Promise<Box>[] = [];\n      onUpdate(\"Decoding Patcher...\");\n      let patcher;\n      // if (mode === \"max\" || mode === \"gen\") {\n      //     if (!(patcherIn as TMaxPatcher).patcher) {\n      //         patcher = patcherIn;\n      //     } else {\n      //         patcher = max2js(patcherIn as TMaxPatcher);\n      //     }\n      // } else if (mode === \"js\" || mode === \"faust\" || mode === \"jsaw\") {\n      if (\"data\" in patcherIn && \"daisy\" in patcherIn) {\n        patcher = patcherIn.patcher;\n      } else {\n        patcher = patcherIn;\n      }\n      // }\n      if (patcher.props) this.props = { ...this.props, ...patcher.props, mode };\n      if (Array.isArray(this.props.bgColor))\n        this.props.bgColor = `rgba(${this.props.bgColor.join(\", \")})`;\n      if (Array.isArray(this.props.editingBgColor))\n        this.props.editingBgColor = `rgba(${this.props.editingBgColor.join(\", \")})`;\n      if (mode === \"daisy\" && this.props.dependencies) {\n        const { dependencies } = this.props;\n        if (!Array.isArray(dependencies)) {\n          this.props.dependencies = [];\n          for (const key in dependencies as Record<string, string>) {\n            this.props.dependencies.push([key, dependencies[key]]);\n          }\n        }\n      }\n      onUpdate(\"Initializing Packages...\");\n      await this._state.pkgMgr.init();\n      onUpdate(\"Creating Boxes...\");\n      if (patcher.boxes) {\n        // Boxes & data\n        for (const id in patcher.boxes) {\n          onUpdate(`Creating Boxes ${id}`);\n          const $ = this.createBox(patcher.boxes[id]);\n          $init.push($);\n          const numID = parseInt(id.match(/\\d+/)[0]);\n          if (numID > this.props.boxIndexCount) this.props.boxIndexCount = numID;\n        }\n      }\n      onUpdate(\"Initializing Boxes...\");\n      await Promise.all($init);\n      onUpdate(\"Creating Lines...\");\n      if (patcher.lines) {\n        // Lines\n        for (const id in patcher.lines) {\n          this.createLine(patcher.lines[id]);\n          const numID = parseInt(id.match(/\\d+/)[0]);\n          if (numID > this.props.lineIndexCount) this.props.lineIndexCount = numID;\n        }\n      }\n      onUpdate(\"Finishing...\");\n      this._state.isReady = true;\n      this._state.preventEmitChanged = false;\n      this.emitGraphChanged();\n      this.emit(\"ready\");\n      await Promise.all(Object.keys(this.boxes).map((id) => this.boxes[id].postInit()));\n      this.emit(\"postInited\");\n    });\n    return this;\n  }\n  // async getPatcherNode(inputs = 2, outputs = 2) {\n  //     if (this.props.mode === \"jsaw\" && this.env.thread === \"main\") {\n  //         const PatcherNode = (await import(\"../worklets/PatcherNode\")).default;\n  //         await PatcherNode.register(this.audioCtx.audioWorklet);\n  //         this.state.patcherNode = new PatcherNode(this.audioCtx, { env: this.env, instanceId: this.id, fileId: this.file?.id, data: this.file ? undefined : this.toSerializable(), inputs, outputs });\n  //         await this.state.patcherNode.init();\n  //         return this.state.patcherNode;\n  //     }\n  //     return null;\n  // }\n  async loadFromURL(url: string) {\n    try {\n      const file = await fetch(url);\n      if (!file.ok) throw new Error();\n      const parsed = (await file.json()) as RawHardwarePatcher;\n      return this.load(parsed);\n    } catch (e) {\n      this.error(`Fetch file ${url} failed.`);\n    }\n    return this;\n  }\n  async loadFromString(sIn: string) {\n    try {\n      const parsed = JSON.parse(sIn) as RawHardwarePatcher;\n      return this.load(parsed);\n    } catch (e) {\n      this.error(`Load from string: ${sIn.slice(20)}... failed.`);\n    }\n    return this;\n  }\n  async loadFromFile(file: File) {\n    const splitName = file.name.split(\".\");\n    const ext = splitName.pop();\n    const name = splitName.join(\".\");\n    const extMap: Record<string, PatcherMode> = { daisy: \"daisy\" };\n    if (!extMap[ext]) return this;\n    const reader = new FileReader();\n    reader.onload = () => {\n      let parsed: RawHardwarePatcher;\n      try {\n        parsed = JSON.parse(reader.result.toString());\n      } catch (e) {\n        this.error((e as Error).message);\n      }\n      if (parsed) {\n        this.load(parsed, extMap[ext]);\n        this._state.name = name;\n      }\n    };\n    reader.onerror = () => this.error(reader.error.message);\n    reader.readAsText(file, \"UTF-8\");\n    return this;\n  }\n  async unload() {\n    await this.emit(\"unload\");\n    if (Object.keys(this.boxes).length) {\n      this._state.preventEmitChanged = true;\n      await Promise.all(Object.keys(this.boxes).map((id) => this.boxes[id].destroy()));\n      this._state.preventEmitChanged = false;\n      this.emitGraphChanged();\n    }\n    this.lines = {};\n    this.boxes = {};\n    this.props = {\n      mode: \"daisy\",\n      dependencies: Patcher.props.dependencies.default.slice(),\n      bgColor: Patcher.props.bgColor.default,\n      editingBgColor: Patcher.props.editingBgColor.default,\n      grid: Patcher.props.grid.default.slice() as [number, number],\n      openInPresentation: Patcher.props.openInPresentation.default,\n      boxIndexCount: 0,\n      lineIndexCount: 0,\n      objectInit: true,\n      // inlets: [],\n      // outlets: [],\n    };\n    this._state.selected = [];\n  }\n  async destroy() {\n    await this.unload();\n    await super.destroy();\n  }\n  async addPackage(namespace: string, url: string) {\n    const { dependencies } = this.props;\n    dependencies.push([namespace, url]);\n    this.setProps({ dependencies: dependencies.slice() });\n    await this.state.pkgMgr.init();\n    if (!(namespace in this.activePkg)) {\n      this.setProps({\n        dependencies: dependencies.filter(([id]) => id !== namespace),\n      });\n    }\n  }\n  async removePackage(id: string) {\n    const { dependencies } = this.props;\n    const i = dependencies.findIndex((t) => t[0] === id);\n    if (i === -1) return;\n    dependencies.splice(i, 1);\n    this.setProps({ dependencies: dependencies.slice() });\n    await this.state.pkgMgr.init();\n  }\n  async createBox(boxIn: THardwareBox) {\n    if (!boxIn.id || boxIn.id in this.boxes) boxIn.id = \"box-\" + ++this.props.boxIndexCount;\n    const box = new Box(this, boxIn);\n    this.boxes[box.id] = box;\n    await box.init();\n    this.emitGraphChanged();\n    this.changeIO();\n    return box;\n  }\n  getObjectConstructor(parsed: { class: string; args: any[]; props: Record<string, any> }) {\n    const className = parsed.class;\n    if (typeof className !== \"string\" || className.length === 0) return this.activeLib.EmptyObject;\n    if (this.activeLib[className]) return this.activeLib[className];\n    return this.activeLib.InvalidObject;\n  }\n  getObjectMeta(parsed: { class: string; args: any[]; props: Record<string, any> }) {\n    return this.getObjectConstructor(parsed).meta;\n  }\n  async changeBoxText(boxId: string, text: string) {\n    const oldText = this.boxes[boxId].text;\n    if (oldText === text) return this.boxes[boxId];\n    await this.boxes[boxId].changeText(text);\n    this.emit(\"changeBoxText\", { oldText, text, boxId });\n    this.emitGraphChanged();\n    return this.boxes[boxId];\n  }\n  async deleteBox(boxId: string) {\n    const box = this.boxes[boxId];\n    if (!box) return null;\n    await box.destroy();\n    this.emitGraphChanged();\n    this.changeIO();\n    return box;\n  }\n  createLine(lineIn: THardwareLine) {\n    if (!this.canCreateLine(lineIn)) return null;\n    if (!lineIn.id || lineIn.id in this.lines) lineIn.id = \"line-\" + ++this.props.lineIndexCount;\n    const line = new Line(this, lineIn);\n    this.lines[line.id] = line;\n    line.enable();\n    this.emitGraphChanged();\n    return line;\n  }\n  canCreateLine(lineIn: THardwareLine) {\n    if (lineIn.aIo[1] >= this.boxes[lineIn.aIo[0]].ios.length) return false;\n    if (this.getLinesByBox(lineIn.aIo[0], lineIn.bIo[0], lineIn.aIo[1], lineIn.bIo[1]).length > 0)\n      return false;\n    return true;\n  }\n  deleteLine(lineId: string) {\n    const line = this.lines[lineId];\n    if (!line) return null;\n    line.destroy();\n    if (!this._state.preventEmitChanged) this.emit(\"passiveDeleteLine\", line);\n    this.emitGraphChanged();\n    return line;\n  }\n\n  changeLineA(lineId: string, aId: string, aIo: number) {\n    const line = this.lines[lineId];\n    const oldA: [string, number] = [...line.aIo];\n    const newA: [string, number] = [aId, aIo];\n    line.setA(newA);\n    this.emitGraphChanged();\n    return { lineId, oldA, newA };\n  }\n\n  changeLineB(lineId: string, bId: string, bIo: number) {\n    const line = this.lines[lineId];\n    const oldB: [string, number] = [...line.bIo];\n    const newB: [string, number] = [bId, bIo];\n    line.setB(newB);\n    this.emitGraphChanged();\n    return { lineId, oldB, newB };\n  }\n\n  // changeLineSrc(lineId: string, srcId: string, srcOutlet: number) {\n  //     const line = this.lines[lineId];\n  //     // if (this.instance.getLinesByBox(srcId, line.destId, srcOutlet, line.destInlet).length > 0) return line;\n  //     const oldSrc: [string, number] = [line.srcId, line.srcOutlet];\n  //     const src: [string, number] = [srcId, srcOutlet];\n  //     line.setSrc(src);\n  //     this.emitGraphChanged();\n  //     return { lineId, oldSrc, src };\n  // }\n  // changeLineDest(lineId: string, destId: string, destOutlet: number) {\n  //     const line = this.lines[lineId];\n  //     // if (this.getLinesByBox(line.srcId, destId, line.destInlet, destOutlet).length > 0) return line;\n  //     const oldDest: [string, number] = [line.destId, line.destInlet];\n  //     const dest: [string, number] = [destId, destOutlet];\n  //     line.setDest(dest);\n  //     this.emitGraphChanged();\n  //     return { lineId, oldDest, dest };\n  // }\n  getLinesByAId(aId: string) {\n    const result = [];\n    for (let i = 0; i < this.boxes[aId].ios.length; i++) {\n      // Array.fill fills the array with same instance\n      result[i] = [];\n    }\n    for (const id in this.lines) {\n      const line = this.lines[id];\n      if (line && line.aId === aId) {\n        const bIo = line.bIo;\n        if (!result[bIo[1]]) result[bIo[1]] = [id];\n        else result[bIo[1]].push(id);\n      }\n    }\n    return result;\n  }\n  getLinesByBId(bId: string) {\n    const result = [];\n    for (let i = 0; i < this.boxes[bId].ios.length; i++) {\n      // Array.fill fills the array with same instance\n      result[i] = [];\n    }\n    for (const id in this.lines) {\n      const line = this.lines[id];\n      if (line && line.bId === bId) {\n        const aIo = line.aIo;\n        if (!result[aIo[1]]) result[aIo[1]] = [id];\n        else result[aIo[1]].push(id);\n      }\n    }\n    return result;\n  }\n  // getLinesBySrcID(srcId: string) {\n  //     const result = [];\n  //     for (let i = 0; i < this.boxes[srcId].outlets; i++) { // Array.fill fills the array with same instance\n  //         result[i] = [];\n  //     }\n  //     for (const id in this.lines) {\n  //         const line = this.lines[id];\n  //         if (line && line.srcId === srcId) {\n  //             const srcOutlet = line.srcOutlet;\n  //             if (!result[srcOutlet]) result[srcOutlet] = [id];\n  //             else result[srcOutlet].push(id);\n  //         }\n  //     }\n  //     return result;\n  // }\n  // getLinesByDestID(destId: string) {\n  //     const result = [];\n  //     for (let i = 0; i < this.boxes[destId].inlets; i++) {\n  //         result[i] = [];\n  //     }\n  //     for (const id in this.lines) {\n  //         const line = this.lines[id];\n  //         if (line && line.destId === destId) {\n  //             const destInlet = line.destInlet;\n  //             if (!result[destInlet]) result[destInlet] = [id];\n  //             else result[destInlet].push(id);\n  //         }\n  //     }\n  //     return result;\n  // }\n  getLinesByBox(aId: string, bId: string, aIo?: number, bIo?: number) {\n    const result: string[] = [];\n    let aIds: string[] = [];\n    let bIds: string[] = [];\n    const aIosWrapped = this.getLinesByAId(aId);\n    if (aIo !== undefined) aIds = aIosWrapped[aIo];\n    else aIosWrapped.forEach((el) => (aIds = aIds.concat(el)));\n\n    const bIosWrapped = this.getLinesByBId(bId);\n    if (bIo !== undefined) bIds = bIosWrapped[bIo];\n    else bIosWrapped.forEach((el) => (bIds = bIds.concat(el)));\n\n    if (!aIds || !bIds) return result;\n\n    bIds.forEach((idOut) =>\n      bIds.forEach((idIn) => (idIn === idOut ? result.push(idIn) : undefined))\n    );\n    return result;\n  }\n  // getLinesByIo(boxId: string, io: number) {\n  //     const box = this.boxes[boxId];\n  //     if (!box || io > box.ios.length) {\n  //         return [];\n  //     }\n\n  //     const lines = [];\n\n  //     if (box.text.startsWith(\"tie\")) {\n  //         for (let key in this.lines) {\n  //             let line = this.lines[key];\n  //             if (line.aId === boxId || line.bId === boxId) {\n  //                 lines.push(line);\n  //             }\n  //         }\n  //     } else {\n  //         for (let key in this.lines) {\n  //             let line = this.lines[key];\n  //             if ((line.aId === boxId && line.aIo[1] === io) || (line.bId === boxId && line.bIo[1] === io)) {\n  //                 lines.push(line);\n  //             }\n  //         }\n  //     }\n  //     return lines;\n  // }\n  // getConnectedPins(boxId: string, io: number) {\n  //     let lines = this.getLinesByIo(boxId, io);\n\n  //     let all_boxes = lines.flatMap(line => [line.aIo, line.bIo]);\n  //     let unique_boxes = Array.from(new Set(all_boxes));\n\n  //     return unique_boxes.map(([id, io]) => this.boxes[id].meta.ios[io].pin);\n  // }\n  fn(data: any, inlet: number) {\n    // this.emit(\"dataInput\", { data, inlet });\n  }\n  inputAudio(input: number, buffer: Float32Array) {\n    this.emitSync(\"audioInput\", { input, buffer });\n  }\n  inputParam(param: string, buffer: Float32Array) {\n    this.emitSync(\"paramInput\", { param, buffer });\n  }\n  outputAudio(output: number, buffer: Float32Array) {\n    this.emitSync(\"audioOutput\", { output, buffer });\n  }\n  // outlet(outlet: number, data: any) {\n  //     this.emit(\"dataOutput\", { data, outlet });\n  // }\n  changeIO() {\n    this.emit(\"ioChanged\", this.meta);\n  }\n  get meta(): IHardwarePatcherMeta {\n    const { metaFromPatcher } = this;\n    return {\n      name: this.props.name || \"\",\n      icon: null,\n      version: this.props.version || \"\",\n      description: this.props.description || \"\",\n      ...metaFromPatcher,\n    };\n  }\n  get metaFromPatcher(): Pick<\n    IHardwarePatcherMeta,\n    \"args\" | \"props\" | \"patcherInlets\" | \"patcherOutlets\"\n  > {\n    const inlets: Map<[string, number], IInletMeta> = new Map();\n    const outlets: Map<[string, number], IOutletMeta> = new Map();\n    for (const boxId in this.boxes) {\n      const box = this.boxes[boxId];\n\n      if (box.meta.patcherInlets) {\n        for (const [index, inlet] of box.meta.patcherInlets.entries()) {\n          inlets.set([boxId, index], inlet);\n        }\n      }\n\n      if (box.meta.patcherOutlets) {\n        for (const [index, outlet] of box.meta.patcherOutlets.entries()) {\n          outlets.set([boxId, index], outlet);\n        }\n      }\n    }\n    // console.log(`inlets: ${JSON.stringify(Array.from(inlets.entries()))}, outlets: ${JSON.stringify(Array.from(outlets.entries()))}`);\n    return {\n      args: [],\n      props: {},\n      patcherInlets: inlets,\n      patcherOutlets: outlets,\n    };\n  }\n  log(message: string) {\n    this.newLog(\"none\", \"Patcher\", message, this);\n  }\n  error(message: string) {\n    this.newLog(\"error\", \"Patcher\", message, this);\n  }\n  newLog(errorLevel: TErrorLevel, title: string, message: string, emitter?: any) {\n    this.env.newLog(errorLevel, title, message, emitter);\n  }\n  setProps(props: Partial<TPublicPatcherProps>) {\n    let changed = false;\n    const oldProps: Partial<TPublicPatcherProps> = {};\n    for (const keyIn in props) {\n      const key = keyIn as keyof TPublicPatcherProps;\n      if (this.props[key] === props[key]) continue;\n      changed = true;\n      (oldProps as any)[key] = this.props[key];\n      (this.props as any)[key] = props[key];\n      this.emit(key, props[key]);\n    }\n    if (changed) {\n      this.emit(\"propsChanged\", { props, oldProps });\n      this.emitChanged();\n    }\n  }\n  get publicProps() {\n    const { dependencies, bgColor, editingBgColor, grid, openInPresentation } = this.props;\n    return {\n      dependencies,\n      bgColor,\n      editingBgColor,\n      grid,\n      openInPresentation,\n    } as TPublicPatcherProps;\n  }\n  toString(spacing?: number) {\n    const { props, meta } = this;\n    const boxes: RawHardwarePatcher[\"boxes\"] = {};\n    const lines: RawHardwarePatcher[\"lines\"] = {};\n\n    const inlets = Array.from(meta.patcherInlets.entries()).map(([key, _]) => key);\n    const outlets = Array.from(meta.patcherOutlets.entries()).map(([key, _]) => key);\n\n    for (const id in this.boxes) {\n      boxes[id] = this.boxes[id].toSerializable();\n    }\n    for (const id in this.lines) {\n      lines[id] = this.lines[id].toSerializable();\n    }\n    return JSON.stringify({ boxes, lines, props, inlets, outlets }, undefined, spacing);\n  }\n  toSerializable(): RawHardwarePatcher {\n    return JSON.parse(this.toString());\n  }\n  serialize() {\n    return new Blob([this.toString()]).arrayBuffer();\n  }\n}\n"],"names":["io"],"sourceRoot":""}