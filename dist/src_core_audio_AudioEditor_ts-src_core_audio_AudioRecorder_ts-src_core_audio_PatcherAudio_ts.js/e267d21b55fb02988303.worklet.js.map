{"version":3,"file":"src_core_audio_AudioEditor_ts-src_core_audio_AudioRecorder_ts-src_core_audio_PatcherAudio_ts.js/e267d21b55fb02988303.worklet.js","mappings":"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","sources":["webpack://JSPatcher/./src/core/audio/AudioEditor.ts","webpack://JSPatcher/./src/core/audio/AudioHistory.ts","webpack://JSPatcher/./src/core/audio/AudioPlayer.ts","webpack://JSPatcher/./src/core/audio/AudioRecorder.ts","webpack://JSPatcher/./src/core/audio/OperableAudioBuffer.ts","webpack://JSPatcher/./src/core/audio/PatcherAudio.ts","webpack://JSPatcher/./src/core/worklets/AudioWorkletProxyNode.ts","webpack://JSPatcher/./src/core/worklets/AudioWorkletRegister.ts","webpack://JSPatcher/./src/core/worklets/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/worklets/Transmitter.ts","webpack://JSPatcher/./src/utils/Waveform.ts","webpack://JSPatcher/./src/utils/math.ts","webpack://JSPatcher/./src/core/worklets/TemporalAnalyser.worklet.ts","webpack://JSPatcher/./src/core/worklets/Transmitter.worklet.ts"],"sourcesContent":["import type { SemanticICONS } from \"semantic-ui-react\";\nimport type { WebAudioModule } from \"wamsdk/src/api\";\nimport { dbtoa } from \"../../utils/math\";\nimport AudioPlayer from \"./AudioPlayer\";\nimport AudioRecorder from \"./AudioRecorder\";\nimport FileEditor from \"../file/FileEditor\";\nimport TempAudioFile from \"./TempAudioFile\";\nimport type PatcherAudio from \"./PatcherAudio\";\nimport type { TAudioPlayingState } from \"../types\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type Env from \"../Env\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type { IProject } from \"../Project\";\n\nexport interface AudioEditorEventMap {\n    \"pasted\": { range?: [number, number]; cursor?: number; audio: PatcherAudio; oldAudio?: PatcherAudio };\n    \"cutEnd\": { range: [number, number]; oldAudio: PatcherAudio };\n    \"deleted\": { range: [number, number]; oldAudio: PatcherAudio };\n    \"silenced\": { range: [number, number]; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"insertedSilence\": { range: [number, number]; audio: PatcherAudio };\n    \"inversed\": { range: [number, number]; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"reversed\": { range: [number, number]; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"faded\": { gain: number; range: [number, number]; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"fadedIn\": { length: number; exponent: number; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"fadedOut\": { length: number; exponent: number; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"recorded\": { range?: [number, number]; cursor?: number; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"resampled\": { audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"remixed\": { audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"viewRange\": [number, number];\n    \"selRange\": [number, number];\n    \"selRangeToPlay\": [number, number] | null;\n    \"cursor\": number;\n    \"enabledChannels\": boolean[];\n    \"playing\": TAudioPlayingState;\n    \"monitoring\": boolean;\n    \"loop\": boolean;\n    \"recording\": boolean;\n    \"pluginsChanged\": { plugins: WebAudioModule[]; pluginsEnabled: boolean[]; pluginsShowing: boolean[] };\n    \"pluginsApplied\": { range?: [number, number]; audio: PatcherAudio; oldAudio: PatcherAudio };\n    \"uiResized\": never;\n    \"setAudio\": never;\n    \"ready\": never;\n}\n\nexport interface AudioHistoryEventMap extends Pick<AudioEditorEventMap, \"faded\" | \"fadedIn\" | \"fadedOut\" | \"cutEnd\" | \"pasted\" | \"deleted\" | \"silenced\" | \"insertedSilence\" | \"reversed\" | \"inversed\" | \"resampled\" | \"remixed\" | \"recorded\"> {}\n\nexport interface AudioEditorState {\n    playing: TAudioPlayingState;\n    monitoring: boolean;\n    recording: boolean;\n    loop: boolean;\n    cursor: number;\n    selRange: [number, number];\n    viewRange: [number, number];\n    enabledChannels: boolean[];\n    plugins: WebAudioModule[];\n    pluginsEnabled: WeakSet<WebAudioModule>;\n    pluginsShowing: WeakSet<WebAudioModule>;\n    preFxGain: number;\n    postFxGain: number;\n}\n\nexport default class AudioEditor extends FileEditor<PatcherAudio, AudioEditorEventMap> {\n    static async fromProjectItem({ file, env, project, instanceId }: { file: PersistentProjectFile | TempAudioFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }) {\n        const audio = file instanceof TempAudioFile ? file.data : await file.instantiate({ env, project, instanceId }) as PatcherAudio;\n        const editor = new this(audio);\n        return editor.init();\n    }\n    readonly audio: PatcherAudio;\n    readonly player = new AudioPlayer(this);\n    readonly recorder = new AudioRecorder(this);\n    readonly state: AudioEditorState = {\n        playing: \"stopped\",\n        monitoring: false,\n        loop: true,\n        recording: false,\n        cursor: 0,\n        selRange: null,\n        viewRange: [0, 0],\n        enabledChannels: [],\n        plugins: new Array(10).fill(undefined),\n        pluginsEnabled: new WeakSet(),\n        pluginsShowing: new WeakSet(),\n        preFxGain: 0,\n        postFxGain: 0\n    };\n    get fileExtension() {\n        return \"wav\";\n    }\n    get fileIcon(): SemanticICONS {\n        return \"music\";\n    }\n    get clipboard() {\n        return (this.env as Env).audioClipboard;\n    }\n    set clipboard(audio: PatcherAudio) {\n        (this.env as Env).audioClipboard = audio;\n    }\n    get ctx() {\n        return this.instance.ctx;\n    }\n    get audioCtx() {\n        return this.instance.audioCtx;\n    }\n    get length() {\n        return this.instance.length;\n    }\n    get numberOfChannels() {\n        return this.instance.numberOfChannels;\n    }\n    get sampleRate() {\n        return this.instance.sampleRate;\n    }\n    get audioBuffer() {\n        return this.instance.audioBuffer;\n    }\n    get waveform() {\n        return this.instance.waveform;\n    }\n\n    handleSetAudio = () => {\n        const { cursor, selRange, viewRange } = this.state;\n        const { length, numberOfChannels } = this;\n        if (cursor > length) this.setCursor(length);\n        if (selRange && selRange[1] > length) this.setSelRange(selRange);\n        if (viewRange[1] > length) this.setViewRange(viewRange);\n        if (this.state.enabledChannels.length !== numberOfChannels) {\n            const enabledChannels = new Array(numberOfChannels).fill(true);\n            this.state.enabledChannels.slice(numberOfChannels).forEach((v, i) => enabledChannels[i] = v);\n            this.setState({ enabledChannels });\n            this.emit(\"enabledChannels\", enabledChannels);\n        }\n        this.emit(\"setAudio\");\n    };\n    handlePlayerEnded = (cursor: number) => {\n        const playing: TAudioPlayingState = \"stopped\";\n        this.setState({ playing });\n        this.emit(\"playing\", playing);\n        this.setCursor(cursor);\n    };\n    handleInputChanged = async (deviceId?: string) => {\n        await this.recorder.newSearch(deviceId);\n        if (this.state.monitoring) this.player.startMonitoring();\n    };\n    async init() {\n        if (!this.instance.isReady) {\n            await new Promise<void>((resolve, reject) => {\n                const handleReady = () => {\n                    resolve();\n                    this.instance.off(\"ready\", handleReady);\n                };\n                this.instance.on(\"ready\", handleReady);\n            });\n        }\n        this.setState({\n            viewRange: [0, this.length],\n            enabledChannels: new Array(this.numberOfChannels).fill(true)\n        });\n        this.instance.on(\"setAudio\", this.handleSetAudio);\n        this.on(\"changed\", () => this.instance.emit(\"changed\"));\n        await this.env.taskMgr.newTask(this, \"Initializing Audio Editor...\", async () => {\n            await this.player.init();\n            await this.recorder.init();\n        });\n        this._isReady = true;\n        this.emit(\"ready\");\n        return this;\n    }\n    setState(state: Partial<AudioEditorState>) {\n        Object.assign(this.state, state);\n    }\n    onUiResized() {\n        this.emit(\"uiResized\");\n    }\n    emitPluginsChanged() {\n        const { plugins, pluginsEnabled, pluginsShowing } = this.state;\n        this.emit(\"pluginsChanged\", { plugins: plugins.slice(), pluginsEnabled: plugins.map(p => pluginsEnabled.has(p)), pluginsShowing: plugins.map(p => pluginsShowing.has(p)) });\n    }\n    emitUIResized() {\n        this.emit(\"uiResized\");\n    }\n    emitSelRangeToPlay() {\n        this.emit(\"selRangeToPlay\", this.state.selRange);\n    }\n    zoomH(refIn: number, factor: number) { // factor = 1 as zoomIn, -1 as zoomOut\n        const { viewRange } = this.state;\n        const { length } = this;\n        const [viewStart, viewEnd] = viewRange;\n        const viewLength = viewEnd - viewStart;\n        const minRange = Math.min(length, 5);\n        const ref = Math.max(0, Math.min(length, Math.round(refIn)));\n        if (ref < viewStart || ref > viewEnd) {\n            const start = Math.max(0, Math.min(length - viewLength, Math.round(ref - viewLength / 2)));\n            const end = Math.max(viewLength, Math.min(length, Math.round(ref + viewLength / 2)));\n            const range: [number, number] = [start, end];\n            this.setState({ viewRange: range });\n            this.emit(\"viewRange\", range);\n        } else if (factor < 0 || viewLength > minRange) {\n            const multiplier = 1.5 ** -factor;\n            const start = ref - (ref - viewStart) * multiplier;\n            const end = ref + (viewEnd - ref) * multiplier;\n            this.setViewRange([start, end]);\n        }\n    }\n    scrollH(speed: number) { // spped = 1 as one full viewRange\n        const { viewRange } = this.state;\n        const { length } = this;\n        const [viewStart, viewEnd] = viewRange;\n        const viewLength = viewEnd - viewStart;\n        const deltaSamples = viewLength * speed;\n        const start = Math.min(length - viewLength, viewStart + deltaSamples);\n        const end = Math.max(viewLength, viewEnd + deltaSamples);\n        this.setViewRange([start, end]);\n    }\n    setEnabledChannel(channel: number, enabled: boolean) {\n        const enabledChannels = this.state.enabledChannels.slice();\n        enabledChannels[channel] = enabled;\n        this.setState({ enabledChannels });\n        this.emit(\"enabledChannels\", enabledChannels);\n    }\n    setLoop(loop: boolean) {\n        this.setState({ loop });\n        this.emit(\"loop\", loop);\n    }\n    setRecording(recording: boolean) {\n        this.setState({ recording });\n        this.emit(\"recording\", recording);\n    }\n    setCursor(cursorIn: number, fromPlayer?: boolean) {\n        const shouldReplay = !fromPlayer && this.state.playing === \"playing\";\n        if (shouldReplay) this.stop();\n        const { length } = this;\n        const cursor = Math.max(0, Math.min(length, Math.round(cursorIn)));\n        this.setState({ cursor });\n        this.emit(\"cursor\", cursor);\n        if (shouldReplay) this.play();\n    }\n    setSelRange(range: [number, number]) {\n        if (!range) {\n            this.setState({ selRange: null });\n            this.emit(\"selRange\", null);\n            return;\n        }\n        const { length } = this;\n        let [start, end] = range;\n        if (end < start) [start, end] = [end, start];\n        start = Math.max(0, Math.min(length - 1, Math.round(start)));\n        end = Math.max(1, Math.min(length, Math.round(end)));\n        if (start === end) {\n            this.setState({ selRange: null });\n            this.emit(\"selRange\", null);\n            return;\n        }\n        const selRange: [number, number] = [start, end];\n        this.setState({ selRange, cursor: start });\n        this.emit(\"selRange\", selRange);\n        this.emit(\"cursor\", start);\n    }\n    setSelRangeToAll() {\n        const { length } = this;\n        const selRange: [number, number] = [0, length];\n        this.setState({ selRange });\n        this.emit(\"selRange\", selRange);\n        this.emitSelRangeToPlay();\n    }\n    async selectAll() {\n        this.setSelRangeToAll();\n    }\n    async deleteSelected() {\n        this.delete();\n    }\n    setViewRange(range: [number, number]) {\n        const { length } = this;\n        let [start, end] = range;\n        if (end < start) [start, end] = [end, start];\n        const minRange = Math.min(length, 5);\n        start = Math.max(0, Math.min(length - minRange, Math.round(start)));\n        end = Math.max(minRange, Math.min(length, Math.round(end)));\n        const viewRange: [number, number] = [start, end];\n        this.setState({ viewRange });\n        this.emit(\"viewRange\", viewRange);\n    }\n    setViewRangeToAll() {\n        const { length } = this;\n        const viewRange: [number, number] = [0, length];\n        this.setState({ viewRange });\n        this.emit(\"viewRange\", viewRange);\n    }\n\n    async cut() {\n        const { selRange } = this.state;\n        if (!selRange) return;\n        const [selStart, selEnd] = selRange;\n        this.setSelRange(null);\n        this.clipboard = await this.instance.removeFromRange(selStart, selEnd);\n        const oldAudio = this.clipboard;\n        this.emit(\"cutEnd\", { range: [selStart, selEnd], oldAudio });\n    }\n    async copy() {\n        const { selRange } = this.state;\n        if (!selRange) return;\n        const [selStart, selEnd] = selRange;\n        this.clipboard = await this.instance.pick(selStart, selEnd, true);\n    }\n    async paste() {\n        const { clipboard } = this;\n        if (!clipboard) return;\n        const { cursor, selRange } = this.state;\n        if (selRange) {\n            const [selStart, selEnd] = selRange;\n            const oldAudio = await this.instance.pasteToRange(clipboard, selStart, selEnd);\n            this.emit(\"pasted\", { range: [selStart, selEnd], audio: clipboard, oldAudio });\n        } else {\n            this.instance.insertToCursor(clipboard, cursor);\n            this.emit(\"pasted\", { cursor, audio: clipboard });\n        }\n    }\n    async delete() {\n        const { selRange } = this.state;\n        if (!selRange) return;\n        const [selStart, selEnd] = selRange;\n        this.setSelRange(null);\n        const oldAudio = await this.instance.removeFromRange(selStart, selEnd);\n        this.emit(\"deleted\", { range: [selStart, selEnd], oldAudio });\n    }\n    async silence() {\n        const { selRange } = this.state;\n        if (!selRange) return;\n        const silenced = await this.instance.silence(selRange);\n        if (silenced) this.emit(\"silenced\", silenced);\n    }\n    async insertSilence(length: number) {\n        if (!length) return;\n        const { cursor } = this.state;\n        const inserted = await this.instance.insertSilence(length, cursor);\n        if (inserted) this.emit(\"insertedSilence\", inserted);\n    }\n    async reverse() {\n        const { selRange } = this.state;\n        const [selStart, selEnd] = selRange || [0, this.length];\n        const audio = await this.instance.pick(selStart, selEnd, true);\n        audio.reverse();\n        const oldAudio = await this.instance.pasteToRange(audio, selStart, selEnd);\n        this.emit(\"reversed\", { range: [0, this.length], audio, oldAudio });\n    }\n    async inverse() {\n        const { selRange } = this.state;\n        const [selStart, selEnd] = selRange || [0, this.length];\n        const audio = await this.instance.pick(selStart, selEnd, true);\n        audio.inverse();\n        const oldAudio = await this.instance.pasteToRange(audio, selStart, selEnd);\n        this.emit(\"inversed\", { range: [selStart, selEnd], audio, oldAudio });\n    }\n    async fade(gain: number) {\n        const { selRange, enabledChannels } = this.state;\n        if (!selRange) return;\n        const faded = await this.instance.fade(gain, ...selRange, enabledChannels);\n        if (faded) this.emit(\"faded\", faded);\n    }\n    async fadeIn(length: number, exponent: number) {\n        const { enabledChannels } = this.state;\n        const faded = await this.instance.fadeIn(length, exponent, enabledChannels);\n        if (faded) this.emit(\"fadedIn\", faded);\n    }\n    async fadeOut(length: number, exponent: number) {\n        const { enabledChannels } = this.state;\n        const faded = await this.instance.fadeOut(length, exponent, enabledChannels);\n        if (faded) this.emit(\"fadedOut\", faded);\n    }\n    async resample(to: number) {\n        if (to <= 0) return;\n        const oldAudio = await this.instance.clone();\n        if (oldAudio.sampleRate === to) return;\n        const audio = await this.instance.render(to);\n        this.instance.setAudio(audio);\n        this.emit(\"resampled\", { audio, oldAudio });\n    }\n    async remixChannels(mix: number[][]) {\n        const oldAudio = await this.instance.clone();\n        const audio = await this.instance.render(undefined, mix);\n        this.instance.setAudio(audio);\n        this.emit(\"remixed\", { audio, oldAudio });\n    }\n    async applyPlugins(selected?: boolean) {\n        const { selRange, plugins, pluginsEnabled, preFxGain, postFxGain } = this.state;\n        if (plugins.every(p => !p || !pluginsEnabled.has(p))) return;\n        if (selected && !selRange) return;\n        const oldAudio = selected ? await this.instance.pick(...selRange) : await this.instance.clone();\n        const audio = await oldAudio.render(undefined, undefined, true, { plugins, pluginsEnabled, preFxGain, postFxGain });\n        if (selected) await this.instance.pasteToRange(audio, ...selRange);\n        else this.instance.setAudio(audio);\n        plugins.forEach((p, i) => {\n            if (!p) return;\n            this.setPluginEnabled(i, false);\n        });\n        this.emit(\"pluginsApplied\", { ...(selected ? { range: selRange } : {}), audio, oldAudio });\n    }\n\n    play() {\n        const playing: TAudioPlayingState = \"playing\";\n        this.setState({ playing });\n        this.emit(\"playing\", playing);\n        this.player.play();\n    }\n    pause() {\n        const playing: TAudioPlayingState = \"paused\";\n        this.setState({ playing });\n        this.emit(\"playing\", playing);\n        this.player.stop();\n    }\n    resume() {\n        const playing: TAudioPlayingState = \"playing\";\n        this.setState({ playing });\n        this.emit(\"playing\", playing);\n        this.player.play();\n    }\n    stop() {\n        const playing: TAudioPlayingState = \"stopped\";\n        this.setState({ playing });\n        this.emit(\"playing\", playing);\n        this.player.stop();\n    }\n    startMonitoring() {\n        const monitoring = true;\n        this.setState({ monitoring });\n        this.emit(\"monitoring\", monitoring);\n        this.player.startMonitoring();\n    }\n    stopMonitoring() {\n        const monitoring = false;\n        this.setState({ monitoring });\n        this.emit(\"monitoring\", monitoring);\n        this.player.stopMonitoring();\n    }\n    async startRecord() {\n        this.stop();\n        const started = await this.recorder.start();\n        if (!started) return;\n        this.setState({ recording: true });\n        this.emit(\"recording\", true);\n    }\n    async stopRecord() {\n        await this.recorder.stop();\n        this.setState({ recording: false });\n        this.emit(\"recording\", false);\n    }\n    async addPlugin(url: string, index: number) {\n        this.env.taskMgr.newTask(this, \"Adding Plugin...\", () => this.player.addPlugin(url, index));\n    }\n    removePlugin(index: number) {\n        this.player.removePlugin(index);\n    }\n    movePlugin(fromIndex: number, toIndex: number) {\n        this.player.movePlugin(fromIndex, toIndex);\n    }\n    setPluginEnabled(index: number, enabled: boolean) {\n        this.player.setPluginEnabled(index, enabled);\n    }\n    setPluginShowing(index: number, showing: boolean) {\n        const { plugins, pluginsShowing } = this.state;\n        const plugin = plugins[index];\n        if (!plugin) return;\n        if (showing) pluginsShowing.add(plugin);\n        else pluginsShowing.delete(plugin);\n        this.emitPluginsChanged();\n    }\n    setPreFxGain(gain: number) {\n        this.state.preFxGain = gain;\n        const { playing, monitoring } = this.state;\n        if (monitoring || playing === \"playing\") this.player.preFxGainNode.gain.setTargetAtTime(dbtoa(gain), (this.env as Env).audioCtx.currentTime, 0.01);\n    }\n    setPostFxGain(gain: number) {\n        this.state.postFxGain = gain;\n        const { playing, monitoring } = this.state;\n        if (monitoring || playing === \"playing\") this.player.postFxGainNode.gain.setTargetAtTime(dbtoa(gain), (this.env as Env).audioCtx.currentTime, 0.01);\n    }\n\n    async destroy() {\n        this._isReady = false;\n        this.instance.off(\"setAudio\", this.handleSetAudio);\n        if (this.state.recording) await this.stopRecord();\n        if (this.state.playing !== \"stopped\") this.stop();\n        for (let i = 0; i < this.state.plugins.length; i++) {\n            this.removePlugin(i);\n        }\n        await this.recorder.destroy();\n        await this.player.destroy();\n        await super.destroy();\n    }\n}\n","import History from \"../file/History\";\nimport AudioEditor, { AudioHistoryEventMap } from \"./AudioEditor\";\n\nexport default class AudioHistory extends History<AudioHistoryEventMap, AudioEditor> {\n    get eventListening(): (keyof AudioHistoryEventMap)[] {\n        return [\"faded\", \"fadedIn\", \"fadedOut\", \"cutEnd\", \"pasted\", \"deleted\", \"silenced\", \"insertedSilence\", \"reversed\", \"inversed\", \"resampled\", \"remixed\", \"recorded\"];\n    }\n    async undoOf(editor: AudioEditor, eventName: keyof AudioHistoryEventMap, eventData?: any) {\n        if (eventName === \"faded\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [selStart, selEnd], oldAudio } = e;\n            await editor.instance.pasteToRange(oldAudio, selStart, selEnd);\n        } else if (eventName === \"fadedIn\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { length, oldAudio } = e;\n            await editor.instance.pasteToRange(oldAudio, 0, length);\n        } else if (eventName === \"fadedOut\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { length, oldAudio } = e;\n            const l = editor.instance.audioBuffer.length;\n            await editor.instance.pasteToRange(oldAudio, l - length, l);\n        } else if (eventName === \"cutEnd\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [cursor], oldAudio } = e;\n            await editor.instance.insertToCursor(oldAudio, cursor);\n        } else if (eventName === \"pasted\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range, cursor, audio, oldAudio } = e;\n            if (range) {\n                await editor.instance.pasteToRange(oldAudio, range[0], range[0] + audio.length);\n            } else {\n                await editor.instance.removeFromRange(cursor, cursor + audio.length);\n            }\n        } else if (eventName === \"deleted\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [cursor], oldAudio } = e;\n            await editor.instance.insertToCursor(oldAudio, cursor);\n        } else if (eventName === \"silenced\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to], oldAudio } = e;\n            await editor.instance.pasteToRange(oldAudio, from, to);\n        } else if (eventName === \"insertedSilence\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to] } = e;\n            await editor.instance.removeFromRange(from, to);\n        } else if (eventName === \"reversed\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to], oldAudio } = e;\n            await editor.instance.pasteToRange(oldAudio, from, to);\n        } else if (eventName === \"inversed\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to], oldAudio } = e;\n            await editor.instance.pasteToRange(oldAudio, from, to);\n        } else if (eventName === \"resampled\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { oldAudio } = e;\n            editor.instance.setAudio(oldAudio);\n        } else if (eventName === \"remixed\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { oldAudio } = e;\n            editor.instance.setAudio(oldAudio);\n        } else if (eventName === \"recorded\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range, cursor, audio, oldAudio } = e;\n            if (range) {\n                await editor.instance.pasteToRange(oldAudio, range[0], range[0] + audio.length);\n            } else {\n                await editor.instance.removeFromRange(cursor, cursor + audio.length);\n            }\n        }\n    }\n    async redoOf(editor: AudioEditor, eventName: keyof AudioHistoryEventMap, eventData?: any) {\n        if (eventName === \"faded\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [selStart, selEnd], audio } = e;\n            await editor.instance.pasteToRange(audio, selStart, selEnd);\n        } else if (eventName === \"fadedIn\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { length, audio } = e;\n            await editor.instance.pasteToRange(audio, 0, length);\n        } else if (eventName === \"fadedOut\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { length, audio } = e;\n            const l = audio.length;\n            await editor.instance.pasteToRange(audio, l - length, l);\n        } else if (eventName === \"cutEnd\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [selStart, selEnd] } = e;\n            await editor.instance.removeFromRange(selStart, selEnd);\n        } else if (eventName === \"pasted\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range, cursor, audio, oldAudio } = e;\n            if (range) {\n                await editor.instance.pasteToRange(audio, range[0], range[0] + oldAudio.length);\n            } else {\n                await editor.instance.insertToCursor(audio, cursor);\n            }\n        } else if (eventName === \"deleted\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [selStart, selEnd] } = e;\n            await editor.instance.removeFromRange(selStart, selEnd);\n        } else if (eventName === \"silenced\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to], audio } = e;\n            await editor.instance.pasteToRange(audio, from, to);\n        } else if (eventName === \"insertedSilence\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [cursor], audio } = e;\n            await editor.instance.insertToCursor(audio, cursor);\n        } else if (eventName === \"reversed\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to], audio } = e;\n            await editor.instance.pasteToRange(audio, from, to);\n        } else if (eventName === \"inversed\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range: [from, to], audio } = e;\n            await editor.instance.pasteToRange(audio, from, to);\n        } else if (eventName === \"resampled\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { audio } = e;\n            editor.instance.setAudio(audio);\n        } else if (eventName === \"remixed\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { audio } = e;\n            editor.instance.setAudio(audio);\n        } else if (eventName === \"recorded\") {\n            const e: AudioHistoryEventMap[typeof eventName] = eventData;\n            const { range, cursor, audio, oldAudio } = e;\n            if (range) {\n                await editor.instance.pasteToRange(audio, range[0], range[0] + oldAudio.length);\n            } else {\n                await editor.instance.insertToCursor(audio, cursor);\n            }\n        }\n    }\n}\n","import { WebAudioModule } from \"wamsdk/src/api\";\nimport TemporalAnalyserNode from \"../worklets/TemporalAnalyser\";\nimport { dbtoa } from \"../../utils/math\";\nimport AudioEditor from \"./AudioEditor\";\n\nexport default class AudioPlayer {\n    readonly editor: AudioEditor;\n    readonly dummyAnalyserNode: AnalyserNode;\n    readonly preFxGainNode: GainNode;\n    readonly postFxGainNode: GainNode;\n    playing: boolean;\n    currentSample: number;\n    currentTime: number;\n    currentChannels: boolean[];\n    bufferSourceNode: AudioBufferSourceNode;\n    splitterNode: ChannelSplitterNode;\n    mergerNode: ChannelMergerNode;\n    postAnalyserNode: TemporalAnalyserNode;\n    monitoring: boolean;\n    mediaStreamSourceNode: MediaStreamAudioSourceNode;\n    offset: number;\n    duration: number;\n    get audioCtx() {\n        return this.editor.audioCtx;\n    }\n    get destination() {\n        return this.audioCtx.destination;\n    }\n    get loop() {\n        return this.bufferSourceNode?.loop;\n    }\n    handleLoopChanged = (loopIn: boolean) => {\n        const { bufferSourceNode, editor } = this;\n        if (!bufferSourceNode) return;\n        const { buffer, loop } = bufferSourceNode;\n        if (loop === loopIn) return;\n        const { sampleRate } = buffer;\n        const selRange = editor.state.selRange;\n        bufferSourceNode.loop = loopIn;\n        if (loopIn) {\n            if (selRange) {\n                bufferSourceNode.loopStart = selRange[0] / sampleRate;\n                bufferSourceNode.loopEnd = selRange[1] / sampleRate;\n            } else {\n                bufferSourceNode.loopStart = 0;\n                bufferSourceNode.loopEnd = 0;\n            }\n            bufferSourceNode.stop(Number.MAX_VALUE);\n        } else {\n            bufferSourceNode.loopStart = 0;\n            bufferSourceNode.loopEnd = 0;\n            if (selRange) bufferSourceNode.stop(this.currentTime + (selRange[1] - this.currentSample) / sampleRate);\n            else bufferSourceNode.stop(Number.MAX_VALUE);\n        }\n    };\n    handleSelRangeChanged = (selRange: [number, number]): void => {\n        const { bufferSourceNode } = this;\n        if (!bufferSourceNode) return;\n        const { buffer, loop } = bufferSourceNode;\n        const { sampleRate } = buffer;\n        if (loop) {\n            if (selRange) {\n                bufferSourceNode.loopStart = selRange[0] / sampleRate;\n                bufferSourceNode.loopEnd = selRange[1] / sampleRate;\n            } else {\n                bufferSourceNode.loopStart = 0;\n                bufferSourceNode.loopEnd = 0;\n            }\n        } else {\n            bufferSourceNode.loopStart = 0;\n            bufferSourceNode.loopEnd = 0;\n            if (selRange) bufferSourceNode.stop(this.currentTime + (selRange[1] - this.currentSample) / sampleRate);\n            else bufferSourceNode.stop(Number.MAX_VALUE);\n        }\n    };\n    handleEnded = () => {\n        const { bufferSourceNode } = this;\n        if (!bufferSourceNode) return;\n        this.editor.handlePlayerEnded(this.getCurrentSample());\n        this.bufferSourceNode.removeEventListener(\"ended\", this.handleEnded);\n        this.bufferSourceNode.disconnect();\n        this.splitterNode.disconnect();\n        this.mergerNode.disconnect();\n        delete this.bufferSourceNode;\n        delete this.splitterNode;\n        delete this.mergerNode;\n    };\n    handleEnabledChannelsChanged = (enabledChannels: boolean[]) => {\n        const { bufferSourceNode } = this;\n        if (!bufferSourceNode) return;\n        this.currentChannels.forEach((enabled, i) => {\n            if (enabledChannels[i] !== enabled) {\n                if (enabledChannels[i]) this.splitterNode.connect(this.mergerNode, i, i);\n                else this.splitterNode.disconnect(this.mergerNode, i, i);\n            }\n        });\n        this.currentChannels = enabledChannels.slice();\n    };\n\n    updateCursorScheduled = false;\n    $updateCursorRaf = -1;\n    updateCursorCallback = () => {\n        this.$updateCursorRaf = -1;\n        this.updateCursorScheduled = false;\n        this.updateCursor();\n    };\n    scheduleUpdateCursor = () => {\n        if (this.updateCursorScheduled) return;\n        if (this.$updateCursorRaf === -1) this.$updateCursorRaf = requestAnimationFrame(this.updateCursorCallback);\n        this.updateCursorScheduled = true;\n    };\n    updateCursor() {\n        if (!this.bufferSourceNode) return;\n        this.editor.setCursor(this.getCurrentSample(), true);\n        this.scheduleUpdateCursor();\n    }\n    constructor(editor: AudioEditor) {\n        this.editor = editor;\n        this.playing = false;\n        this.monitoring = false;\n        // this.destination.channelInterpretation = \"discrete\";\n        this.dummyAnalyserNode = this.audioCtx.createAnalyser();\n        this.preFxGainNode = this.audioCtx.createGain();\n        this.postFxGainNode = this.audioCtx.createGain();\n        this.postFxGainNode.connect(this.destination);\n        this.editor.on(\"loop\", this.handleLoopChanged);\n        this.editor.on(\"selRangeToPlay\", this.handleSelRangeChanged);\n        this.editor.on(\"enabledChannels\", this.handleEnabledChannelsChanged);\n    }\n    async init() {\n        const audioWorklet = this.audioCtx.audioWorklet;\n        await TemporalAnalyserNode.register(audioWorklet);\n        this.postAnalyserNode = new TemporalAnalyserNode(this.audioCtx);\n        this.postFxGainNode.connect(this.postAnalyserNode);\n    }\n    async destroy() {\n        if (this.playing) this.stop();\n        await this.postAnalyserNode.destroy();\n    }\n    getCurrentSample() {\n        const { buffer } = this.bufferSourceNode;\n        const delta = (this.audioCtx.currentTime - this.currentTime) * buffer.sampleRate;\n        const selRange = this.editor.state?.selRange || [0, buffer.length];\n        this.currentSample += delta;\n        this.currentTime = this.audioCtx.currentTime;\n        if (this.loop) {\n            if (this.currentSample > selRange[1]) this.currentSample = (this.currentSample - selRange[0]) % (selRange[1] - selRange[0]) + selRange[0];\n        } else {\n            if (this.currentSample > selRange[1]) this.currentSample = selRange[1];\n        }\n        return ~~this.currentSample;\n    }\n    play() {\n        this.stop();\n        const audio = this.editor;\n        const { cursor, selRange, enabledChannels, preFxGain, postFxGain, loop } = this.editor.state;\n        const { sampleRate, numberOfChannels, audioBuffer } = audio;\n        const offset = (selRange ? selRange[0] : cursor) / sampleRate;\n        const duration = selRange ? (selRange[1] - selRange[0]) / sampleRate : undefined;\n        const bufferSourceNode = this.audioCtx.createBufferSource();\n        bufferSourceNode.channelCountMode = \"explicit\";\n        bufferSourceNode.channelInterpretation = \"discrete\";\n        bufferSourceNode.channelCount = numberOfChannels;\n        this.currentTime = this.audioCtx.currentTime;\n        this.currentSample = selRange ? selRange[0] : cursor;\n        this.currentChannels = enabledChannels.slice();\n        this.bufferSourceNode = bufferSourceNode;\n        this.splitterNode = this.audioCtx.createChannelSplitter(numberOfChannels);\n        this.mergerNode = this.audioCtx.createChannelMerger(numberOfChannels);\n        this.mergerNode.channelInterpretation = \"discrete\";\n        this.preFxGainNode.gain.value = dbtoa(preFxGain);\n        this.postFxGainNode.gain.value = dbtoa(postFxGain);\n        bufferSourceNode.buffer = audioBuffer;\n        bufferSourceNode.connect(this.dummyAnalyserNode);\n        bufferSourceNode.connect(this.splitterNode);\n        enabledChannels.forEach((enabled, i) => {\n            if (enabled && i < numberOfChannels) this.splitterNode.connect(this.mergerNode, i, i);\n        });\n        this.mergerNode.connect(this.preFxGainNode);\n        if (!this.monitoring) this.connectPlugins();\n        bufferSourceNode.loop = !!loop;\n        bufferSourceNode.addEventListener(\"ended\", this.handleEnded);\n        if (loop) {\n            if (duration) {\n                bufferSourceNode.loopStart = offset;\n                bufferSourceNode.loopEnd = offset + duration;\n            }\n            bufferSourceNode.start(this.currentTime, offset);\n        } else {\n            bufferSourceNode.start(this.currentTime, offset);\n            if (duration) bufferSourceNode.stop(this.currentTime + duration);\n            else bufferSourceNode.stop(Number.MAX_VALUE);\n        }\n        this.playing = true;\n        this.scheduleUpdateCursor();\n    }\n    stop() {\n        if (!this.bufferSourceNode) return;\n        this.bufferSourceNode.stop();\n        this.bufferSourceNode.removeEventListener(\"ended\", this.handleEnded);\n        this.bufferSourceNode.disconnect();\n        this.splitterNode.disconnect();\n        this.mergerNode.disconnect();\n        if (!this.monitoring) this.disconnectPlugins();\n        delete this.bufferSourceNode;\n        delete this.splitterNode;\n        delete this.mergerNode;\n        this.playing = false;\n    }\n    startMonitoring() {\n        this.stopMonitoring();\n        const sourceNode = this.editor.recorder.node;\n        if (!sourceNode) return;\n        this.mediaStreamSourceNode = sourceNode;\n        if (!this.playing) this.connectPlugins();\n        this.mediaStreamSourceNode.connect(this.preFxGainNode);\n        this.monitoring = true;\n    }\n    stopMonitoring() {\n        if (!this.mediaStreamSourceNode) return;\n        this.mediaStreamSourceNode.disconnect(this.preFxGainNode);\n        if (!this.playing) this.disconnectPlugins();\n        delete this.mediaStreamSourceNode;\n        this.monitoring = false;\n    }\n\n    connectPlugins() {\n        const { plugins, pluginsEnabled } = this.editor.state;\n        let firstPluginNode: AudioNode;\n        let lastPluginNode: AudioNode;\n        plugins.forEach((p) => {\n            if (!p) return;\n            if (!pluginsEnabled.has(p)) return;\n            if (!firstPluginNode) firstPluginNode = p.audioNode;\n            lastPluginNode = p.audioNode;\n        });\n        if (firstPluginNode) {\n            this.preFxGainNode.connect(firstPluginNode);\n            lastPluginNode.connect(this.postFxGainNode);\n        } else {\n            this.preFxGainNode.connect(this.postFxGainNode);\n        }\n    }\n    disconnectPlugins() {\n        const { plugins, pluginsEnabled } = this.editor.state;\n        this.preFxGainNode.disconnect();\n        let lastPluginNode: AudioNode;\n        plugins.forEach((p) => {\n            if (!p) return;\n            if (!pluginsEnabled.has(p)) return;\n            lastPluginNode = p.audioNode;\n        });\n        if (lastPluginNode) lastPluginNode.disconnect(this.postFxGainNode);\n    }\n\n    async addPlugin(url: string, indexIn: number) {\n        const { plugins, pluginsEnabled } = this.editor.state;\n        const { default: Plugin }: { default: typeof WebAudioModule } = await import(/* webpackIgnore: true */url);\n        const plugin = await Plugin.createInstance(this.audioCtx);\n        const { audioNode } = plugin;\n        const usingPlugins = this.playing || this.monitoring;\n        let preNode: AudioNode;\n        let postNode: AudioNode;\n        let index = indexIn;\n        while (index >= 0) {\n            index--;\n            if (plugins[index]) {\n                preNode = plugins[index].audioNode;\n                break;\n            }\n        }\n        if (!preNode && usingPlugins) preNode = this.preFxGainNode;\n        index = indexIn;\n        while (index < plugins.length) {\n            if (plugins[index]) {\n                postNode = plugins[index].audioNode;\n                break;\n            }\n            index++;\n        }\n        if (!postNode && usingPlugins) postNode = this.postFxGainNode;\n        audioNode.connect(this.dummyAnalyserNode);\n        if (preNode && postNode) preNode.disconnect(postNode);\n        if (preNode) preNode.connect(audioNode);\n        if (postNode) audioNode.connect(postNode);\n        plugins.splice(indexIn, 0, plugin);\n        pluginsEnabled.add(plugin);\n        this.editor.emitPluginsChanged();\n        return plugin;\n    }\n    removePlugin(indexIn: number) {\n        const { plugins, pluginsEnabled } = this.editor.state;\n        const plugin = plugins[indexIn];\n        if (!plugin) return;\n        const { audioNode } = plugin;\n        const usingPlugins = this.playing || this.monitoring;\n        let preNode: AudioNode;\n        let postNode: AudioNode;\n        let index = indexIn - 1;\n        while (index >= 0) {\n            if (plugins[index]) {\n                preNode = plugins[index].audioNode;\n                break;\n            }\n            index--;\n        }\n        if (!preNode && usingPlugins) preNode = this.preFxGainNode;\n        index = indexIn + 1;\n        while (index < plugins.length) {\n            if (plugins[index]) {\n                postNode = plugins[index].audioNode;\n                break;\n            }\n            index++;\n        }\n        if (!postNode && usingPlugins) postNode = this.postFxGainNode;\n        audioNode.disconnect();\n        if (pluginsEnabled.has(plugin) && preNode) {\n            preNode.disconnect(audioNode);\n            if (postNode) preNode.connect(postNode);\n        }\n        if (plugin.audioNode) plugin.audioNode.destroy();\n        delete plugins[indexIn];\n        plugins.splice(indexIn, 1);\n        if (plugins.length < 10) plugins.push(undefined);\n        this.editor.emitPluginsChanged();\n    }\n    movePlugin(fromIndexIn: number, toIndexIn: number) {\n        const { plugins, pluginsEnabled } = this.editor.state;\n        if (!plugins[fromIndexIn]) return;\n        const plugin = plugins[fromIndexIn];\n        const { audioNode } = plugin;\n        const usingPlugins = this.playing || this.monitoring;\n        const enabled = pluginsEnabled.has(plugin);\n        let preNode: AudioNode;\n        let postNode: AudioNode;\n        let index = fromIndexIn - 1;\n        while (index >= 0) {\n            if (plugins[index]) {\n                preNode = plugins[index].audioNode;\n                break;\n            }\n            index--;\n        }\n        if (!preNode && usingPlugins) preNode = this.preFxGainNode;\n        index = fromIndexIn + 1;\n        while (index < plugins.length) {\n            if (plugins[index]) {\n                postNode = plugins[index].audioNode;\n                break;\n            }\n            index++;\n        }\n        if (!postNode && usingPlugins) postNode = this.postFxGainNode;\n        if (enabled) {\n            if (preNode) preNode.disconnect(audioNode);\n            if (postNode) audioNode.disconnect(postNode);\n            if (preNode && postNode) preNode.connect(postNode);\n        }\n        plugins.splice(fromIndexIn, 1);\n        preNode = undefined;\n        postNode = undefined;\n        index = toIndexIn - 1;\n        while (index >= 0) {\n            if (plugins[index]) {\n                preNode = plugins[index].audioNode;\n                break;\n            }\n            index--;\n        }\n        if (!preNode && usingPlugins) preNode = this.preFxGainNode;\n        index = toIndexIn + 1;\n        while (index < plugins.length) {\n            if (plugins[index]) {\n                postNode = plugins[index].audioNode;\n                break;\n            }\n            index++;\n        }\n        if (!postNode && usingPlugins) postNode = this.postFxGainNode;\n        if (enabled) {\n            if (preNode && postNode) preNode.disconnect(postNode);\n            if (preNode) preNode.connect(audioNode);\n            if (postNode) audioNode.connect(postNode);\n        }\n        plugins.splice(toIndexIn, 0, plugin);\n        this.editor.emitPluginsChanged();\n    }\n    setPluginEnabled(indexIn: number, enabled: boolean) {\n        const { plugins, pluginsEnabled } = this.editor.state;\n        const plugin = plugins[indexIn];\n        if (!plugin) return;\n        if (pluginsEnabled.has(plugin) === enabled) return;\n        let index = indexIn - 1;\n        const { audioNode } = plugins[indexIn];\n        const usingPlugins = this.playing || this.monitoring;\n        let preNode: AudioNode;\n        let postNode: AudioNode;\n        while (index >= 0) {\n            if (plugins[index]) {\n                preNode = plugins[index].audioNode;\n                break;\n            }\n            index--;\n        }\n        if (!preNode && usingPlugins) preNode = this.preFxGainNode;\n        index = indexIn + 1;\n        while (index < plugins.length) {\n            if (plugins[index]) {\n                postNode = plugins[index].audioNode;\n                break;\n            }\n            index++;\n        }\n        if (!postNode && usingPlugins) postNode = this.postFxGainNode;\n        if (enabled) {\n            if (preNode && postNode) preNode.disconnect(postNode);\n            if (preNode) preNode.connect(audioNode);\n            if (postNode) audioNode.connect(postNode);\n        } else {\n            if (preNode) preNode.disconnect(audioNode);\n            if (postNode) audioNode.disconnect(postNode);\n            if (preNode && postNode) preNode.connect(postNode);\n        }\n        if (enabled) pluginsEnabled.add(plugin);\n        else pluginsEnabled.delete(plugin);\n        this.editor.emitPluginsChanged();\n    }\n}\n","import OperableAudioBuffer from \"./OperableAudioBuffer\";\nimport PatcherAudio from \"./PatcherAudio\";\nimport TransmitterNode from \"../worklets/Transmitter\";\nimport type AudioEditor from \"./AudioEditor\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type TempAudioFile from \"./TempAudioFile\";\n\nexport default class AudioRecorder {\n    readonly editor: AudioEditor;\n    device: string;\n    stream: MediaStream;\n    constraints: MediaTrackConstraintSet = { echoCancellation: false, noiseSuppression: false, autoGainControl: false };\n    node: MediaStreamAudioSourceNode;\n    transmitter: TransmitterNode;\n    overwrittenAudio: PatcherAudio;\n    recording = false;\n    $: number;\n    $start: number;\n    $end: number;\n    inPlace: boolean;\n    get audioCtx() {\n        return this.editor.audioCtx;\n    }\n    get audio() {\n        return this.editor;\n    }\n    constructor(editor: AudioEditor) {\n        this.editor = editor;\n        navigator.mediaDevices.addEventListener(\"devicechange\", this.handleDeviceChange);\n    }\n    async init() {\n        await TransmitterNode.register(this.audioCtx.audioWorklet);\n        this.transmitter = new TransmitterNode(this.audioCtx);\n        this.transmitter.handleReceiveBuffer = this.handleReceiveBuffer;\n        await this.newSearch();\n    }\n    async destroy() {\n        navigator.mediaDevices.removeEventListener(\"devicechange\", this.handleDeviceChange);\n        if (this.recording) await this.stop();\n        await this.transmitter.destroy();\n    }\n    handleDeviceChange = async () => {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const enums = devices.filter(d => d.kind === \"audioinput\").map(d => d.label || d.deviceId);\n        if (enums.indexOf(this.device) === -1) {\n            this.device = devices.find(d => d.deviceId === \"default\") ? \"default\" : devices.length ? devices[0].deviceId : \"default\";\n            await this.newSearch(this.device);\n        }\n    };\n    handleReceiveBuffer = async (bufferIn: Float32Array[], $total: number) => {\n        if (!this.recording) return;\n        let extended = false;\n        const { $, $start, $end, inPlace, audio, overwrittenAudio } = this;\n        const { length, numberOfChannels, sampleRate } = audio;\n        const $target = $start + $total;\n        const copyLength = (inPlace ? Math.min($target, $end) : $target) - $;\n        if (!inPlace && $target > length) { // extend current buffer\n            const newLength = 2 ** Math.ceil(Math.log(length + sampleRate) / Math.log(2));\n            const newBuffer = new OperableAudioBuffer({ numberOfChannels, length: newLength, sampleRate });\n            for (let i = 0; i < numberOfChannels; i++) {\n                const channel = newBuffer.getChannelData(i);\n                channel.set(audio.audioBuffer.getChannelData(i));\n                if (bufferIn[i]) {\n                    if (overwrittenAudio && $ < $end) {\n                        const overwrittenChannel = overwrittenAudio.audioBuffer.getChannelData(i);\n                        overwrittenChannel.set(channel.subarray($, $end), $ - $start);\n                    }\n                    channel.set(bufferIn[i], $);\n                }\n            }\n            audio.instance.audioBuffer = newBuffer;\n            audio.waveform.update($, newLength);\n            extended = true;\n        } else {\n            for (let i = 0; i < numberOfChannels; i++) {\n                const channel = audio.audioBuffer.getChannelData(i);\n                if (bufferIn[i]) {\n                    if (overwrittenAudio && $ < $end) {\n                        const overwrittenChannel = overwrittenAudio.audioBuffer.getChannelData(i);\n                        overwrittenChannel.set(channel.subarray($, Math.min($ + copyLength, $end)), $ - $start);\n                    }\n                    if (!inPlace || $target <= $end) channel.set(bufferIn[i], $);\n                    else channel.set(bufferIn[i].subarray(0, copyLength), $);\n                }\n            }\n            audio.waveform.update($, $ + copyLength);\n        }\n        this.$ += copyLength;\n        audio.instance.emit(\"setAudio\");\n        this.editor.setCursor(this.$);\n        if (extended) this.editor.setViewRange([this.editor.state.viewRange[0], this.audio.length]);\n        if (inPlace && this.$ === $end) {\n            this.editor.setRecording(false);\n            await this.stop();\n        }\n    };\n    newSearch = async (search?: string) => {\n        if (this.device && this.device === search) return;\n        if (this.stream && (this.recording || this.editor.player.monitoring)) {\n            this.node.disconnect();\n            this.stream.getAudioTracks().forEach(t => t.stop());\n            delete this.node;\n            delete this.stream;\n            delete this.editor.player.mediaStreamSourceNode;\n        }\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const enums = devices.filter(d => d.kind === \"audioinput\");\n        if (search) {\n            const device = devices.find(d => d.kind === \"audioinput\" && (d.deviceId === search || d.label === search));\n            if (device) this.device = device.deviceId;\n        } else {\n            this.device = enums.length ? enums[0].deviceId : undefined;\n        }\n        this.stream = await navigator.mediaDevices.getUserMedia({ audio: this.getConstraints(this.device) });\n        if (this.stream) {\n            if (this.recording || this.editor.player.monitoring) {\n                this.resetNode();\n                this.node.connect(this.transmitter);\n                if (this.editor.player.monitoring) this.node.connect(this.editor.player.preFxGainNode);\n                else this.node.connect(this.editor.player.postAnalyserNode);\n            } else {\n                this.resetNode();\n            }\n        }\n    };\n    getConstraints(deviceId?: string): MediaTrackConstraintSet {\n        return {\n            deviceId,\n            sampleRate: this.editor.sampleRate || this.audioCtx.sampleRate,\n            channelCount: this.editor.numberOfChannels || undefined,\n            ...this.constraints\n        };\n    }\n    resetNode() {\n        if (this.stream) {\n            this.node = this.audioCtx.createMediaStreamSource(this.stream);\n            this.node.channelInterpretation = \"discrete\";\n        }\n    }\n    async start() {\n        if (!this.node) return false;\n        this.node.connect(this.transmitter);\n        if (!this.editor.player.monitoring) this.node.connect(this.editor.player.postAnalyserNode);\n        const { state, env, file, project, length, numberOfChannels, sampleRate } = this.editor;\n        const { cursor, selRange } = state;\n        if (selRange) {\n            const [$start, $end] = selRange;\n            this.inPlace = true;\n            this.$start = $start;\n            this.$end = $end;\n            this.$ = $start;\n        } else {\n            this.inPlace = false;\n            this.$start = cursor;\n            this.$end = length;\n            this.$ = cursor;\n        }\n        const overwrittenBufferLength = this.$end - this.$start;\n        if (overwrittenBufferLength) this.overwrittenAudio = await PatcherAudio.fromSilence({ env, file: file as PersistentProjectFile | TempAudioFile, project }, numberOfChannels, overwrittenBufferLength, sampleRate);\n        else this.overwrittenAudio = undefined;\n        this.recording = true;\n        await this.transmitter.reset();\n        await this.transmitter.start();\n        return true;\n    }\n    async stop() {\n        this.recording = false;\n        if (!this.node) return;\n        if (!this.editor.player.monitoring) this.node.disconnect(this.editor.player.postAnalyserNode);\n        await this.transmitter.stop();\n        if (!this.inPlace && this.$ > this.$end && this.$ < this.audio.length) {\n            const [audio] = await this.audio.instance.split(this.$);\n            this.audio.instance.setAudio(audio);\n            if (this.overwrittenAudio) this.overwrittenAudio.waveform.update();\n        } else {\n            if (this.overwrittenAudio) {\n                if (this.$ < this.$end) {\n                    const [audio] = await this.overwrittenAudio.split(this.$ - this.$start);\n                    this.overwrittenAudio.setAudio(audio);\n                }\n                this.overwrittenAudio.waveform.update();\n            }\n        }\n        const audio = await this.audio.instance.pick(this.$start, this.$, true);\n        this.editor.emit(\"recorded\", { range: (this.inPlace || this.overwrittenAudio) ? [this.$start, this.$] : undefined, cursor: (this.inPlace || this.overwrittenAudio) ? undefined : this.$start, audio, oldAudio: this.overwrittenAudio });\n        this.editor.setSelRange([this.$start, this.$]);\n    }\n}\n","export default class OperableAudioBuffer extends AudioBuffer {\n    clone() {\n        const newBuffer = new OperableAudioBuffer(this);\n        for (let i = 0; i < this.numberOfChannels; i++) {\n            const channel = this.getChannelData(i);\n            newBuffer.copyToChannel(channel, i);\n        }\n        return newBuffer;\n    }\n    reverse() {\n        for (let i = 0; i < this.numberOfChannels; i++) {\n            const channel = this.getChannelData(i);\n            channel.reverse();\n        }\n    }\n    inverse() {\n        for (let i = 0; i < this.numberOfChannels; i++) {\n            const channel = this.getChannelData(i);\n            for (let j = 0; j < channel.length; j++) {\n                channel[j] = -channel[j];\n            }\n        }\n    }\n    concat(that: AudioBuffer, numberOfChannels = this.numberOfChannels) {\n        const { sampleRate } = this;\n        const length = this.length + that.length;\n        const buffer = new OperableAudioBuffer({ numberOfChannels, length, sampleRate });\n        const from = this.length;\n        for (let i = 0; i < numberOfChannels; i++) {\n            // const channel = buffer.getChannelData(i);\n            // const channel1 = i < buffer1.numberOfChannels ? buffer1.getChannelData(i) : new Float32Array(buffer1.length);\n            // const channel2 = i < buffer2.numberOfChannels ? buffer2.getChannelData(i) : new Float32Array(buffer2.length);\n            if (i < this.numberOfChannels) buffer.copyToChannel(this.getChannelData(i), i);\n            if (i < that.numberOfChannels) buffer.copyToChannel(that.getChannelData(i), i, from);\n            // channel.set(channel1);\n            // channel.set(channel2, from);\n        }\n        return buffer;\n    }\n    split(from: number): [OperableAudioBuffer, OperableAudioBuffer] {\n        if (from >= this.length || from <= 0) throw new RangeError(\"Split point is out of bound\");\n        // split buffer\n        const { length, sampleRate, numberOfChannels } = this;\n        const buffer1 = new OperableAudioBuffer({ length: from, numberOfChannels, sampleRate });\n        const buffer2 = new OperableAudioBuffer({ length: length - from, numberOfChannels, sampleRate });\n        for (let i = 0; i < numberOfChannels; i++) {\n            // const channel = buffer.getChannelData(i);\n            const channel1 = buffer1.getChannelData(i);\n            const channel2 = buffer2.getChannelData(i);\n            this.copyFromChannel(channel1, i);\n            this.copyFromChannel(channel2, i, from);\n            // channel1.set(channel.subarray(0, from));\n            // channel2.set(channel.subarray(from));\n        }\n        return [buffer1, buffer2];\n    }\n    write(channel: number, index: number, value: number) {\n        if (channel > this.numberOfChannels) throw new Error(`Channel written ${channel} out of range ${this.numberOfChannels}`);\n        if (index > this.length) throw new Error(`Index written ${index} out of range ${this.length}`);\n        this.getChannelData(channel)[index] = value;\n    }\n    toArray(shared = false) {\n        const supportSAB = typeof SharedArrayBuffer !== \"undefined\";\n        const channelData: Float32Array[] = [];\n        const { numberOfChannels, length } = this;\n        for (let i = 0; i < numberOfChannels; i++) {\n            if (shared && supportSAB) {\n                channelData[i] = new Float32Array(new SharedArrayBuffer(length * Float32Array.BYTES_PER_ELEMENT));\n                channelData[i].set(this.getChannelData(i));\n            } else {\n                channelData[i] = this.getChannelData(i);\n            }\n        }\n        return channelData;\n    }\n}\n","import type { WebAudioModule } from \"wamsdk/src/api\";\nimport { dbtoa, isIdentityMatrix, normExp } from \"../../utils/math\";\nimport AudioEditor from \"./AudioEditor\";\nimport FileInstance from \"../file/FileInstance\";\nimport AudioHistory from \"./AudioHistory\";\nimport OperableAudioBuffer from \"./OperableAudioBuffer\";\nimport Waveform from \"../../utils/Waveform\";\nimport type { Options } from \"../../utils/WavEncoder\";\nimport type PersistentProjectFile from \"../file/PersistentProjectFile\";\nimport type TempAudioFile from \"./TempAudioFile\";\nimport type Env from \"../Env\";\nimport type { IJSPatcherEnv } from \"../Env\";\nimport type Project from \"../Project\";\nimport type { IProject } from \"../Project\";\n\nexport interface PatcherAudioEventMap {\n    \"setAudio\": never;\n    \"selRange\": [number, number];\n    \"cursor\": number;\n    \"postInit\": never;\n}\n\nexport default class PatcherAudio extends FileInstance<PatcherAudioEventMap, PersistentProjectFile | TempAudioFile> {\n    static async fromProjectItem(options: { file: PersistentProjectFile; env: IJSPatcherEnv; project?: IProject; instanceId?: string }) {\n        return new this(options).init(options.file.data.slice(0));\n    }\n    static async fromArrayBuffer(options: ConstructorParameters<typeof PatcherAudio>[0], data: ArrayBuffer) {\n        const audio = new PatcherAudio(options);\n        await audio.init(data.slice(0));\n        return audio;\n    }\n    static async fromNativeAudioBuffer(options: ConstructorParameters<typeof PatcherAudio>[0], bufferIn: AudioBuffer) {\n        const audio = new PatcherAudio(options);\n        const audioBuffer = Object.setPrototypeOf(bufferIn, OperableAudioBuffer.prototype);\n        audio.audioBuffer = audioBuffer;\n        audio.waveform = new Waveform(audio);\n        await audio.waveform.generate();\n        await audio.emit(\"postInit\");\n        audio._isReady = true;\n        await audio.emit(\"ready\");\n        return audio;\n    }\n    static async fromSilence(optionsIn: ConstructorParameters<typeof PatcherAudio>[0], numberOfChannels: number, length: number, sampleRate: number) {\n        const audio = new PatcherAudio(optionsIn);\n        audio.audioBuffer = new OperableAudioBuffer({ length, numberOfChannels, sampleRate });\n        audio.waveform = new Waveform(audio);\n        audio.waveform.generateEmpty(numberOfChannels, length);\n        await audio.emit(\"postInit\");\n        audio._isReady = true;\n        await audio.emit(\"ready\");\n        return audio;\n    }\n    async getEditor() {\n        const editor = new AudioEditor(this);\n        return editor.init();\n    }\n    get audioCtx() {\n        return (this.project as Project)?.audioCtx || (this.env as Env).audioCtx;\n    }\n    audioBuffer: OperableAudioBuffer;\n    waveform: Waveform;\n    _history = new AudioHistory();\n\n    get length() {\n        return this.audioBuffer.length;\n    }\n    get numberOfChannels() {\n        return this.audioBuffer.numberOfChannels;\n    }\n    get sampleRate() {\n        return this.audioBuffer.sampleRate;\n    }\n    async init(data?: ArrayBuffer) {\n        const { audioCtx } = this;\n        await this.env.taskMgr.newTask(this, \"Initializing Audio\", async (onUpdate) => {\n            onUpdate(\"Decoding Audio...\");\n            if (data?.byteLength) {\n                const audioBuffer = await audioCtx.decodeAudioData(data);\n                this.audioBuffer = Object.setPrototypeOf(audioBuffer, OperableAudioBuffer.prototype);\n            } else {\n                this.audioBuffer = new OperableAudioBuffer({ length: 1, numberOfChannels: 1, sampleRate: audioCtx.sampleRate });\n            }\n            onUpdate(\"Generating Waveform...\");\n            this.waveform = new Waveform(this);\n            await this.waveform.generate();\n        });\n        this.on(\"setAudio\", () => this.emit(\"changed\"));\n        await this.emit(\"postInit\");\n        this._isReady = true;\n        await this.emit(\"ready\");\n        return this;\n    }\n    async initWithOptions(options: Partial<AudioBufferOptions>) {\n        const { length = 1, numberOfChannels = 1, sampleRate = this.audioCtx.sampleRate } = options;\n        this.audioBuffer = new OperableAudioBuffer({ length, numberOfChannels, sampleRate });\n        this.waveform = new Waveform(this);\n        await this.waveform.generate();\n        await this.emit(\"postInit\");\n        this._isReady = true;\n        await this.emit(\"ready\");\n    }\n    async initWith(audio: { audioBuffer: OperableAudioBuffer; waveform: Waveform }) {\n        this.setAudio(audio);\n        await this.emit(\"postInit\");\n        this._isReady = true;\n        await this.emit(\"ready\");\n    }\n    async serialize(optionsIn: Omit<Partial<Options>, \"sampleRate\"> = { bitDepth: 32, float: true }) {\n        return this.env.taskMgr.newTask(this, \"Encoding audio WAVE...\", () => {\n            const audioData = this.audioBuffer.toArray(true);\n            const options = { sampleRate: this.audioBuffer.sampleRate, bitDepth: 32, float: true, ...optionsIn };\n            return (this.env as Env).wavEncoderWorker.encode(audioData, options);\n        });\n    }\n    private encodeFFmpegWorker(wav: Uint8Array, inputFileName: string, outputFileName: string, ...args: string[]) {\n        return this.env.taskMgr.newTask(this, `Encoding audio ${outputFileName}...`, async (onUpdate) => {\n            const ffmpegWorker = await (this.env as Env).getFFmpeg();\n            // const handleProgress = (ratio: number) => onUpdate(`Encoding: ${(ratio * 100).toFixed(2)}%`);\n            ffmpegWorker.on(\"ffout\", onUpdate);\n            ffmpegWorker.on(\"fferr\", onUpdate);\n            ffmpegWorker.on(\"info\", onUpdate);\n            // ffmpegWorker.on(\"progress\", handleProgress);\n            try {\n                const result = await ffmpegWorker.run({\n                    data: wav,\n                    input: inputFileName,\n                    output: outputFileName,\n                    args: [\"-i\", inputFileName, ...args, outputFileName]\n                });\n                return result;\n            } finally {\n                ffmpegWorker.off(\"ffout\", onUpdate);\n                ffmpegWorker.off(\"fferr\", onUpdate);\n                ffmpegWorker.off(\"info\", onUpdate);\n                // ffmpegWorker.off(\"progress\", handleProgress);\n            }\n        });\n    }\n    async encodeMp3(bitrate: number) {\n        const wav = new Uint8Array(await this.serialize({ shared: true }));\n        const inputFileName = \"in.wav\";\n        const outputFileName = \"out.mp3\";\n        return this.encodeFFmpegWorker(wav, inputFileName, outputFileName, \"-codec:a\", \"libmp3lame\", \"-b:a\", `${bitrate}k`);\n    }\n    async encodeAac(bitrate: number) {\n        const wav = new Uint8Array(await this.serialize({ shared: true }));\n        const inputFileName = \"in.wav\";\n        const outputFileName = \"out.m4a\";\n        return this.encodeFFmpegWorker(wav, inputFileName, outputFileName, \"-codec:a\", \"aac\", \"-b:a\", `${bitrate}k`);\n    }\n    async clone() {\n        const audio = new PatcherAudio({ env: this.env, project: this.project, file: this.file });\n        await audio.initWith({\n            audioBuffer: this.audioBuffer.clone(),\n            waveform: this.waveform.clone()\n        });\n        return audio;\n    }\n    setAudio(that: { audioBuffer: OperableAudioBuffer; waveform: Waveform }) {\n        this.audioBuffer = that.audioBuffer;\n        this.waveform = that.waveform;\n        this.waveform.patcherAudio = this;\n        this.emit(\"setAudio\");\n    }\n    async silence(range: [number, number]) {\n        const [selStart, selEnd] = range;\n        const length = selEnd - selStart;\n        const audio = await PatcherAudio.fromSilence({ env: this.env, project: this.project, file: this.file }, this.numberOfChannels, length, this.sampleRate);\n        const oldAudio = await this.pasteToRange(audio, selStart, selEnd);\n        return { range: [selStart, selEnd] as [number, number], audio, oldAudio };\n    }\n    async insertSilence(length: number, from: number) {\n        if (!length) return null;\n        const audio = await PatcherAudio.fromSilence({ env: this.env, project: this.project, file: this.file }, this.numberOfChannels, length, this.sampleRate);\n        this.insertToCursor(audio, from);\n        return { range: [from, from + length] as [number, number], audio };\n    }\n    reverse() {\n        this.audioBuffer.reverse();\n        this.waveform.reverse();\n    }\n    inverse() {\n        this.audioBuffer.inverse();\n        this.waveform.inverse();\n    }\n    async concat(that: PatcherAudio, numberOfChannels = this.audioBuffer.numberOfChannels) {\n        const audio = new PatcherAudio({ env: this.env, project: this.project, file: this.file });\n        const audioBuffer = this.audioBuffer.concat(that.audioBuffer, numberOfChannels);\n        audio.audioBuffer = audioBuffer;\n        const waveform = this.waveform.concat(that.waveform, audio, numberOfChannels);\n        await audio.initWith({ audioBuffer, waveform });\n        return audio;\n    }\n    async split(from: number) {\n        const audio1 = new PatcherAudio({ env: this.env, project: this.project, file: this.file });\n        const audio2 = new PatcherAudio({ env: this.env, project: this.project, file: this.file });\n        const [ab1, ab2] = this.audioBuffer.split(from);\n        audio1.audioBuffer = ab1;\n        audio2.audioBuffer = ab2;\n        const [wf1, wf2] = this.waveform.split(from, audio1, audio2);\n        await audio1.initWith({ audioBuffer: ab1, waveform: wf1 });\n        await audio2.initWith({ audioBuffer: ab2, waveform: wf2 });\n        return [audio1, audio2] as [PatcherAudio, PatcherAudio];\n    }\n    async pick(from: number, to: number, clone = false) {\n        let picked: PatcherAudio;\n        let audioBuffer: OperableAudioBuffer;\n        let waveform: Waveform;\n        if (from <= 0 && to >= this.length) {\n            picked = new PatcherAudio({ env: this.env, project: this.project, file: this.file });\n            if (clone) {\n                audioBuffer = this.audioBuffer.clone();\n                waveform = this.waveform.clone();\n            } else {\n                audioBuffer = this.audioBuffer;\n                waveform = this.waveform;\n            }\n            await picked.initWith({ audioBuffer, waveform });\n            return picked;\n            // eslint-disable-next-line no-else-return\n        } else if (from <= 0) {\n            picked = (await this.split(to))[0];\n        } else if (to >= this.length) {\n            picked = (await this.split(from))[1];\n        } else {\n            const p0 = (await this.split(to))[0];\n            picked = (await p0.split(from))[1];\n        }\n        if (clone) picked.waveform = picked.waveform.clone();\n        return picked;\n    }\n    async removeFromRange(from: number, to: number) {\n        if (from === 0 && to === this.length) {\n            const old = await this.clone();\n            const { numberOfChannels, sampleRate } = this.audioBuffer;\n            const audioBuffer = new OperableAudioBuffer({ length: 1, numberOfChannels, sampleRate });\n            const waveform = new Waveform(this);\n            this.setAudio({ audioBuffer, waveform });\n            this.setCursor(from);\n            return old;\n        // eslint-disable-next-line no-else-return\n        } else if (from === 0) {\n            const [p1, p2] = await this.split(to);\n            this.setAudio(p2);\n            this.setCursor(from);\n            return p1;\n        } else if (to === this.audioBuffer.length) {\n            const [p1, p2] = await this.split(from);\n            this.setAudio(p1);\n            this.setCursor(from);\n            return p2;\n        } else {\n            const [p0, p3] = await this.split(to);\n            const [p1, p2] = await p0.split(from);\n            const concat = await p1.concat(p3);\n            this.setAudio(concat);\n            this.setCursor(from);\n            return p2;\n        }\n    }\n    async pasteToRange(that: PatcherAudio, from: number, to: number) {\n        if (from <= 0 && to >= this.length) {\n            const old = await this.clone();\n            this.setAudio(that);\n            this.setSelRangeToAll();\n            return old;\n        // eslint-disable-next-line no-else-return\n        } else if (from <= 0) {\n            const [p1, p2] = await this.split(to);\n            const concat = await that.concat(p2, p2.numberOfChannels);\n            this.setAudio(concat);\n            this.setSelRange([0, that.length]);\n            return p1;\n        } else if (to >= this.length) {\n            const [p1, p2] = await this.split(from);\n            const concat = await p1.concat(that);\n            this.setAudio(concat);\n            this.setSelRange([from, this.length]);\n            return p2;\n        } else {\n            const [p, p2] = await this.split(to);\n            const [p0, old] = await p.split(from);\n            const p1 = await p0.concat(that);\n            const concat = await p1.concat(p2);\n            this.setAudio(concat);\n            this.setSelRange([from, from + that.length]);\n            return old;\n        }\n    }\n    async insertToCursor(that: PatcherAudio, cursor: number) {\n        if (cursor <= 0) {\n            const concat = await that.concat(this, this.numberOfChannels);\n            this.setAudio(concat);\n            this.setSelRange([0, that.length]);\n        } else if (cursor >= this.length) {\n            const concat = await this.concat(that);\n            this.setAudio(concat);\n            this.setSelRange([cursor, this.length]);\n        } else {\n            const [p0, p2] = await this.split(cursor);\n            const p1 = await p0.concat(that);\n            const concat = await p1.concat(p2);\n            this.setAudio(concat);\n            this.setSelRange([cursor, cursor + that.length]);\n        }\n    }\n    async fade(gain: number, from: number, to: number, enabledChannels: boolean[]) {\n        const oldAudio = await this.pick(from, to, true);\n        const factor = dbtoa(gain);\n        for (let c = 0; c < this.numberOfChannels; c++) {\n            if (!enabledChannels[c]) return null;\n            const channel = this.audioBuffer.getChannelData(c);\n            for (let i = from; i < to; i++) {\n                channel[i] *= factor;\n            }\n        }\n        this.waveform.update(from, to);\n        const audio = await this.pick(from, to, true);\n        return { gain, range: [from, to] as [number, number], audio, oldAudio };\n    }\n    async fadeIn(lengthIn: number, exponent: number, enabledChannels: boolean[]) {\n        const length = Math.max(0, Math.min(this.length, ~~lengthIn));\n        if (!length) return null;\n        const oldAudio = await this.pick(0, length, true);\n        for (let c = 0; c < this.numberOfChannels; c++) {\n            if (!enabledChannels[c]) return null;\n            const channel = this.audioBuffer.getChannelData(c);\n            for (let i = 0; i < length; i++) {\n                channel[i] *= normExp(i / length, exponent);\n            }\n        }\n        this.waveform.update(0, length);\n        const audio = await this.pick(0, length, true);\n        return { length, exponent, audio, oldAudio };\n    }\n    async fadeOut(lengthIn: number, exponent: number, enabledChannels: boolean[]) {\n        const l = this.length;\n        const length = Math.max(0, Math.min(l, ~~lengthIn));\n        if (!length) return null;\n        const oldAudio = await this.pick(l - length, l, true);\n        for (let c = 0; c < this.numberOfChannels; c++) {\n            if (!enabledChannels[c]) return null;\n            const channel = this.audioBuffer.getChannelData(c);\n            for (let i = 0; i < length; i++) {\n                channel[l - i] *= normExp(i / length, exponent);\n            }\n        }\n        this.waveform.update(l - length, l);\n        const audio = await this.pick(l - length, l, true);\n        return { length, exponent, audio, oldAudio };\n    }\n    write(channel: number, index: number, value: number) {\n        this.audioBuffer.write(channel, index, value);\n        this.waveform.update(index, index + 1);\n    }\n    async render(sampleRateIn?: number, mix?: number[][], applyPlugins?: boolean, pluginsOptions?: { plugins: WebAudioModule[]; pluginsEnabled: WeakSet<WebAudioModule>; preFxGain: number; postFxGain: number }): Promise<PatcherAudio> {\n        return this.env.taskMgr.newTask(this, \"Rendering audio...\", async () => {\n            let { length } = this;\n            const needResample = sampleRateIn && this.sampleRate !== sampleRateIn;\n            const needRemix = mix && (mix.length !== this.numberOfChannels || !isIdentityMatrix(mix));\n            if (!needResample && !needRemix && !applyPlugins) return this;\n            if (needResample) length = Math.ceil(length * sampleRateIn / this.sampleRate);\n            const numberOfChannels = mix ? mix.length : this.numberOfChannels;\n            const sampleRate = sampleRateIn || this.sampleRate;\n            let mixBuffer: AudioBuffer;\n            if (!needRemix) {\n                mixBuffer = this.audioBuffer;\n            } else {\n                await this.env.taskMgr.newTask(this, \"Remixing audio...\", () => {\n                    mixBuffer = new AudioBuffer({ numberOfChannels, length: this.length, sampleRate: this.sampleRate });\n                    for (let i = 0; i < mixBuffer.numberOfChannels; i++) {\n                        const mixChannel = mixBuffer.getChannelData(i);\n                        for (let j = 0; j < mix[i].length; j++) {\n                            const gain = mix[i][j];\n                            const channel = this.audioBuffer.getChannelData(j);\n                            for (let k = 0; k < mixChannel.length; k++) {\n                                mixChannel[k] += channel[k] * gain;\n                            }\n                        }\n                    }\n                });\n            }\n            if (!applyPlugins && !needResample) return PatcherAudio.fromNativeAudioBuffer({ env: this.env, project: this.project, file: this.file }, mixBuffer);\n            const offlineAudioCtx = new OfflineAudioContext(numberOfChannels, length, sampleRate);\n            const source = offlineAudioCtx.createBufferSource();\n            source.buffer = mixBuffer;\n            if (applyPlugins) {\n                await this.env.taskMgr.newTask(this, \"Applying plugins...\", async (onUpdate) => {\n                    const { plugins, pluginsEnabled, preFxGain, postFxGain } = pluginsOptions;\n                    const preFxGainNode = offlineAudioCtx.createGain();\n                    preFxGainNode.gain.value = dbtoa(preFxGain);\n                    const postFxGainNode = offlineAudioCtx.createGain();\n                    postFxGainNode.gain.value = dbtoa(postFxGain);\n                    source.connect(preFxGainNode);\n                    let lastNode: AudioNode = preFxGainNode;\n                    for (const plugin of plugins) {\n                        if (!plugin) continue;\n                        if (!pluginsEnabled.has(plugin)) continue;\n                        onUpdate(plugin.name);\n                        try {\n                            const Plugin = Object.getPrototypeOf(plugin).constructor as typeof WebAudioModule;\n                            const p = await Plugin.createInstance(offlineAudioCtx);\n                            await p.audioNode.setParameterValues(await plugin.audioNode.getParameterValues());\n                            lastNode.connect(p.audioNode);\n                            lastNode = p.audioNode;\n                        } catch (e) {\n                            continue;\n                        }\n                    }\n                    lastNode.connect(postFxGainNode);\n                    postFxGainNode.connect(offlineAudioCtx.destination);\n                });\n            } else {\n                source.connect(offlineAudioCtx.destination);\n            }\n            source.start(0);\n            return this.env.taskMgr.newTask(this, \"Applying plugins...\", async () => {\n                const bufferOut = await offlineAudioCtx.startRendering();\n                return PatcherAudio.fromNativeAudioBuffer({ env: this.env, project: this.project, file: this.file }, bufferOut);\n            });\n        });\n    }\n    setCursor(cursor: number) {\n        this.emit(\"cursor\", cursor);\n    }\n    setSelRange(range: [number, number]) {\n        this.emit(\"selRange\", range);\n    }\n    setSelRangeToAll() {\n        this.emit(\"selRange\", [0, this.length]);\n    }\n}\n","import { TypedMessageEvent, MessagePortResponse, MessagePortRequest } from \"./TypedAudioWorklet\";\nimport { AudioWorkletProxyNode } from \"./AudioWorkletProxyNode.types\";\n\nconst Node = class extends AudioWorkletNode {\n    static get fnNames(): string[] {\n        return [];\n    }\n    _disposed = false;\n    constructor(context: AudioContext, name: string, options?: AudioWorkletNodeOptions) {\n        super(context, name, options);\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = 1;\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: TypedMessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) {\n                    if (rejects[id]) rejects[id](error);\n                    delete rejects[id];\n                    return;\n                }\n                if (resolves[id]) {\n                    resolves[id](value);\n                    delete resolves[id];\n                }\n            }\n        };\n        // eslint-disable-next-line\n        const call = (call: string, ...args: any[]) => {\n            return new Promise<any>((resolve, reject) => {\n                const id = messagePortRequestId++;\n                resolves[id] = resolve;\n                rejects[id] = reject;\n                this.port.postMessage({ id, call, args });\n            });\n        };\n        const Ctor = (this.constructor as typeof AudioWorkletProxyNode);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyNode;\n\nexport default Node;\n","export const registeredProcessors: WeakMap<AudioWorklet, Set<string>> = window.jspatcherEnv?.AudioWorkletRegister?.registeredProcessors || new WeakMap();\nexport const registeringProcessors: WeakMap<AudioWorklet, Set<string>> = window.jspatcherEnv?.AudioWorkletRegister?.registeringProcessors || new WeakMap();\nexport const resolves: Record<string, ((value?: void | PromiseLike<void>) => void)[]> = window.jspatcherEnv?.AudioWorkletRegister?.resolves || {};\nexport const rejects: Record<string, ((reason?: any) => void)[]> = window.jspatcherEnv?.AudioWorkletRegister?.rejects || {};\n\nexport default class AudioWorkletRegister {\n    static registeredProcessors = registeredProcessors;\n\n    static registeringProcessors = registeringProcessors;\n\n    static resolves = resolves;\n\n    static rejects = rejects;\n\n    private static async registerProcessor(audioWorklet: AudioWorklet, processorId: string, processor: string | ((id: string, ...injections: any[]) => void), ...injection: any[]) {\n        this.registeringProcessors.get(audioWorklet).add(processorId);\n        try {\n            const url = typeof processor === \"string\" ? processor : URL.createObjectURL(new Blob([`(${processor.toString()})(${[processorId, ...injection].map(JSON.stringify as (arg: any) => string).join(\", \")});`], { type: \"text/javascript\" }));\n            await audioWorklet.addModule(url);\n            this.resolves[processorId].forEach(f => f());\n            this.registeringProcessors.get(audioWorklet).delete(processorId);\n            this.registeredProcessors.get(audioWorklet).add(processorId);\n        } catch (e) {\n            this.rejects[processorId].forEach(f => f(e));\n        }\n        this.rejects[processorId] = [];\n        this.resolves[processorId] = [];\n    }\n\n    static async register(audioWorklet: AudioWorklet, processorId: string, processor: string | ((id: string, ...injections: any[]) => void), ...injection: any[]) {\n        if (!this.resolves[processorId]) this.resolves[processorId] = [];\n        if (!this.rejects[processorId]) this.rejects[processorId] = [];\n        const promise = new Promise<void>((resolve, reject) => {\n            this.resolves[processorId].push(resolve);\n            this.rejects[processorId].push(reject);\n        });\n        if (!this.registeringProcessors.has(audioWorklet)) {\n            this.registeringProcessors.set(audioWorklet, new Set());\n        }\n        if (!this.registeredProcessors.has(audioWorklet)) {\n            this.registeredProcessors.set(audioWorklet, new Set());\n        }\n        const registered = this.registeredProcessors.get(audioWorklet).has(processorId);\n        const registering = this.registeringProcessors.get(audioWorklet).has(processorId);\n        if (registered) return Promise.resolve();\n        if (registering) return promise;\n        if (!registered && audioWorklet) {\n            this.registerProcessor(audioWorklet, processorId, processor, ...injection);\n        }\n        return promise;\n    }\n}\n","import processorURL from \"./TemporalAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ITemporalAnalyserNode, ITemporalAnalyserProcessor, TemporalAnalyserParameters } from \"./TemporalAnalyserWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorId = \"__JSPatcher_TemporalAnalyser\";\nexport default class TemporalAnalyserNode extends AudioWorkletProxyNode<ITemporalAnalyserNode, ITemporalAnalyserProcessor, TemporalAnalyserParameters> implements ITemporalAnalyserNode {\n    static processorId = processorId;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorId, processorURL);\n    static fnNames: (keyof ITemporalAnalyserProcessor)[] = [\"getRms\", \"getAbsMax\", \"getZcr\", \"getEstimatedFreq\", \"getBuffer\", \"gets\", \"destroy\"];\n    constructor(context: BaseAudioContext) {\n        super(context, processorId, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n}\n","import processorURL from \"./Transmitter.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ITransmitterNode, ITransmitterProcessor, TransmitterParameters } from \"./TransmitterWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorId = \"__JSPatcher_Transmitter\";\nexport default class TransmitterNode extends AudioWorkletProxyNode<ITransmitterNode, ITransmitterProcessor, TransmitterParameters> implements ITransmitterNode {\n    static processorId = processorId;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorId, processorURL);\n    static fnNames: (keyof ITransmitterProcessor)[] = [\"start\", \"stop\", \"reset\", \"destroy\"];\n    handleReceiveBuffer: (buffer: Float32Array[], $total: number) => any;\n    constructor(context: BaseAudioContext) {\n        super(context, processorId, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n    setBuffer({ buffer, $total }: { buffer: Float32Array[]; $total: number }) {\n        if (this.handleReceiveBuffer) this.handleReceiveBuffer(buffer, $total);\n    }\n}\n","import PatcherAudio from \"../core/audio/PatcherAudio\";\nimport { WaveformData, WaveformStepData } from \"../core/types\";\nimport WaveformWorker from \"../core/workers/WaveformWorker\";\n\nexport default class Waveform implements WaveformData {\n    static stepsFactor = 16;\n    [step: number]: WaveformStepData;\n    private readonly worker: WaveformWorker;\n    private _patcherAudio: PatcherAudio;\n    get patcherAudio() {\n        return this._patcherAudio;\n    }\n    set patcherAudio(audio: PatcherAudio) {\n        this._patcherAudio = audio;\n    }\n    get audioBuffer() {\n        return this.patcherAudio.audioBuffer;\n    }\n    get length() {\n        return this.audioBuffer.length;\n    }\n    get steps() {\n        return Object.keys(this).filter(v => +v).map(v => +v).sort((a, b) => a - b);\n    }\n\n    constructor(patcherAudioIn: PatcherAudio, waveformDataIn?: WaveformData) {\n        this.worker = patcherAudioIn.env.waveformWorker;\n        this.patcherAudio = patcherAudioIn;\n        if (!waveformDataIn) return;\n        Object.keys(waveformDataIn).filter(v => +v).map(v => +v).forEach((stepLength) => {\n            const stepData = waveformDataIn[stepLength];\n            this[stepLength] = [];\n            const newStepData = this[stepLength];\n            if (stepData.length) newStepData.idx = stepData.idx.slice();\n            for (let c = 0; c < stepData.length; c++) {\n                const { min, max } = stepData[c];\n                newStepData[c] = { min: min.slice(), max: max.slice() };\n            }\n        });\n    }\n    clone() {\n        return new Waveform(this.patcherAudio, this);\n    }\n    async generate() {\n        const audioChannelData = this.audioBuffer.toArray(true);\n        const data = await this.worker.generate(audioChannelData, Waveform.stepsFactor);\n        for (const key in data) {\n            this[key] = data[key];\n        }\n    }\n    generateEmpty(numberOfChannels: number, l: number) {\n        const { stepsFactor } = Waveform;\n        for (let stepLength = stepsFactor; stepLength <= l / stepsFactor; stepLength *= stepsFactor) {\n            const stepData: WaveformStepData = [];\n            this[stepLength] = stepData;\n            const stepsCount = Math.ceil(l / stepLength);\n            const idxData = new Int32Array(stepsCount);\n            for (let i = 0; i < idxData.length; i++) {\n                idxData[i] = i * stepLength;\n            }\n            stepData.idx = idxData;\n            for (let c = 0; c < numberOfChannels; c++) {\n                const minData = new Float32Array(stepsCount);\n                const maxData = new Float32Array(stepsCount);\n                stepData[c] = { min: minData, max: maxData };\n            }\n        }\n    }\n    generateStep(stepLength: number) {\n        const { stepsFactor } = Waveform;\n        const { audioBuffer: buffer } = this;\n        if (!this[stepLength]) this[stepLength] = [];\n        const l = buffer.length;\n        let maxInStep;\n        let minInStep;\n        if (stepLength === stepsFactor) { // recalculate from samples\n            const stepsCount = Math.ceil(l / stepLength);\n            const idxData = new Int32Array(stepsCount);\n            for (let i = 0; i < idxData.length; i++) {\n                idxData[i] = i * stepLength;\n            }\n            this[stepLength].idx = idxData;\n            for (let c = 0; c < buffer.numberOfChannels; c++) {\n                const minData = new Float32Array(stepsCount);\n                const maxData = new Float32Array(stepsCount);\n                const channel = buffer.getChannelData(c);\n                for (let i = 0; i < idxData.length; i++) {\n                    const $0 = idxData[i];\n                    const $1 = i === idxData.length - 1 ? l : idxData[i + 1];\n                    for (let j = $0; j < $1; j++) {\n                        const samp = channel[j];\n                        if (j === $0) {\n                            maxInStep = samp;\n                            minInStep = samp;\n                        } else {\n                            if (samp > maxInStep) maxInStep = samp;\n                            if (samp < minInStep) minInStep = samp;\n                        }\n                    }\n                    minData[i] = minInStep;\n                    maxData[i] = maxInStep;\n                }\n                this[stepLength][c] = { min: minData, max: maxData };\n            }\n        } else { // calculate from lower level\n            const { idx: prevIdx } = this[stepLength / stepsFactor];\n            const stepsCount = Math.ceil(prevIdx.length / 16);\n            const idxData = new Int32Array(stepsCount);\n            for (let i = 0; i < idxData.length; i++) {\n                idxData[i] = prevIdx[i * stepsFactor];\n            }\n            this[stepLength].idx = idxData;\n            for (let c = 0; c < buffer.numberOfChannels; c++) {\n                const minData = new Float32Array(stepsCount);\n                const maxData = new Float32Array(stepsCount);\n                const { min: prevMin, max: prevMax } = this[stepLength / stepsFactor][c];\n                for (let i = 0; i < idxData.length; i++) {\n                    const $prev0 = i * stepsFactor;\n                    const $prev1 = i === idxData.length - 1 ? prevIdx.length : ((i + 1) * stepsFactor);\n                    for (let j = $prev0; j < $prev1; j++) {\n                        const sampMax = prevMax[j];\n                        const sampMin = prevMin[j];\n                        if (j === $prev0) {\n                            maxInStep = sampMax;\n                            minInStep = sampMin;\n                        } else {\n                            if (sampMax > maxInStep) maxInStep = sampMax;\n                            if (sampMin < minInStep) minInStep = sampMin;\n                        }\n                    }\n                    minData[i] = minInStep;\n                    maxData[i] = maxInStep;\n                }\n                this[stepLength][c] = { min: minData, max: maxData };\n            }\n        }\n        return this[stepLength];\n    }\n    update(from = 0, to = this.audioBuffer.length) {\n        const { stepsFactor } = Waveform;\n        const { audioBuffer: buffer } = this;\n        const l = buffer.length;\n        for (let stepLength = stepsFactor; stepLength <= l / stepsFactor; stepLength *= stepsFactor) {\n            let stepData: WaveformStepData;\n            if (this[stepLength]) {\n                stepData = this[stepLength];\n                let { idx: idxData } = stepData;\n                // check if need expansion\n                let expand = 0;\n                const oldLength = idxData[idxData.length - 1] + stepLength;\n                if (l > oldLength) {\n                    expand = Math.ceil((l - oldLength) / stepLength);\n                    const newLength = idxData.length + expand;\n                    const newIdxData = new Int32Array(newLength);\n                    newIdxData.set(idxData);\n                    for (let i = idxData.length, j = oldLength; i < newIdxData.length; i++, j += stepLength) {\n                        newIdxData[i] = j;\n                    }\n                    idxData = newIdxData;\n                }\n                stepData.idx = idxData;\n                for (let c = 0; c < buffer.numberOfChannels; c++) {\n                    const samples = buffer.getChannelData(c);\n                    let { min: minData, max: maxData } = stepData[c];\n                    if (expand) {\n                        const min = new Float32Array(idxData.length);\n                        const max = new Float32Array(idxData.length);\n                        min.set(minData);\n                        max.set(maxData);\n                        minData = min;\n                        maxData = max;\n                        stepData[c] = { min: minData, max: maxData };\n                    }\n                    // index range to rebuild data\n                    let $from: number;\n                    let $to: number;\n                    for (let i = 1; i <= idxData.length; i++) {\n                        const $ = i === idxData.length ? l : idxData[i];\n                        if (typeof $from === \"undefined\" && $ > from) {\n                            $from = i - 1;\n                        }\n                        if (typeof $to === \"undefined\" && $ >= to) {\n                            $to = i;\n                            break;\n                        }\n                    }\n                    let maxInStep;\n                    let minInStep;\n                    if (stepLength === stepsFactor) { // recalculate from samples\n                        for (let i = $from; i < $to; i++) {\n                            const $0 = idxData[i];\n                            const $1 = i === idxData.length - 1 ? l : idxData[i + 1];\n                            for (let j = $0; j < $1; j++) {\n                                const samp = samples[j];\n                                if (j === $0) {\n                                    maxInStep = samp;\n                                    minInStep = samp;\n                                } else {\n                                    if (samp > maxInStep) maxInStep = samp;\n                                    if (samp < minInStep) minInStep = samp;\n                                }\n                            }\n                            minData[i] = minInStep;\n                            maxData[i] = maxInStep;\n                        }\n                    } else {\n                        const { idx: prevIdx } = this[stepLength / stepsFactor];\n                        const { min: prevMin, max: prevMax } = this[stepLength / stepsFactor][c];\n                        for (let i = $from; i < $to; i++) {\n                            let $prev0 = Math.min(prevIdx.length - 1, i * stepsFactor);\n                            const idx0 = idxData[i];\n                            if (prevIdx[$prev0] < idx0) {\n                                do {\n                                    $prev0++;\n                                } while ($prev0 < prevIdx.length - 1 && prevIdx[$prev0] < idx0);\n                            } else if (prevIdx[$prev0] > idx0) {\n                                do {\n                                    $prev0--;\n                                } while ($prev0 > 0 && prevIdx[$prev0] > idx0);\n                            }\n                            let $prev1;\n                            if (i === idxData.length - 1) {\n                                $prev1 = prevIdx.length;\n                            } else {\n                                $prev1 = Math.min(prevIdx.length, (i + 1) * stepsFactor);\n                                const idx1 = idxData[i + 1];\n                                if (prevIdx[$prev1] < idx1) {\n                                    do {\n                                        $prev1++;\n                                    } while ($prev1 < prevIdx.length && prevIdx[$prev1] < idx1);\n                                } else if (prevIdx[$prev1] > idx1) {\n                                    do {\n                                        $prev1--;\n                                    } while ($prev1 > 1 && prevIdx[$prev1] > idx1);\n                                }\n                            }\n                            for (let j = $prev0; j < $prev1; j++) {\n                                const sampMin = prevMin[j];\n                                const sampMax = prevMax[j];\n                                if (j === $prev0) {\n                                    maxInStep = sampMax;\n                                    minInStep = sampMin;\n                                } else {\n                                    if (sampMax > maxInStep) maxInStep = sampMax;\n                                    if (sampMin < minInStep) minInStep = sampMin;\n                                }\n                            }\n                            minData[i] = minInStep;\n                            maxData[i] = maxInStep;\n                        }\n                    }\n                }\n            } else {\n                this.generateStep(stepLength);\n            }\n        }\n    }\n    inverse() {\n        this.steps.forEach((stepLength) => {\n            const stepData = this[stepLength];\n            for (let c = 0; c < stepData.length; c++) {\n                const { min, max } = stepData[c];\n                for (let i = 0; i < min.length; i++) {\n                    const $max = -min[i];\n                    const $min = -max[i];\n                    min[i] = $min;\n                    max[i] = $max;\n                }\n            }\n        });\n    }\n    reverse() {\n        this.steps.forEach((stepLength) => {\n            const stepData = this[stepLength];\n            if (stepData.length) {\n                const { idx } = stepData;\n                idx.reverse();\n                for (let i = 0; i < idx.length; i++) {\n                    idx[i] = length - idx[i];\n                }\n                idx.set(idx.subarray(0, -1), 1);\n                idx[0] = 0;\n            }\n            for (let c = 0; c < stepData.length; c++) {\n                const { min, max } = stepData[c];\n                min.reverse();\n                max.reverse();\n            }\n        });\n    }\n    /**\n     * Returns a new Waveform instance concatenating this and another waveform\n     *\n     * @param {Waveform} that waveform to concat\n     * @param {PatcherAudio} patcherAudio result PatcherAudio\n     * @param {number} [numberOfChannels=patcherAudio.audioBuffer.numberOfChannels] number of channels\n     */\n    concat(that: Waveform, patcherAudio: PatcherAudio, numberOfChannels: number = patcherAudio.audioBuffer.numberOfChannels) {\n        const { stepsFactor } = Waveform;\n        const { length: l } = patcherAudio.audioBuffer;\n        const from = this.length;\n        const waveform = new Waveform(patcherAudio);\n        for (let stepLength = stepsFactor; stepLength <= l / stepsFactor; stepLength *= stepsFactor) {\n            const stepData: WaveformStepData = [];\n            let stepData1 = this[stepLength];\n            let stepData2 = that[stepLength];\n            waveform[stepLength] = stepData;\n            if (!stepData1) { // recalculate data1\n                stepData1 = this.generateStep(stepLength);\n            }\n            if (!stepData2) { // recalculate data2\n                stepData2 = that.generateStep(stepLength);\n            }\n            const { idx: idxData1 } = stepData1;\n            const { idx: idxData2 } = stepData2;\n            const idxData = new Int32Array(idxData1.length + idxData2.length);\n            idxData.set(idxData1);\n            idxData.set(idxData2, idxData1.length);\n            for (let j = idxData1.length; j < idxData.length; j++) {\n                idxData[j] += from;\n            }\n            stepData.idx = idxData;\n            for (let c = 0; c < numberOfChannels; c++) {\n                const { min: minData1, max: maxData1 } = stepData1[c] || {};\n                const { min: minData2, max: maxData2 } = stepData2[c] || {};\n                const minData = new Float32Array(idxData1.length + idxData2.length);\n                const maxData = new Float32Array(idxData1.length + idxData2.length);\n                if (minData1) minData.set(minData1);\n                if (minData2) minData.set(minData2, idxData1.length);\n                if (maxData1) maxData.set(maxData1);\n                if (maxData2) maxData.set(maxData2, idxData1.length);\n                stepData[c] = { min: minData, max: maxData };\n            }\n        }\n        return waveform;\n    }\n    /**\n     * Split this Waveform into two instances.\n     *\n     * @param {number} from Split point in sample\n     * @param {PatcherAudio} patcherAudio1 Splitted PatcherAudio 1\n     * @param {PatcherAudio} patcherAudio2 Splitted PatcherAudio 2\n     * @returns {[Waveform, Waveform]} Splitted Waveforms\n     */\n    split(from: number, patcherAudio1: PatcherAudio, patcherAudio2: PatcherAudio): [Waveform, Waveform] {\n        const { audioBuffer: buffer } = this;\n        const l = buffer.length;\n        if (from >= l || from <= 0) throw new RangeError(\"Split point is out of bound\");\n        const { audioBuffer: audioBuffer1 } = patcherAudio1;\n        const { audioBuffer: audioBuffer2 } = patcherAudio2;\n        // split waveform\n        const waveform1 = new Waveform(patcherAudio1);\n        const waveform2 = new Waveform(patcherAudio2);\n        const waveformKeys = this.steps;\n        for (let i = 0; i < waveformKeys.length; i++) {\n            const stepLength = waveformKeys[i];\n            const stepData = this[stepLength];\n            const stepData1: WaveformStepData = [];\n            const stepData2: WaveformStepData = [];\n            waveform1[stepLength] = stepData1;\n            waveform2[stepLength] = stepData2;\n            const { idx } = stepData;\n            let $data: number; // index of data to split from, next buffer index if split between\n            let splitBetween = false;\n            for (let i = 1; i <= idx.length; i++) {\n                const $ = i === idx.length ? l : idx[i];\n                if ($ >= from) {\n                    splitBetween = $ !== from;\n                    $data = i;\n                    break;\n                }\n            }\n            // split index data for every channel\n            let idxData1 = idx.slice();\n            let idxData2 = idx.slice();\n            if ($data !== idx.length) {\n                idxData1 = idxData1.subarray(0, $data);\n            }\n            if ($data - 1 !== 0) {\n                idxData2 = idxData2.subarray($data - +splitBetween);\n                for (let j = 0; j < idxData2.length; j++) {\n                    idxData2[j] = j === 0 ? 0 : idxData2[j] - from;\n                }\n            }\n            stepData1.idx = idxData1;\n            stepData2.idx = idxData2;\n            for (let c = 0; c < buffer.numberOfChannels; c++) {\n                // split data\n                let { min: minData1, max: maxData1 } = stepData[c];\n                if ($data !== idx.length) {\n                    minData1 = minData1.subarray(0, $data);\n                    maxData1 = maxData1.subarray(0, $data);\n                }\n                stepData1[c] = { min: minData1, max: maxData1 };\n                let { min: minData2, max: maxData2 } = stepData[c];\n                if ($data - 1 !== 0) {\n                    minData2 = minData2.subarray($data - +splitBetween);\n                    maxData2 = maxData2.subarray($data - +splitBetween);\n                }\n                stepData2[c] = { min: minData2, max: maxData2 };\n                // recalculate\n                if (splitBetween) {\n                    let maxInStep;\n                    let minInStep;\n                    if (i === 0) { // calculate from samples\n                        // ending of first part\n                        const channel1 = audioBuffer1.getChannelData(c);\n                        for (let j = idxData1[idxData1.length - 1]; j < from; j++) {\n                            const samp = channel1[j];\n                            if (j === 0) {\n                                maxInStep = samp;\n                                minInStep = samp;\n                            } else {\n                                if (samp > maxInStep) maxInStep = samp;\n                                if (samp < minInStep) minInStep = samp;\n                            }\n                        }\n                        minData1[idxData1.length - 1] = minInStep;\n                        maxData1[idxData1.length - 1] = maxInStep;\n                        // starting of second part\n                        const channel2 = audioBuffer2.getChannelData(c);\n                        for (let j = 0; j < (idxData2.length === 1 ? audioBuffer2.length : idxData2[1]); j++) {\n                            const samp = channel2[j];\n                            if (j === 0) {\n                                maxInStep = samp;\n                                minInStep = samp;\n                            } else {\n                                if (samp > maxInStep) maxInStep = samp;\n                                if (samp < minInStep) minInStep = samp;\n                            }\n                        }\n                        minData2[0] = minInStep;\n                        maxData2[0] = maxInStep;\n                    } else { // calculate from lower level\n                        const { idx: prevIdx1 } = waveform1[waveformKeys[i - 1]];\n                        const { min: prevMin1, max: prevMax1 } = waveform1[waveformKeys[i - 1]][c];\n                        // ending of first part\n                        let $prev1 = prevIdx1.length - 1;\n                        const idx1 = idxData1[idxData1.length - 1];\n                        while (prevIdx1[$prev1] > idx1) {\n                            $prev1--;\n                        }\n                        for (let k = $prev1; k < prevIdx1.length; k++) {\n                            const sampMax = prevMax1[k];\n                            const sampMin = prevMin1[k];\n                            if (k === $prev1) {\n                                maxInStep = sampMax;\n                                minInStep = sampMin;\n                            } else {\n                                if (sampMax > maxInStep) maxInStep = sampMax;\n                                if (sampMin < minInStep) minInStep = sampMin;\n                            }\n                        }\n                        minData1[idxData1.length - 1] = minInStep;\n                        maxData1[idxData1.length - 1] = maxInStep;\n                        const { idx: prevIdx2 } = waveform2[waveformKeys[i - 1]];\n                        const { min: prevMin2, max: prevMax2 } = waveform2[waveformKeys[i - 1]][c];\n                        // starting of second part\n                        let $prev2 = 1;\n                        if (idxData2.length > 1) {\n                            const idx2 = idxData2[1];\n                            while (prevIdx2[$prev2] < idx2) {\n                                $prev2++;\n                            }\n                        }\n                        for (let k = 0; k < $prev2; k++) {\n                            const sampMax = prevMax2[k];\n                            const sampMin = prevMin2[k];\n                            if (k === $prev2) {\n                                maxInStep = sampMax;\n                                minInStep = sampMin;\n                            } else {\n                                if (sampMax > maxInStep) maxInStep = sampMax;\n                                if (sampMin < minInStep) minInStep = sampMin;\n                            }\n                        }\n                        minData2[0] = minInStep;\n                        maxData2[0] = maxInStep;\n                    }\n                }\n            }\n        }\n        return [waveform1, waveform2];\n    }\n    /**\n     * Find an existing waveform with a precision (could be samples per pixel)\n     * returning a waveform that is sufficient to the precision.\n     * (step is the largest value smaller than the precision)\n     */\n    findStep(precision: number) {\n        const key = this.steps.reduce<number>((acc, cur) => (cur < precision && cur > (acc || 0) ? cur : acc), undefined);\n        if (!key) return null;\n        return this[key];\n    }\n}\n","import { isNumberArray } from \"./utils\";\n\n/**\n * Mod support wrapping with negative numbers\n */\nexport const mod = (x: number, y: number): number => (x % y + y) % y;\n/**\n * Round a number to multiple of another\n */\nexport const round = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.round(x * (1 / to)) / (1 / to) : Math.round(x / to) * to);\n/**\n * Floor a number to multiple of another\n */\nexport const floor = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.floor(x * (1 / to)) / (1 / to) : Math.floor(x / to) * to);\n/**\n * Ceil a number to multiple of another\n */\nexport const ceil = (x: number, to: number): number => (Math.abs(to) < 1 ? Math.ceil(x * (1 / to)) / (1 / to) : Math.ceil(x / to) * to);\n/**\n * Degree to radian\n */\nexport const toRad = (degrees: number): number => degrees * Math.PI / 180;\n/**\n * MIDI note number to string\n */\nexport const toMIDI = (f: number): string => [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"][(f % 12 + 12) % 12] + Math.round(f / 12 - 2);\n/**\n * Linear amplitude ([0, 1]) to dB ([-Inf, 0])\n *\n * @param {number} a linear amplitude value\n * @returns {number} dB value\n */\nexport const atodb = (a: number): number => 20 * Math.log10(a);\n/**\n * dB ([-Inf, 0]) to Linear mplitude ([0, 1])\n *\n * @param {number} db dB value\n * @returns {number} linear amplitude value\n */\nexport const dbtoa = (db: number): number => 10 ** (db / 20);\n/**\n * De-scale a exponently scaled value\n *\n * @param {number} x normalized value to scale between ([0, 1])\n * @param {number} e exponent factor used to scale, 0 means linear, 1 does ** 1.5 curve\n * @returns {number} de-scaled value\n */\nexport const iNormExp = (x: number, e: number): number => Math.max(0, x) ** (1.5 ** -e);\n/**\n * Scale exponently a normalized value\n *\n * @param {number} x normalized value to scale between ([0, 1])\n * @param {number} e exponent factor, 0 means linear, 1 does ** 1.5 curve\n * @returns {number} scaled value\n */\nexport const normExp = (x: number, e: number): number => Math.max(0, x) ** (1.5 ** e);\n\nexport const scale = (x: number, l1: number, h1: number, l2: number, h2: number) => {\n    const r1 = h1 - l1;\n    const r2 = h2 - l2;\n    return (x - l1) / r1 * r2 + l2;\n};\n\nexport const scaleClip = (x: number, l1: number, h1: number, l2: number, h2: number) => Math.max(l2, Math.min(h2, scale(x, l1, h1, l2, h2)));\n\n// eslint-disable-next-line arrow-body-style\nexport const isIdentityMatrix = (x: number[][]) => {\n    return Array.isArray(x)\n    && x.every((row, i) => isNumberArray(row)\n    && row.length === x.length\n    && row.every((e, j) => e === (j === i ? 1 : 0)));\n};\n\nexport const identityMatrix = (dim: number) => new Array(dim).fill(undefined).map((x, i) => new Array(dim).fill(undefined).map((y, j) => +(i === j)));\n","module.exports = __webpack_public_path__ + \"js/7ae8201faea4de318b7a.worklet.js\";","module.exports = __webpack_public_path__ + \"js/2da973d99ed3f3263f1b.worklet.js\";"],"names":["dbtoa","AudioPlayer","AudioRecorder","FileEditor","TempAudioFile","AudioEditor","playing","monitoring","loop","recording","cursor","selRange","viewRange","enabledChannels","plugins","Array","fill","undefined","pluginsEnabled","WeakSet","pluginsShowing","preFxGain","postFxGain","state","length","numberOfChannels","setCursor","setSelRange","setViewRange","slice","forEach","v","i","setState","emit","deviceId","recorder","newSearch","player","startMonitoring","fromProjectItem","file","env","project","instanceId","audio","data","instantiate","editor","init","fileExtension","fileIcon","clipboard","audioClipboard","ctx","instance","audioCtx","sampleRate","audioBuffer","waveform","isReady","Promise","resolve","reject","handleReady","off","on","handleSetAudio","taskMgr","newTask","_isReady","Object","assign","onUiResized","emitPluginsChanged","map","p","has","emitUIResized","emitSelRangeToPlay","zoomH","refIn","factor","viewStart","viewEnd","viewLength","minRange","Math","min","ref","max","round","start","end","range","multiplier","scrollH","speed","deltaSamples","setEnabledChannel","channel","enabled","setLoop","setRecording","cursorIn","fromPlayer","shouldReplay","stop","play","setSelRangeToAll","selectAll","deleteSelected","delete","setViewRangeToAll","cut","selStart","selEnd","removeFromRange","oldAudio","copy","pick","paste","pasteToRange","insertToCursor","silence","silenced","insertSilence","inserted","reverse","inverse","fade","gain","faded","fadeIn","exponent","fadeOut","resample","to","clone","render","setAudio","remixChannels","mix","applyPlugins","selected","every","setPluginEnabled","pause","resume","stopMonitoring","startRecord","started","stopRecord","addPlugin","url","index","removePlugin","movePlugin","fromIndex","toIndex","setPluginShowing","showing","plugin","add","setPreFxGain","preFxGainNode","setTargetAtTime","currentTime","setPostFxGain","postFxGainNode","destroy","History","AudioHistory","eventListening","undoOf","eventName","eventData","e","l","from","redoOf","TemporalAnalyserNode","destination","bufferSourceNode","updateCursor","getCurrentSample","scheduleUpdateCursor","constructor","loopIn","buffer","loopStart","loopEnd","Number","MAX_VALUE","currentSample","handlePlayerEnded","removeEventListener","handleEnded","disconnect","splitterNode","mergerNode","currentChannels","connect","$updateCursorRaf","updateCursorScheduled","requestAnimationFrame","updateCursorCallback","dummyAnalyserNode","createAnalyser","createGain","handleLoopChanged","handleSelRangeChanged","handleEnabledChannelsChanged","audioWorklet","register","postAnalyserNode","delta","offset","duration","createBufferSource","channelCountMode","channelInterpretation","channelCount","createChannelSplitter","createChannelMerger","value","connectPlugins","addEventListener","disconnectPlugins","sourceNode","node","mediaStreamSourceNode","firstPluginNode","lastPluginNode","audioNode","indexIn","default","Plugin","createInstance","usingPlugins","preNode","postNode","splice","push","fromIndexIn","toIndexIn","OperableAudioBuffer","PatcherAudio","TransmitterNode","echoCancellation","noiseSuppression","autoGainControl","devices","navigator","mediaDevices","enumerateDevices","enums","filter","d","kind","label","indexOf","device","find","bufferIn","$total","extended","$","$start","$end","inPlace","overwrittenAudio","$target","copyLength","newLength","ceil","log","newBuffer","getChannelData","set","overwrittenChannel","subarray","update","search","stream","getAudioTracks","t","getUserMedia","getConstraints","resetNode","transmitter","handleDeviceChange","handleReceiveBuffer","constraints","createMediaStreamSource","overwrittenBufferLength","fromSilence","reset","split","AudioBuffer","copyToChannel","j","concat","that","RangeError","buffer1","buffer2","channel1","channel2","copyFromChannel","write","Error","toArray","shared","supportSAB","SharedArrayBuffer","channelData","Float32Array","BYTES_PER_ELEMENT","isIdentityMatrix","normExp","FileInstance","Waveform","options","fromArrayBuffer","fromNativeAudioBuffer","setPrototypeOf","prototype","generate","optionsIn","generateEmpty","getEditor","onUpdate","byteLength","decodeAudioData","initWithOptions","initWith","serialize","bitDepth","float","audioData","wavEncoderWorker","encode","encodeFFmpegWorker","wav","inputFileName","outputFileName","args","ffmpegWorker","getFFmpeg","result","run","input","output","encodeMp3","bitrate","Uint8Array","encodeAac","patcherAudio","audio1","audio2","ab1","ab2","wf1","wf2","picked","p0","old","p1","p2","p3","c","lengthIn","sampleRateIn","pluginsOptions","needResample","needRemix","mixBuffer","mixChannel","k","offlineAudioCtx","OfflineAudioContext","source","lastNode","name","getPrototypeOf","setParameterValues","getParameterValues","bufferOut","startRendering","Node","AudioWorkletNode","fnNames","context","resolves","rejects","messagePortRequestId","handleDisposed","port","handleMessage","close","id","call","error","r","postMessage","_disposed","Ctor","registeredProcessors","window","jspatcherEnv","AudioWorkletRegister","WeakMap","registeringProcessors","registerProcessor","processorId","processor","get","injection","URL","createObjectURL","Blob","toString","JSON","stringify","join","type","addModule","f","promise","Set","registered","registering","processorURL","AudioWorkletProxyNode","numberOfInputs","numberOfOutputs","_destroy","setBuffer","_patcherAudio","steps","keys","sort","a","b","patcherAudioIn","waveformDataIn","worker","waveformWorker","stepLength","stepData","newStepData","idx","audioChannelData","stepsFactor","key","stepsCount","idxData","Int32Array","minData","maxData","generateStep","maxInStep","minInStep","$0","$1","samp","prevIdx","prevMin","prevMax","$prev0","$prev1","sampMax","sampMin","expand","oldLength","newIdxData","samples","$from","$to","idx0","idx1","$max","$min","stepData1","stepData2","idxData1","idxData2","minData1","maxData1","minData2","maxData2","patcherAudio1","patcherAudio2","audioBuffer1","audioBuffer2","waveform1","waveform2","waveformKeys","$data","splitBetween","prevIdx1","prevMin1","prevMax1","prevIdx2","prevMin2","prevMax2","$prev2","idx2","findStep","precision","reduce","acc","cur","isNumberArray","mod","x","y","abs","floor","toRad","degrees","PI","toMIDI","atodb","log10","db","iNormExp","scale","l1","h1","l2","h2","r1","r2","scaleClip","isArray","row","identityMatrix","dim"],"sourceRoot":""}