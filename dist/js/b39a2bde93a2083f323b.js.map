{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/Op.tsx"],"names":["JSOp","DefaultObject","JSUnaryOp","result","subscribe","on","inlets","outlets","state","data","inlet","isBang","constructor","execute","e","error","outlet","isHot","type","description","JSBinaryOp","arg","args","length","optional","default","JSTernaryOp","functions","Add","a","b","Sub","$Sub","Mul","Div","$Div","Exp","$Exp","Mod","$Mod","Inc","Dec","Eql","EqlS","NEql","NEqlS","Gtr","Geq","Lss","Leq","And","Or","Not","BAnd","BOr","BXor","BNot","BLS","BRS","BRSZ","Typeof","Instanceof","void","in","Ops","key","f","_name","typeof","instanceof"],"mappings":"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","file":"js/b39a2bde93a2083f323b.js","sourcesContent":["import { DefaultObject, isBang } from \"./Base\";\nimport { TMeta } from \"../types\";\n\nabstract class JSOp<S = {}, I extends any[] = any[], O extends any[] = [any], A extends any[] = any[], P = {}> extends DefaultObject<{}, S, I, O, A, P> {\n    static package = \"Op\";\n}\nclass JSUnaryOp extends JSOp<{ result: any }, [any]> {\n    static description = \"Unary Operation\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"First element\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    static execute: (a: any) => any;\n    state = { result: null as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"update\", () => this.state.result = 0);\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this.state.result = (this.constructor as typeof JSUnaryOp).execute(data);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this.state.result);\n            }\n        });\n    }\n}\n\nclass JSBinaryOp extends JSOp<{ arg: any; result: any }, [any, any], [any], [any]> {\n    static description = \"Binary Operation\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"First element\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"Second element\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"anything\",\n        optional: true,\n        default: 0,\n        description: \"Initial second element\"\n    }];\n    static execute: (a: any, b: any) => any;\n    state = { arg: 0 as any, result: 0 as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 1;\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.state.arg = 0;\n            this.state.result = 0;\n            if (!args || args.length === 0) return;\n            this.state.arg = args[0];\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this.state.result = (this.constructor as typeof JSBinaryOp).execute(data, this.state.arg);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this.state.result);\n            } else if (inlet === 1) {\n                this.state.arg = data;\n            }\n        });\n    }\n}\n\nclass JSTernaryOp extends JSOp<{ args: any[]; result: any }, [any, any, any], [any], [any, any]> {\n    static description = \"Ternary Operation\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Test\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"True output\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"False output\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"anything\",\n        optional: true,\n        default: true,\n        description: \"Initial true output\"\n    }, {\n        type: \"anything\",\n        optional: true,\n        default: false,\n        description: \"Initial false output\"\n    }];\n    state = { args: [true, false] as any[], result: true as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 3;\n            this.outlets = 1;\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.state.args = [true, false];\n            this.state.result = true;\n            if (!args || args.length === 0) return;\n            this.state.args[0] = args[0];\n            this.state.args[1] = args[1];\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this.state.result = data ? this.state.args[0] : this.state.args[1];\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this.state.result);\n            } else if (inlet === 1) {\n                this.state.args[0] = data;\n            } else if (inlet === 2) {\n                this.state.args[1] = data;\n            }\n        });\n    }\n}\nconst functions: Record<string, (...args: any[]) => any> = {\n    Add: (a: any, b: any) => a + b,\n    Sub: (a: any, b: any) => a - b,\n    $Sub: (a: any, b: any) => b - a,\n    Mul: (a: any, b: any) => a * b,\n    Div: (a: any, b: any) => a / b,\n    $Div: (a: any, b: any) => b / a,\n    Exp: (a: any, b: any) => a ** b,\n    $Exp: (a: any, b: any) => b ** a,\n    Mod: (a: any, b: any) => a % b,\n    $Mod: (a: any, b: any) => b % a,\n    Inc: (a: any) => ++a, // eslint-disable-line no-param-reassign\n    Dec: (a: any) => --a, // eslint-disable-line no-param-reassign\n    Eql: (a: any, b: any) => a == b, // eslint-disable-line eqeqeq\n    EqlS: (a: any, b: any) => a === b,\n    NEql: (a: any, b: any) => a != b, // eslint-disable-line eqeqeq\n    NEqlS: (a: any, b: any) => a !== b,\n    Gtr: (a: any, b: any) => a > b,\n    Geq: (a: any, b: any) => a >= b,\n    Lss: (a: any, b: any) => a < b,\n    Leq: (a: any, b: any) => a <= b,\n    And: (a: any, b: any) => a && b,\n    Or: (a: any, b: any) => a || b,\n    Not: (a: any) => !a,\n    BAnd: (a: any, b: any) => a & b,\n    BOr: (a: any, b: any) => a | b,\n    BXor: (a: any, b: any) => a ^ b,\n    BNot: (a: any) => ~a,\n    BLS: (a: any, b: any) => a << b,\n    BRS: (a: any, b: any) => a >> b,\n    BRSZ: (a: any, b: any) => a >>> b,\n    Typeof: (a: any) => typeof a,\n    Instanceof: (a: any, b: any) => a instanceof b,\n    void: (a: any) => void a, // eslint-disable-line no-void\n    in: (a: any, b: any) => a in b\n};\n\nconst Ops: Record<string, typeof JSUnaryOp | typeof JSBinaryOp> = {};\nfor (const key in functions) {\n    const f = functions[key];\n    if (f.length === 1) {\n        Ops[key] = class extends JSUnaryOp {\n            static get _name() { return key; }\n            static execute = f;\n        };\n    } else if (f.length === 2) {\n        Ops[key] = class extends JSBinaryOp {\n            static get _name() { return key; }\n            static execute = f;\n        };\n    }\n}\n\nexport default {\n    typeof: Ops.Typeof,\n    instanceof: Ops.Instanceof,\n    void: Ops.void,\n    in: Ops.in,\n    \"+\": Ops.Add,\n    \"-\": Ops.Sub,\n    \"!-\": Ops.$Sub,\n    \"*\": Ops.Mul,\n    \"/\": Ops.Div,\n    \"!/\": Ops.$Div,\n    \"**\": Ops.Exp,\n    \"!**\": Ops.$Exp,\n    \"%\": Ops.Mod,\n    \"!%\": Ops.Mod,\n    \"++\": Ops.Inc,\n    \"--\": Ops.Dec,\n    \"==\": Ops.Eql,\n    \"===\": Ops.EqlS,\n    \"!=\": Ops.NEql,\n    \"!==\": Ops.NEqlS,\n    \">\": Ops.Gtr,\n    \">=\": Ops.Geq,\n    \"<\": Ops.Lss,\n    \"<=\": Ops.Leq,\n    \"&&\": Ops.And,\n    \"||\": Ops.Or,\n    \"!\": Ops.Not,\n    \"&\": Ops.BAnd,\n    \"|\": Ops.BOr,\n    \"^\": Ops.BXor,\n    \"~\": Ops.BNot,\n    \"<<\": Ops.BLS,\n    \">>\": Ops.BRS,\n    \">>>\": Ops.BRSZ,\n    \"?\": JSTernaryOp\n};\n"],"sourceRoot":""}