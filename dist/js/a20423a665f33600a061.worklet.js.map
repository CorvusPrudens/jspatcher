{"version":3,"file":"js/a20423a665f33600a061.worklet.js","mappings":"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","sources":["webpack://JSPatcher/./src/core/worklets/AudioWorkletProxyProcessor.ts","webpack://JSPatcher/webpack/bootstrap","webpack://JSPatcher/webpack/runtime/define property getters","webpack://JSPatcher/webpack/runtime/hasOwnProperty shorthand","webpack://JSPatcher/webpack/runtime/make namespace object","webpack://JSPatcher/./src/core/worklets/GlobalTransportProcessor.worklet.ts"],"sourcesContent":["import { AudioWorkletGlobalScope, MessagePortRequest, MessagePortResponse, TypedMessageEvent } from \"./TypedAudioWorklet\";\nimport { AudioWorkletProxyProcessor } from \"./AudioWorkletProxyProcessor.types\";\n\ndeclare const globalThis: AudioWorkletGlobalScope;\nconst { AudioWorkletProcessor } = globalThis;\n\nconst Processor = class AudioWorkletProxyProcessor extends AudioWorkletProcessor {\n    static fnNames: string[] = [];\n    _disposed = false;\n    constructor(options: AudioWorkletNodeOptions) {\n        super(options);\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        let messagePortRequestId = -1;\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: TypedMessageEvent<MessagePortResponse & MessagePortRequest>) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r as any);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) {\n                    if (rejects[id]) rejects[id](error);\n                    delete rejects[id];\n                    return;\n                }\n                if (resolves[id]) {\n                    resolves[id](value);\n                    delete resolves[id];\n                }\n            }\n        };\n        const call = (call: string, ...args: any[]) => new Promise<any>((resolve, reject) => {\n            const id = messagePortRequestId--;\n            resolves[id] = resolve;\n            rejects[id] = reject;\n            this.port.postMessage({ id, call, args });\n        });\n        const Ctor = (this.constructor as typeof AudioWorkletProxyProcessor);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyProcessor;\n\nexport default Processor;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import AudioWorkletProxyProcessor from \"./AudioWorkletProxyProcessor\";\nimport type { AudioWorkletGlobalScope, TypedAudioParamDescriptor } from \"./TypedAudioWorklet\";\nimport type { GlobalTransportParameter, IGlobalTransportNode, IGlobalTransportProcessor } from \"./GlobalTransport.types\";\nimport type WorkletEnvProcessor from \"./WorkletEnv.worklet\";\n\nconst processorId = \"__JSPatcher_GlobalTransport\";\ndeclare const globalThis: AudioWorkletGlobalScope & { SharedArrayBuffer: typeof SharedArrayBuffer | typeof ArrayBuffer; Atomics: typeof Atomics };\nif (!globalThis.SharedArrayBuffer) globalThis.SharedArrayBuffer = ArrayBuffer;\nconst { registerProcessor, sampleRate, jspatcherEnv } = globalThis;\n\nexport default class GlobalTransportProcessor extends AudioWorkletProxyProcessor<IGlobalTransportProcessor, IGlobalTransportNode, GlobalTransportParameter> implements IGlobalTransportProcessor {\n    static fnNames: (keyof IGlobalTransportNode)[] = [\"updateTick\"];\n    static get parameterDescriptors(): TypedAudioParamDescriptor<GlobalTransportParameter>[] {\n        return [{\n            defaultValue: 0,\n            maxValue: 1,\n            minValue: 0,\n            name: \"playing\"\n        }, {\n            defaultValue: 120,\n            maxValue: 240,\n            minValue: 1,\n            name: \"tempo\"\n        }, {\n            defaultValue: 4,\n            maxValue: 128,\n            minValue: 1,\n            name: \"timeSigDenominator\"\n        }, {\n            defaultValue: 4,\n            maxValue: 128,\n            minValue: 1,\n            name: \"timeSigNumerator\"\n        }];\n    }\n    private destroyed = false;\n    private timeOffset = globalThis.currentTime;\n    tickOffset = 0;\n    private tempo = 60;\n    private currentTick = new Uint32Array(new SharedArrayBuffer(Uint32Array.BYTES_PER_ELEMENT));\n    private getSampsPerTick(tempo: number) {\n        const secondsPerBeat = 60 / tempo;\n        return secondsPerBeat * sampleRate / 240;\n    }\n    private getTickPerSamps(tempo: number) {\n        const ticksPerMinute = tempo * 240;\n        return ticksPerMinute / 60 / sampleRate;\n    }\n    constructor(options: AudioWorkletNodeOptions) {\n        super(options);\n        this.updateTick(this.currentTick);\n        (jspatcherEnv as WorkletEnvProcessor).globalTransport = this;\n    }\n    _getTick() {\n        return Atomics.load(this.currentTick, 0);\n    }\n    _setTick(tick: number) {\n        this.tickOffset = tick;\n        this.timeOffset = globalThis.currentTime;\n        Atomics.store(this.currentTick, 0, ~~this.tickOffset);\n        this.updateTick(this.currentTick);\n    }\n    getSamplesUntil(tick: number) {\n        return this.getSampsPerTick(this.tempo) * (tick - this.tickOffset);\n    }\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<GlobalTransportParameter, Float32Array>) {\n        if (this.destroyed) return false;\n        if (!parameters.playing[0]) return true;\n        const bufferSize = outputs[0][0].length;\n        let tick = 0;\n        if (parameters.tempo.length > 1) {\n            for (let i = 0; i < parameters.tempo.length; i++) {\n                const $tempo = parameters.tempo[i];\n                const $ticks = this.getTickPerSamps($tempo);\n                tick += $ticks;\n            }\n        } else {\n            const $tempo = parameters.tempo[0];\n            const $ticks = this.getTickPerSamps($tempo);\n            tick += $ticks * bufferSize;\n        }\n        this.tempo = parameters.tempo[parameters.tempo.length - 1];\n        this._setTick(this.tickOffset + tick);\n        return true;\n    }\n    destroy() {\n        this.destroyed = true;\n        this._disposed = true;\n    }\n}\n\ntry {\n    registerProcessor(processorId, GlobalTransportProcessor);\n} catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(error);\n}\n"],"names":[],"sourceRoot":""}