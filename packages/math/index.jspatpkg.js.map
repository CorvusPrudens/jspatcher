{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@electrosmith/package-math/../../../frontend/src/core/message.ts","webpack://@electrosmith/package-math/../../common/web/index.ts","webpack://@electrosmith/package-math/../../common/web/jsDspObject.ts","webpack://@electrosmith/package-math/../../common/web/jsDspProcessor.ts","webpack://@electrosmith/package-math/../../common/web/package-info.ts","webpack://@electrosmith/package-math/../../common/web/sdk.ts","webpack://@electrosmith/package-math/../../common/web/workletCreator.ts","webpack://@electrosmith/package-math/./src/index.ts","webpack://@electrosmith/package-math/./src/objects/block/base.ts","webpack://@electrosmith/package-math/./src/objects/block/binary.ts","webpack://@electrosmith/package-math/./src/objects/block/unary.ts","webpack://@electrosmith/package-math/./src/objects/dsp/abs.ts","webpack://@electrosmith/package-math/./src/objects/dsp/add.ts","webpack://@electrosmith/package-math/./src/objects/dsp/bp.ts","webpack://@electrosmith/package-math/./src/objects/dsp/delay.ts","webpack://@electrosmith/package-math/./src/objects/dsp/delayLine.ts","webpack://@electrosmith/package-math/./src/objects/dsp/div.ts","webpack://@electrosmith/package-math/./src/objects/dsp/exp.ts","webpack://@electrosmith/package-math/./src/objects/dsp/hip.ts","webpack://@electrosmith/package-math/./src/objects/dsp/log.ts","webpack://@electrosmith/package-math/./src/objects/dsp/lop.ts","webpack://@electrosmith/package-math/./src/objects/dsp/mul.ts","webpack://@electrosmith/package-math/./src/objects/dsp/ota.ts","webpack://@electrosmith/package-math/./src/objects/dsp/rev_div.ts","webpack://@electrosmith/package-math/./src/objects/dsp/rev_sub.ts","webpack://@electrosmith/package-math/./src/objects/dsp/sqrt.ts","webpack://@electrosmith/package-math/./src/objects/dsp/sub.ts","webpack://@electrosmith/package-math/./src/package-info.ts","webpack://@electrosmith/package-math/./src/sdk.ts","webpack://@electrosmith/package-math/webpack/bootstrap","webpack://@electrosmith/package-math/webpack/runtime/create fake namespace object","webpack://@electrosmith/package-math/webpack/runtime/define property getters","webpack://@electrosmith/package-math/webpack/runtime/hasOwnProperty shorthand","webpack://@electrosmith/package-math/webpack/runtime/make namespace object","webpack://@electrosmith/package-math/./src/index.jspatpkg.ts"],"sourcesContent":["import Bang from \"./objects/base/Bang\";\n\nexport type Token = number | string | Bang;\n\nexport class Message extends Array<Token> {\n    static from(tokens: Token[]) {\n        const newArr = new Message();\n\n        for (let i = 0; i < tokens.length; i++) {\n            newArr[i] = tokens[i];\n        }\n\n        return newArr;\n    }\n\n\n    startsWith(value: Token) {\n        if (this.length) {\n            return this[0] === value;\n        }\n        return false;\n    }\n\n    endsWith(value: Token) {\n        if (this.length) {\n            return this[this.length - 1] === value;\n        }\n        return false;\n    }\n\n    // Produces a function that iterates over two lists,\n    // performs the given operation on any pair of numbers,\n    // and returns the shortest collection between the two\n    arithmetic(op: (a: number, b: number) => number) {\n        return (other: Message) => {\n            const result = new Message();\n            const minLength = Math.min(this.length, other.length);\n\n            for (let i = 0; i < minLength; i++) {\n                if (typeof this[i] === 'number' && typeof other[i] === 'number') {\n                    result.push(op(this[i] as number, other[i] as number));\n                } else {\n                    result.push(this[i]);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\nexport function isMessage(value: any) {\n    return value instanceof Message;\n}\n\nexport function extractFirst(data: any) {\n    if (data instanceof Message || data instanceof Array) {\n        return data[0];\n    }\n\n    return data;\n}\n\nexport function extractFirstIfSingle(data: any) {\n    if ((data instanceof Message || data instanceof Array) && data.length === 1) {\n        return data[0];\n    }\n\n    return data;\n}\n","import packageInfo from \"./package-info\";\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\n\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\n\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\n\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;\n","import { author, name as package_name, version, description } from \"./index\";\nimport { Bang, DefaultObject, DefaultUI } from \"./sdk\";\nimport JsDspProcessor from \"./jsDspProcessor\";\nimport getJsWorkletProcessor from \"./workletCreator\";\n\nexport class JsWorkletManager {\n  static registered_modules: Set<string>;\n\n  private constructor() {}\n\n  static getSet(): Set<string> {\n    if (!JsWorkletManager.registered_modules) {\n      JsWorkletManager.registered_modules = new Set<string>();\n    }\n\n    return JsWorkletManager.registered_modules;\n  }\n\n  public static async addModule(audioCtx: any, name: string, url: string) {\n    let set = JsWorkletManager.getSet();\n    if (!set.has(name)) {\n      set.add(name);\n      await audioCtx.audioWorklet.addModule(url);\n    }\n  }\n}\n\nfunction extractFirst(data: any) {\n  if (data instanceof Array) {\n    return data[0];\n  }\n\n  return data;\n}\n\nexport function generateObject(\n  Processor: typeof JsDspProcessor,\n  name: string,\n  dependencies?: any[],\n  enums?: { name: string; item: any }[]\n) {\n  interface JsDspInternalState {\n    dspId: string;\n    merger: ChannelMergerNode;\n    node: AudioWorkletNode;\n    splitter: ChannelSplitterNode;\n    defaultInputs: number[];\n    constants: ConstantSourceNode[];\n    constantsConnected: boolean[];\n    argsOffset: number;\n  }\n\n  interface Props {\n    smoothInput: number;\n  }\n\n  let props = Processor.props;\n  for (const [key, value] of Object.entries(Processor.paramDescriptors)) {\n    props[key] = {\n      type: \"number\",\n      default: value.defaultValue,\n      description: value.description,\n      alwaysSerialize: value.alwaysSerialize,\n    };\n  }\n\n  return class JsDspObject<\n    S = {},\n    I extends [Bang | any, ...any[]] = [Bang],\n    O extends any[] = [],\n    A extends any[] = any[],\n    P = Partial<Props> & Record<string, any>\n  > extends DefaultObject<{}, S, I, O, A, P & Props> {\n    static package = package_name;\n    static author = author;\n    static version = version;\n    static description = Processor.description;\n    static inlets = Processor.inlets;\n    static outlets = Processor.outlets;\n    static args = Processor.args;\n    static props = props;\n    static docs = Processor.docs;\n    static helpFiles = Processor.helpFiles;\n\n    static UI = DefaultUI;\n    _: Partial<JsDspInternalState> = {\n      dspId: name,\n      defaultInputs: [],\n      constants: [],\n      constantsConnected: [],\n      argsOffset: Processor.argsOffset || 0,\n    };\n    get audioConnections() {\n      return this.inletLines\n        .map((set) => [...set].find((l) => !l.disabled && l.isConnectableByAudio))\n        .map((l) => !!l);\n    }\n    checkAndFillUnconnected() {\n      const { audioConnections } = this;\n      const { constants, constantsConnected } = this._;\n      if (!this.inlets) return;\n      for (let i = 0; i < this.inlets; i++) {\n        if (audioConnections[i] === constantsConnected[i]) continue;\n        const constant = constants[i];\n        if (audioConnections[i]) {\n          constant.offset.value = 0;\n        } else if (!audioConnections[i] && !constantsConnected[i]) {\n          constant.offset.value = this._.defaultInputs[i] || 0;\n        }\n        constantsConnected[i] = audioConnections[i];\n      }\n    }\n    updateParams() {\n      const { node } = this._;\n      if (!node) return;\n\n      for (const [name, param] of node.parameters) {\n        const value = this.getProp(name);\n        if (name in this.meta.props) param.setValueAtTime(value, 0);\n      }\n    }\n    subscribe() {\n      super.subscribe();\n      this.on(\"preInit\", () => {\n        const { inputs, outputs } = {\n          inputs: Processor.inlets.length,\n          outputs: Processor.outlets.length,\n        };\n        if (inputs) {\n          const merger = this.audioCtx.createChannelMerger(inputs);\n          this._.merger = merger;\n          for (let i = 0; i < inputs; i++) {\n            const constant = this.audioCtx.createConstantSource();\n            this._.constants[i] = constant;\n            constant.connect(merger, 0, i);\n            this._.constantsConnected[i] = false;\n          }\n        }\n        const splitter = this.audioCtx.createChannelSplitter(outputs);\n        this._.splitter = splitter;\n\n        this.inlets = inputs;\n        this.outlets = outputs;\n        this.disconnectAudio();\n        this.inletAudioConnections = this._.constants.map((node) => ({\n          node: node.offset,\n          index: 0,\n        }));\n        this.outletAudioConnections = new Array(outputs)\n          .fill(null)\n          .map((v, i) => ({ node: splitter, index: i }));\n        this.connectAudio();\n\n        // this._.defaultInputs = this.meta.args.map(arg => arg.default || 0);\n        for (let i = 0; i < this.inlets; i++) {\n          if (i >= this._.argsOffset) {\n            const arg = this.meta.args[i - this._.argsOffset];\n            if (arg) {\n              this._.defaultInputs[i] = arg.default ?? 0;\n            }\n          } else {\n            this._.defaultInputs[i] = 0;\n          }\n        }\n      });\n      this.on(\"postInit\", async () => {\n        // const { dspFactory, faustDspGenerator, dspId, constants, merger, splitter, argsOffset } = this._;\n        const { dspId, constants, merger, splitter, argsOffset } = this._;\n        const url = getJsWorkletProcessor(\n          Processor,\n          dspId,\n          this.audioCtx.sampleRate,\n          dependencies,\n          enums\n        );\n        await JsWorkletManager.addModule(this.audioCtx, dspId, url);\n\n        let attempts = 0;\n        let node;\n        while (true) {\n          try {\n            node = new AudioWorkletNode(this.audioCtx, dspId);\n            break;\n          } catch (e) {\n            attempts++;\n            await new Promise((r) => setTimeout(r, 10));\n            if (attempts >= 10) {\n              this.error(`Failed to create AudioWorkletNode for ${dspId}`);\n              return;\n            }\n          }\n        }\n        // const node = new AudioWorkletNode(this.audioCtx, dspId);\n        this._.node = node;\n        this.checkAndFillUnconnected();\n        merger?.connect(node);\n        node.connect(splitter);\n        constants.forEach((constant, i) => {\n          const argValue = this.args[i - argsOffset];\n          if (!this._.constantsConnected[i])\n            constant.offset.value =\n              typeof argValue === \"number\" ? +argValue : this._.defaultInputs[i] ?? 0;\n          constant.start();\n        });\n\n        // // Fill props with any audio params from the node, if they exist\n        // console.log(\"node.parameters\", node.parameters);\n\n        // let paramProps = {};\n\n        // for (const [name, param] of node.parameters) {\n        //   console.log(param);\n        //   if (name in this.meta.props) continue;\n\n        //   const { defaultValue } = param;\n\n        //   paramProps[name] = {\n        //     type: \"number\",\n        //     default: defaultValue || 0,\n        //     description: `Audio parameter ${name}`,\n        //   };\n        // }\n\n        // if (Object.keys(paramProps).length) {\n        //   let props = { ...this.meta.props, ...paramProps };\n        //   this.setMeta({\n        //     props,\n        //   });\n        // }\n\n        this.updateParams();\n      });\n      this.on(\"propsUpdated\", () => {\n        this.updateParams();\n      });\n      this.on(\"argsUpdated\", () => {\n        this._.constants.forEach((constant, i) => {\n          const argValue = +this.args[i - this._.argsOffset];\n          if (!this._.constantsConnected[i])\n            constant.offset.value =\n              typeof argValue === \"number\" ? +argValue : this._.defaultInputs[i] ?? 0;\n        });\n      });\n      this.on(\"inlet\", ({ inlet, data }) => {\n        // This is a blanket implementation that we may want to update in the future\n        const value = extractFirst(data);\n        if (typeof value === \"number\") {\n          if (this._.constants[inlet] && !this._.constantsConnected[inlet]) {\n            const constant = this._.constants[inlet];\n            constant.offset.value = constant.offset.value;\n            constant.offset.linearRampToValueAtTime(\n              value,\n              this.audioCtx.currentTime + this.getProp(\"smoothInput\")\n            );\n          }\n        }\n      });\n      this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\n      this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\n      this.on(\"destroy\", () => {\n        const { constants, merger, splitter, node } = this._;\n        constants.forEach((constant) => constant?.disconnect());\n        merger?.disconnect();\n        splitter?.disconnect();\n        node?.disconnect();\n        // node?.destroy();\n      });\n    }\n  };\n}\n","import { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport class JsParamDescriptor {\n    name: string;\n    automationRate?: \"a-rate\" | \"k-rate\";\n    minValue?: number;\n    maxValue?: number;\n    defaultValue?: number;\n    description?: string;\n}\n\nexport default class JsDspProcessor {\n\n    static paramDescriptors: Record<string, JsParamDescriptor> = {};\n    static description: string;\n\n    static inlets: IInletsMeta = [];\n    static outlets: IOutletsMeta = [];\n    static args: IArgsMeta = [];\n    static props: IPropsMeta = {\n        smoothInput: {\n            type: \"number\",\n            default: 0.00267,\n            description: \"Linear interpolation coefficient to block-rate input values in seconds\"\n        }\n    };\n    static argsOffset: number;\n    static docs: string;\n    static helpFiles: string[];\n\n    // static get parameterDescriptors() {\n    //     const params = [] as JsParamDescriptor[];\n    //     for (const name in this.paramDescriptors) {\n    //         params.push(this.paramDescriptors[name]);\n    //     }\n    //     return params;\n    // }\n\n    init(sampleRate: number) {\n\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n        return true;\n    }\n\n}\n","import * as JSON from \"./package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","import JsDspProcessor from \"./jsDspProcessor\";\n\nconst getJsWorkletProcessor = (\n  processor: typeof JsDspProcessor,\n  dspId: string,\n  sampleRate: number,\n  dependencies?: any[],\n  enums?: { name: string; item: any }[],\n): string => {\n  const inherited_string = processor\n    .toString()\n    .replace(/extends (.*?) {/, `extends ${JsDspProcessor.name} {`);\n\n  const js_enums = enums\n    ? enums.map((e) => `const ${e.name} = ${JSON.stringify(e.item)}`).join(\"\\n\")\n    : \"\";\n\n  const deps = dependencies\n    ? dependencies\n        .map((dep) => `const ${dep.name} = ${dep.toString()}`)\n        .join(\"\\n\")\n    : \"\";\n\n  const processorCode = `\n\n        ${js_enums}\n\n        ${deps}\n\n        const ParameterDescriptors = ${JSON.stringify(\n          processor.paramDescriptors,\n        )}\n\n        const ${JsDspProcessor.name} = ${JsDspProcessor.toString()}\n\n        const ProcessorClass = ${inherited_string}\n\n        class JsWorkletProcessor extends AudioWorkletProcessor {\n\n            constructor(options) {\n                super(options);\n                this.processor = new ProcessorClass();\n                this.processor.init(${sampleRate});\n            }\n\n            process(inputs, outputs, parameters) {\n                return this.processor.process(inputs, outputs, parameters);\n            }\n\n            static get parameterDescriptors() {\n                return Object.entries(ParameterDescriptors).map(([_, value]) => value);\n            }\n        }\n\n        // TODO -- fix already registered error\n        registerProcessor(\"${dspId}\", JsWorkletProcessor);\n\n    `;\n\n  // replace any webpack-style name spacing\n  const processorCodeCleaned = processorCode.replace(\n    /_.+?__WEBPACK_IMPORTED_MODULE_\\d+__\\./g,\n    \"\",\n  );\n  const url = URL.createObjectURL(\n    new Blob([processorCodeCleaned], { type: \"text/javascript\" }),\n  );\n  return url;\n};\n\nexport default getJsWorkletProcessor;\n","import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../../index\";\r\nimport { BaseObject } from \"../../sdk\";\r\n\r\nexport default class Op<I extends any[] = any[], O extends any[] = [any], A extends any[] = any[], P = {}> extends BaseObject<{}, {}, I, O, A, P> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import { isBang } from \"../../sdk\";\nimport Op from \"./base\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\n\nexport default class Binary extends Op<[any, any], [any], [any], Record<string, any>> {\n    static description = \"Binary Operation\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"First element\"\n    }, {\n        isHot: false,\n        type: \"anything\",\n        description: \"Second element\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"anything\",\n        optional: true,\n        default: 0,\n        description: \"Initial second element\"\n    }];\n\n    static props: IPropsMeta = {\n        forceInt: {\n            type: \"boolean\",\n            default: false,\n            description: \"Convert inputs and outputs to integers\"\n        }\n    };\n    prepareInput(input: any) {\n        const forceInt = this.getProp(\"forceInt\");\n        if (input instanceof Array && input.length == 1) {\n            const first = +extractFirst(input);\n            return forceInt ? Math.floor(first) : first;\n        }\n        return forceInt ? Math.floor(+input) : +input;\n    }\n    handleUpdateArgs(args: any[]) {\n        this._.arg = undefined;\n        this._.result = undefined;\n        if (!args || args.length === 0) return;\n        this._.arg = this.prepareInput(args[0]);\n    }\n    execute: (a: any, b: any) => any;\n    _ = { arg: this.args[0], result: undefined as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 2;\n            this.outlets = 1;\n            this.handleUpdateArgs(this.args);\n        });\n        this.on(\"updateArgs\", (args) => {\n            this.handleUpdateArgs(args);\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        const result = this.execute(this.prepareInput(data), this._.arg);\n                        this._.result = this.prepareInput(result);\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.result);\n            } else if (inlet === 1) {\n                this._.arg = this.prepareInput(data);\n            }\n        });\n    }\n}\n","import { extractFirst } from \"@jspatcher/jspatcher/src/core/message\";\nimport { isBang } from \"../../sdk\";\nimport Op from \"./base\";\nimport type { IInletsMeta, IOutletsMeta, IArgsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Unary extends Op<[any], [any], [any], Record<string, any>> {\n    static description = \"Unary Operation\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"First element\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"anything\",\n        description: \"Result\"\n    }];\n    static props: IPropsMeta = {\n        forceInt: {\n            type: \"boolean\",\n            default: false,\n            description: \"Convert inputs and outputs to integers\"\n        }\n    };\n    prepareInput(input: any) {\n        const forceInt = this.getProp(\"forceInt\");\n        if (input instanceof Array && input.length == 1) {\n            const first = +extractFirst(input);\n            return forceInt ? Math.floor(first) : first;\n        }\n        return forceInt ? Math.floor(+input) : +input;\n    }\n    execute: (a: any) => any;\n    _ = { result: undefined as any };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    try {\n                        this._.result = this.prepareInput(this.execute(this.prepareInput(data)));\n                    } catch (e) {\n                        this.error(e);\n                        return;\n                    }\n                }\n                this.outlet(0, this._.result);\n            }\n        });\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Abs extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        }\n       \n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n\n    static argsOffset: number = 0;\n    static docs: string = \"math/docs/abs~.html\";\n    static helpFiles: string[] = [\"math/help/abs~.bell\"];\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n       \n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = Math.abs(in1[i]); \n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Add extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/add~.html\";\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] + in2[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Bp extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio signal\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"center frequency\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"Q (controls bandwidth)\",\n            varLength: true\n        }\n\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial center frequency\",\n            default: 1000\n        },\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial q\",\n            default: 1\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/bp.html\";\n\n\n    sample_rate_: number;\n    x1_: number;\n    x2_: number;\n    coef1_: number;\n    coef2_: number;\n    gain_: number;\n    q_: number;\n    freq_: number;\n    f_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let inputStream = inputs[0][0];\n        let centerFrequency = inputs[0][1];\n        let q = inputs[0][2];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < inputStream.length; i++) {\n\n\n            // do coefficients\n\n            let r = 0.;\n            let oneminusr = 0.;\n            let omega = 0.;\n            let qcos = 0.\n\n            if (centerFrequency[i] < 0.001) {\n                centerFrequency[i] = 10.0;\n            }\n\n            if (q[i] < 0.) {\n                q[i] = 0.;\n            }\n\n            this.freq_ = centerFrequency[i];\n            this.q_ = q[i];\n\n            omega = centerFrequency[i] * (2.0 * Math.PI) / this.sample_rate_;\n\n            if (q[i] < 0.001) {\n                oneminusr = 1.0;\n            }\n            else {\n                oneminusr = omega / q[i];\n            }\n\n            if (oneminusr > 1.0) {\n                oneminusr = 1.0;\n            }\n\n            r = 1.0 - oneminusr;\n\n            if ((omega >= -(0.5 * Math.PI)) && (omega <= 0.5 * Math.PI)) {\n                let g = omega * omega;\n                qcos = (((g * g * g * (-1.0 / 720.0) + g * g * (1.0 / 24.0)) - g * 0.5) + 1);\n            }\n            else {\n                qcos = 0.;\n            }\n\n\n            this.coef1_ = 2.0 * qcos * r;\n            this.coef2_ = -r * r;\n            this.gain_ = 2 * oneminusr * (oneminusr + r * omega);\n\n            // perform calculations for output\n\n            let last = this.x1_;\n            let prev = this.x2_;\n            let coef1 = this.coef1_;\n            let coef2 = this.coef2_;\n            let gain = this.gain_;\n\n            let output = inputStream[i] + coef1 * last + coef2 * prev;\n\n            outputStream[i] = gain * output;\n\n            prev = last;\n            last = output;\n\n            this.x1_ = last;\n            this.x2_ = prev;\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n\n        this.sample_rate_ = sampleRate;\n        this.x1_ = 0.;\n        this.x2_ = 0.;\n        this.coef1_ = 0.;\n        this.coef2_ = 0.;\n        this.gain_ = 0.;\n        this.q_ = 0.;\n        this.freq_ = 0.;\n        this.f_ = 0.;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport {\n  IArgsMeta,\n  IInletsMeta,\n  IOutletsMeta,\n} from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nimport { DelayLine } from \"./delayLine\";\n\nexport default class Delay extends JsDspProcessor {\n  static inlets: IInletsMeta = [\n    {\n      isHot: true,\n      type: \"signal\",\n      description: \"audio signal\",\n      varLength: true,\n    },\n    {\n      isHot: true,\n      type: \"signal\",\n      description: \"delay time (milliseconds)\",\n      varLength: true,\n    },\n    {\n      isHot: true,\n      type: \"signal\",\n      description: \"feedback\",\n      varLength: true,\n    },\n  ];\n  static outlets: IOutletsMeta = [\n    {\n      type: \"signal\",\n      description: \"output\",\n      varLength: true,\n    },\n  ];\n  static args: IArgsMeta = [\n    {\n      type: \"number\",\n      optional: true,\n      description: \"initial delay time (milliseconds)\",\n      default: 300,\n    },\n    {\n      type: \"number\",\n      optional: true,\n      description: \"initial feedback (0-1)\",\n      default: 0.5,\n    },\n  ];\n  static paramDescriptors = {\n    maxDelayMs: {\n      name: \"maxDelayMs\",\n      automationRate: \"k-rate\",\n      defaultValue: 3000,\n      description: \"The maximum delay size in milliseconds.\",\n      alwaysSerialize: true,\n    },\n  };\n  static argsOffset: number = 1;\n  static docs: string = \"math/docs/delay.html\";\n  static helpFiles: string[] = [\"math/help/delay.bell\"];\n\n  sample_rate_: number;\n  max_delay_ms_: number;\n  line_size_: number;\n  line: DelayLine;\n\n  process(\n    inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: Record<string, Float32Array>,\n  ): boolean {\n    let inputStream = inputs[0][0];\n    let delaylength = inputs[0][1];\n    let feedback = inputs[0][2];\n    let outputStream = outputs[0][0];\n\n    const maxDelayMs = parameters[\"maxDelayMs\"];\n    if (maxDelayMs && maxDelayMs[0] !== this.max_delay_ms_) {\n      this.updateLineSize(maxDelayMs[0]);\n    }\n\n    for (let i = 0; i < inputStream.length; i++) {\n      const length = Math.max(delaylength[i], 0);\n\n      let sample = this.line.ReadWithDelay(\n        (length * this.sample_rate_) / 1000.0,\n      );\n\n      const fb = Math.min(Math.max(feedback[i], 0), 1);\n\n      this.line.Write(sample * fb + inputStream[i]);\n\n      outputStream[i] = sample;\n    }\n\n    return true;\n  }\n\n  init(sampleRate: number) {\n    this.sample_rate_ = sampleRate;\n    this.updateLineSize(3000);\n  }\n\n  updateLineSize(newDelay: number) {\n    this.max_delay_ms_ = newDelay;\n    this.line_size_ = Math.round(\n      (this.sample_rate_ * this.max_delay_ms_) / 1000,\n    );\n    this.line = new DelayLine(this.line_size_);\n  }\n}\n","export class DelayLine {\n  private frac: number;\n  private writePtr: number;\n  private delay: number;\n  private line: Array<number>;\n  private readonly maxSize: number;\n\n  constructor(maxSize: number) {\n    this.maxSize = maxSize;\n    this.line = new Array<number>(this.maxSize).fill(0 as any); // Initialize with zeros\n    this.Init();\n  }\n\n  Init() {\n    this.Reset();\n  }\n\n  Reset() {\n    this.line.fill(0 as any);\n    this.writePtr = 0;\n    this.delay = 1;\n  }\n\n  SetDelay(delay: number) {\n    const intDelay = Math.floor(delay);\n    this.frac = delay - intDelay;\n    this.delay = intDelay < this.maxSize ? intDelay : this.maxSize - 1;\n  }\n\n  Write(sample: number) {\n    this.line[this.writePtr] = sample;\n    this.writePtr = (this.writePtr - 1 + this.maxSize) % this.maxSize;\n  }\n\n  Read(): number {\n    const a = this.line[(this.writePtr + this.delay) % this.maxSize];\n    const b = this.line[(this.writePtr + this.delay + 1) % this.maxSize];\n    return (a + (b - a) * this.frac) as any;\n  }\n\n  ReadWithDelay(delay: number): number {\n    const delayIntegral = Math.floor(delay);\n    const delayFractional = delay - delayIntegral;\n    const a = this.line[(this.writePtr + delayIntegral) % this.maxSize];\n    const b = this.line[(this.writePtr + delayIntegral + 1) % this.maxSize];\n    return (a + (b - a) * delayFractional) as any;\n  }\n\n  ReadHermite(delay: number): number {\n    const delayIntegral = Math.floor(delay);\n    const delayFractional = delay - delayIntegral;\n\n    const t = this.writePtr + delayIntegral + this.maxSize;\n    const xm1 = this.line[(t - 1) % this.maxSize];\n    const x0 = this.line[t % this.maxSize];\n    const x1 = this.line[(t + 1) % this.maxSize];\n    const x2 = this.line[(t + 2) % this.maxSize];\n    const c = (x1 - xm1) * 0.5;\n    const v = x0 - x1;\n    const w = c + v;\n    const a = w + v + (x2 - x0) * 0.5;\n    const bNeg = w + a;\n    const f = delayFractional;\n    return (((a * f - bNeg) * f + c) * f + x0) as any;\n  }\n\n  Allpass(sample: number, delay: number, coefficient: number): number {\n    const read = this.line[(this.writePtr + delay) % this.maxSize];\n    const write = (sample + coefficient * read) as any;\n    this.Write(write);\n    return (-write * coefficient + read) as any;\n  }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Div extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/divide~.html\";\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] / in2[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Exp extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        }\n       \n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n\n    static argsOffset: number = 0;\n    static docs: string = \"math/docs/exp~.html\";\n    static helpFiles: string[] = [\"math/help/exp~.bell\"];\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n       \n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = Math.exp(in1[i]); \n        }\n\n        return true;\n    }\n}","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Hip extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio signal\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"rolloff frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"rolloff frequency\",\n            default: 100.\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/hip.html\";\n    static helpFiles: string[] = [\"math/help/hip~.bell\"];\n\n    sample_rate_: number;\n    hz_: number;\n    last_: number;\n    coef_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let inputStream = inputs[0][0];\n        let frequency = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        let last = 0.;\n        let coef = 0.;\n        let normal = 0.;\n        let newval = 0.;\n\n        for (let i = 0; i < inputStream.length; i++) {\n\n            this.hz_ = frequency[i];\n\n            if (this.hz_ < 0.) {\n                this.hz_ = 0.;\n            }\n\n            this.coef_ = 1 - (this.hz_ * (2 * Math.PI)) / this.sample_rate_;\n\n            if (this.coef_ < 0.) {\n                this.coef_ = 0.;\n            }\n            else if (this.coef_ > 1.) {\n                this.coef_ = 1.;\n            }\n\n            coef = this.coef_;\n            last = this.last_;\n\n            if (coef < 1) {\n\n                normal = 0.5 * (1 + coef);\n                newval = inputStream[i] + coef * last;\n\n                outputStream[i] = normal * (newval - last);\n\n                last = newval;\n                this.last_ = last;\n            }\n            else {\n                outputStream[i] = inputStream[i];\n                this.last_ = 0.;\n            }\n\n\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n\n        this.sample_rate_ = sampleRate;\n        this.hz_ = 0.;\n        this.coef_ = 0.;\n        this.last_ = 0.;\n\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Log extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true,\n        }\n\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 2.71828182\n        }\n    ]\n\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/log~.html\";\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n\n            if(in1[i] <= 0.) {\n\n                outputStream[i] = -1000.;\n            }\n\n            else if((in2[i] == 1) || (in2[i] <= 0.)) {\n\n                outputStream[i] = Math.log(in1[i]);\n            }\n\n            else {\n                outputStream[i] = Math.log(in1[i]) / Math.log(in2[i]);\n            }\n        }\n\n        return true;\n    }\n}","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Lop extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio signal\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"rolloff frequency\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"rolloff frequency\",\n            default: 1000\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/lop.html\";\n    static helpFiles: string[] = [\"math/help/lop~.bell\"];\n\n\n    sample_rate_: number;\n    conversion_: number;\n    last_: number;\n    hz_: number;\n    coef_: number;\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let inputStream = inputs[0][0];\n        let frequency = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        this.conversion_ = (2. * Math.PI) / this.sample_rate_;\n\n        let coef = 0.;\n        let feedback = 0.;\n        let last = this.last_;\n\n        for (let i = 0; i < inputStream.length; i++) {\n\n            last = this.last_;\n\n            if (frequency[i] != this.hz_) {\n\n                this.hz_ = frequency[i];\n                coef = frequency[i] * this.conversion_;\n\n                if (coef > 1) {\n                    coef = 1.;\n                }\n                else if (coef < 0) {\n                    coef = 0.;\n                }\n\n                this.coef_ = coef;\n\n            }\n            else {\n                coef = this.coef_;\n            }\n\n            feedback = 1. - coef;\n\n            last = coef * inputStream[i] + feedback * last;\n            outputStream[i] = last;\n\n            this.last_ = last;\n\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n\n        this.sample_rate_ = sampleRate;\n        this.conversion_ = 0.;\n        this.last_ = 0.;\n        this.hz_ = 0.;\n        this.coef_ = 0.;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Mul extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/multiply~.html\";\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] * in2[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Ota extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio signal\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"center frequency\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"K factor (resonance)\",\n            varLength: true\n        }\n\n    ];\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"output\",\n            varLength: true\n        }\n    ];\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial center frequency\",\n            default: 1000\n        },\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial K factor (resonance)\",\n            default: 1\n        }\n    ];\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/ota.html\";\n    static helpFiles: string[] = [\"math/help/ota~.bell\"];\n\n\n    sample_rate_: number;\n    s0_: number;\n    s1_: number;\n    s2_: number;\n    s3_: number;\n\n\n\n    tanhx_div_x(x: number) {\n        return x == 0. ? 0. : Math.tanh(x) / x;\n    }\n\n    scale(input: number, inputMin: number, inputMax: number, outputMin: number, outputMax: number) {\n        const inputRange = inputMax - inputMin;\n        const outputRange = outputMax - outputMin;\n\n        if (inputRange === 0) {\n            return outputMin;\n        }\n\n        return (input - inputMin) * outputRange / inputRange + outputMin;\n    }\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let inputStream = inputs[0][0];\n        let fc = inputs[0][1];\n        let k = inputs[0][2];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < inputStream.length; i++) {\n\n            // range [0..1] => 0 HZ .. Nyquist\n            // assert(fc > 0 && fc < 1);\n\n            const scaled_fc = this.scale(fc[i], 0, this.sample_rate_ / 2, 0, 1);\n            const clamped_fc = Math.max(0, Math.min(1, scaled_fc));\n\n            let wc = (Math.PI / 2.0) * clamped_fc; // with 2x oversampling, frequency dewarping is not required\n            // const float wcb = 2 * tan(0.5*wc); // dewarping\n\n            // evaluate the non-linear gains\n            let kk = k[i] * this.tanhx_div_x(this.s3_);\n            let t1 = this.tanhx_div_x(inputStream[i] - kk * this.s3_ - this.s0_);\n            let t2 = this.tanhx_div_x(this.s0_ - this.s1_);\n            let t3 = this.tanhx_div_x(this.s1_ - this.s2_);\n            let t4 = this.tanhx_div_x(this.s2_ - this.s3_);\n\n            // Linearize around operating point given by current filter state\n            let a1 = wc * t1;\n            let a2 = wc * t2;\n            let a3 = wc * t3;\n            let a4 = wc * t4;\n            let b1 = 1 / (1 + a1), b2 = 1 / (1 + a2);\n            let b3 = 1 / (1 + a3), b4 = 1 / (1 + a4);\n\n            // solve feedback\n            let ss = b1 * this.s0_;\n            ss = b2 * (a2 * ss + this.s1_);\n            ss = b3 * (a3 * ss + this.s2_);\n            ss = b4 * (a4 * ss + this.s3_);\n            let g = a1 * b1 * a2 * b2 * a3 * b3 * a4 * b4;\n            let y4 = (g * inputStream[i] + ss) / (1 + g * kk);\n\n            // update filter state\n            let y0 = inputStream[i] - kk * y4;\n            let y1 = b1 * (a1 * y0 + this.s0_);\n            this.s0_ += 2 * a1 * (y0 - y1);\n            let y2 = b2 * (a2 * y1 + this.s1_);\n            this.s1_ += 2 * a2 * (y1 - y2);\n            let y3 = b3 * (a3 * y2 + this.s2_);\n            this.s2_ += 2 * a3 * (y2 - y3);\n            this.s3_ += 2 * a4 * (y3 - y4);\n\n            outputStream[i] = y4;\n        }\n\n        return true;\n    }\n\n    init(sampleRate: number) {\n\n        this.sample_rate_ = sampleRate;\n        this.s0_ = 0.;\n        this.s1_ = 0.;\n        this.s2_ = 0.;\n        this.s3_ = 0.;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class ReverseDiv extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in2[i] / in1[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class ReverseSub extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in2[i] - in1[i];\n        }\n\n        return true;\n    }\n}\n","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Sqrt extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        }\n       \n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n\n    static argsOffset: number = 0;\n    static docs: string = \"math/docs/sqrt~.html\";\n    static helpFiles: string[] = [\"math/help/sqrt~.bell\"];\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n       \n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n\n            if(in1[i] > 0.) {\n                outputStream[i] = Math.sqrt(in1[i]); \n            }\n            else {\n                outputStream[i] = 0.;\n            }\n            \n        }\n\n        return true;\n    }\n}","import JsDspProcessor from \"../../../../../common/web/jsDspProcessor\";\nimport { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\n\nexport default class Sub extends JsDspProcessor {\n    static inlets: IInletsMeta = [\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 1\",\n            varLength: true\n        },\n        {\n            isHot: true,\n            type: \"signal\",\n            description: \"audio input connection 2\",\n            varLength: true\n        }\n    ]\n    static outlets: IOutletsMeta = [\n        {\n            type: \"signal\",\n            description: \"audio output connection\",\n            varLength: true\n        }\n    ]\n    static args: IArgsMeta = [\n        {\n            type: \"number\",\n            optional: true,\n            description: \"initial argument\",\n            default: 0.\n        }\n    ]\n    static argsOffset: number = 1;\n    static docs: string = \"math/docs/subtract~.html\";\n\n\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean {\n\n        let in1 = inputs[0][0];\n        let in2 = inputs[0][1];\n        let outputStream = outputs[0][0];\n\n        for (let i = 0; i < in1.length; i++) {\n            outputStream[i] = in1[i] - in2[i];\n        }\n\n        return true;\n    }\n}\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    Utils,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface CanvasUI extends InstanceType<typeof CanvasUI> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import _Binary from \"./objects/block/binary\";\nimport BinaryAudio from \"./objects/dsp/binary\";\nimport _Unary from \"./objects/block/unary\";\nimport { BaseObject, generateDefaultObject } from \"./sdk\";\n// import \"./objects/ui/ui.scss\";\nimport { generateObject } from \"../../../common/web/jsDspObject\";\nimport Add from \"./objects/dsp/add\";\nimport Mul from \"./objects/dsp/mul\";\nimport Sub from \"./objects/dsp/sub\";\nimport Div from \"./objects/dsp/div\";\nimport ReverseDiv from \"./objects/dsp/rev_div\";\nimport ReverseSub from \"./objects/dsp/rev_sub\";\nimport Hip from \"./objects/dsp/hip\";\nimport Lop from \"./objects/dsp/lop\";\nimport Bp from \"./objects/dsp/bp\";\nimport Ota from \"./objects/dsp/ota\";\nimport Exp from \"./objects/dsp/exp\";\nimport Abs from \"./objects/dsp/abs\";\nimport Log from \"./objects/dsp/log\";\nimport Sqrt from \"./objects/dsp/sqrt\";\nimport Delay from \"./objects/dsp/delay\";\nimport { DelayLine } from \"./objects/dsp/delayLine\";\n\n// Generated objects\nconst Binary = generateDefaultObject(_Binary as typeof BaseObject);\nconst Unary = generateDefaultObject(_Unary as typeof BaseObject);\n\nconst BinaryObjects: Record<string, typeof Binary> = {};\n\nconst binary_functions: Record<string, { f: (...args: any[]) => any; n: string; d: string }> = {\n  \"+\": { f: (a: any, b: any) => a + b, n: \"Add\", d: \"math/docs/add.html\" },\n  \"-\": { f: (a: any, b: any) => a - b, n: \"Sub\", d: \"math/docs/subtract.html\" },\n  \"!-\": { f: (a: any, b: any) => b - a, n: \"Reverse Sub\", d: \"\" },\n  \"*\": { f: (a: any, b: any) => a * b, n: \"Mul\", d: \"math/docs/multiply.html\" },\n  \"/\": { f: (a: any, b: any) => a / b, n: \"Div\", d: \"math/docs/divide.html\" },\n  \"!/\": { f: (a: any, b: any) => b / a, n: \"Reverse Div\", d: \"\" },\n  \"==\": { f: (a: any, b: any) => a == b, n: \"Equal\", d: \"math/docs/equal.html\" },\n  \"!=\": { f: (a: any, b: any) => a != b, n: \"Not equal\", d: \"math/docs/notequal.html\" },\n  \">\": { f: (a: any, b: any) => a > b, n: \"Greater\", d: \"math/docs/greaterthan.html\" },\n  \">=\": {\n    f: (a: any, b: any) => a >= b,\n    n: \"Greater or equal\",\n    d: \"math/docs/greaterthanorequal.html\",\n  },\n  \"<\": { f: (a: any, b: any) => a < b, n: \"Less\", d: \"math/docs/lessthan.html\" },\n  \"<=\": { f: (a: any, b: any) => a <= b, n: \"Less or equal\", d: \"math/docs/lessthanorequal.html\" },\n  \"&&\": {\n    f: (a: any, b: any) => Number(a > 0 && b > 0),\n    n: \"Boolean AND\",\n    d: \"math/docs/andlogical.html\",\n  },\n  \"||\": {\n    f: (a: any, b: any) => Number(a > 0 || b > 0),\n    n: \"Boolean OR\",\n    d: \"math/docs/orlogical.html\",\n  },\n  max: { f: (a: any, b: any) => (a > b ? a : b), n: \"Max\", d: \"math/docs/max.html\" },\n  min: { f: (a: any, b: any) => (a < b ? a : b), n: \"Min\", d: \"math/docs/min.html\" },\n  pow: { f: (a: any, b: any) => a ** b, n: \"Power\", d: \"\" },\n  \"%\": { f: (a: any, b: any) => a % b, n: \"Mod\", d: \"math/docs/mod.html\" },\n  \"!%\": { f: (a: any, b: any) => b % a, n: \"Reverse Mod\", d: \"\" },\n  log: {\n    f: (a: any, b: any) => {\n      if (a <= 0) {\n        return -1000;\n      } else if (b == 1 || b <= 0) {\n        return Math.log(a);\n      } else {\n        return Math.log(a) / Math.log(b);\n      }\n    },\n    n: \"Log\",\n    d: \"math/docs/log.html\",\n  },\n  atan2: { f: (a: any, b: any) => Math.atan2(a, b), n: \"Atan2\", d: \"math/docs/atan2.html\" },\n};\n\nfor (const key in binary_functions) {\n  BinaryObjects[key] = class extends Binary {\n    static description: string = binary_functions[key].n;\n    static get _name() {\n      return binary_functions[key].n;\n    }\n    static docs: string = binary_functions[key].d;\n    execute = binary_functions[key].f;\n  };\n}\n\nconst UnaryObjects: Record<string, any> = {\n  \"exp~\": generateObject(Exp, \"Exp\"),\n  \"abs~\": generateObject(Abs, \"Abs\"),\n  \"sqrt~\": generateObject(Sqrt, \"Sqrt\"),\n};\n\nconst unary_functions: Record<string, { f: (...args: any[]) => any; n: string; d: string }> = {\n  \"!\": { f: (a: any) => !a, n: \"Not\", d: \"\" },\n  \"~\": { f: (a: any) => ~a, n: \"Invert\", d: \"\" },\n  exp: { f: (a: any) => Math.exp(a), n: \"Exponential\", d: \"math/docs/exp.html\" },\n  abs: { f: (a: any) => Math.abs(a), n: \"Absolute Value\", d: \"math/docs/abs.html\" },\n  sqrt: { f: (a: any) => (a > 0 ? Math.sqrt(a) : 0), n: \"Square Root\", d: \"math/docs/sqrt.html\" },\n  cos: { f: (a: any) => Math.cos(a), n: \"Cosine\", d: \"math/docs/cos.html\" },\n  sin: { f: (a: any) => Math.sin(a), n: \"Sine\", d: \"math/docs/sin.html\" },\n  tan: { f: (a: any) => Math.tan(a), n: \"Tangent\", d: \"math/docs/tan.html\" },\n  atan: { f: (a: any) => Math.atan(a), n: \"Arc Tangent\", d: \"math/docs/atan.html\" },\n};\n\nfor (const key in unary_functions) {\n  UnaryObjects[key] = class extends Unary {\n    static description: string = unary_functions[key].n;\n    static get _name() {\n      return unary_functions[key].n;\n    }\n    static docs: string = unary_functions[key].d;\n    execute = unary_functions[key].f;\n  };\n}\n\n// const binary_audio_functions: Record<string, { f: (...args: number[]) => number, n: string }> = {\n//     \"+~\": { f: (a: number, b: number) => a + b, n: \"Add\" },\n//     \"-~\": { f: (a: number, b: number) => a - b, n: \"Sub\" },\n//     \"!-~\": { f: (a: number, b: number) => b - a, n: \"Reverse Sub\" },\n//     \"*~\": { f: (a: number, b: number) => a * b, n: \"Mul\" },\n//     \"/~\": { f: (a: number, b: number) => a / b, n: \"Div\" },\n//     \"!/~\": { f: (a: number, b: number) => b / a, n: \"Reverse Div\" },\n//     \"==~\": { f: (a: number, b: number) => Number(a == b), n: \"Equal\" },\n//     \"!=~\": { f: (a: number, b: number) => Number(a != b), n: \"Not equal\" },\n//     \">~\": { f: (a: number, b: number) => Number(a > b), n: \"Greater\" },\n//     \">=~\": { f: (a: number, b: number) => Number(a >= b), n: \"Greater or equal\" },\n//     \"<~\": { f: (a: number, b: number) => Number(a < b), n: \"Less\" },\n//     \"<=~\": { f: (a: number, b: number) => Number(a <= b), n: \"Less or equal\" },\n//     \"&&~\": { f: (a: number, b: number) => Number(a && b), n: \"Boolean AND\" },\n//     \"||~\": { f: (a: number, b: number) => Number(a || b), n: \"Boolean OR\" },\n//     \"max~\": { f: (a: number, b: number) => a > b ? a : b, n: \"Max\" },\n//     \"min~\": { f: (a: number, b: number) => a < b ? a : b, n: \"Min\" },\n//     \"pow~\": { f: (a: number, b: number) => a ** b, n: \"Power\" },\n// }\n\n// TODO -- this doesn't work because the worklet conversion doesn't convert the exec reference to a string\n// const BinaryAudioObjects: Record<string, any> = {};\n\n// for (const key in binary_audio_functions) {\n\n//     const name = binary_audio_functions[key].n;\n//     const exec = binary_audio_functions[key].f;\n\n//     BinaryAudioObjects[key] = generateObject(\n//         class extends BinaryAudio {\n//             static get _name() { return name; }\n//             execute = exec;\n//         },\n//         key\n//     )\n// }\n\n// AHHHH we'll have to fix this up soon\n\nconst BinaryAudioObjects: Record<string, any> = {\n  \"+~\": generateObject(Add, \"Add\"),\n  \"-~\": generateObject(Sub, \"Sub\"),\n  \"*~\": generateObject(Mul, \"Mul\"),\n  \"/~\": generateObject(Div, \"Div\"),\n  \"!/~\": generateObject(ReverseDiv, \"Reverse Div\"),\n  \"!-~\": generateObject(ReverseSub, \"Reverse Sub\"),\n  \"log~\": generateObject(Log, \"Log\"),\n};\n\nconst FilterAudioObjects: Record<string, any> = {\n  \"hip~\": generateObject(Hip, \"Hip\"),\n  \"lop~\": generateObject(Lop, \"Lop\"),\n  \"bp~\": generateObject(Bp, \"Bp\"),\n  \"ota~\": generateObject(Ota, \"Ota\"),\n};\n\nconst EffectsAudioObjects: Record<string, any> = {\n  \"delay~\": generateObject(Delay, \"Delay\", [DelayLine]),\n};\n\nexport default async () => ({\n  ...BinaryObjects,\n  ...UnaryObjects,\n  ...BinaryAudioObjects,\n  ...FilterAudioObjects,\n  ...EffectsAudioObjects,\n});\n"],"names":[],"sourceRoot":""}