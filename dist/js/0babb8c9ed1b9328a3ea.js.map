{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/dsp/Base.ts","webpack://JSPatcher/./src/core/objects/dsp/Oscilloscope.ts","webpack://JSPatcher/./src/core/objects/dsp/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectrogram.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectroscope.ts","webpack://JSPatcher/./src/core/objects/dsp/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/exports.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.worklet.ts"],"names":["BaseDSP","BaseObject","DefaultDSP","DefaultObject","OscilloscopeUI","CanvasUI","componentDidMount","bgColor","state","ctx","width","height","fullSize","fillStyle","fillRect","paint","continuous","schedulePaint","object","node","destroyed","stablize","interleaved","range","autoRange","showStats","phosphorColor","hueOffset","textColor","gridColor","seperatorColor","left","bottom","estimatedFreq","buffer","gets","l","getProp","sampleRate","audioCtx","clearRect","$read","$ui32","data","t","length","$","Atomics","load","channels","dl","yMin","yMax","yFactor","i","s","j","Math","max","abs","calcY","v","channelHeight","strokeStyle","vStep","beginPath","setLineDash","gridChannels","y","moveTo","lineTo","stroke","lineWidth","channelColor","$zerox","period","times","floor","$0","$1","drawL","thresh","isFinite","min","round","pixelsPerSamp","sampsPerPixel","save","clip","Path2D","rect","Color","shiftHue","toHSL","maxInStep","minInStep","$j","samp","$step","x","restore","font","textAlign","textBaseline","fillText","toFixed","freqStatY","freq","Oscilloscope","undefined","subscribe","on","inlets","outlets","props","parameters","windowFunction","applyBPF","get","indexOf","fftSize","fftOverlap","windowSize","SpectralAnalyserNode","audioWorklet","disconnectAudioInlet","inletAudioConnections","index","connectAudioInlet","inlet","isBang","updateUI","destroy","isHot","type","description","default","enums","isUIState","frameRate","SpectralAnalyser","$requestTimer","startRequest","request","extractorKeys","forEach","key","push","got","outlet","scheduleRequest","window","setTimeout","e","clearTimeout","speedLim","lastAmplitudes","allAmplitudes","amplitude","centroid","flatness","flux","kurtosis","skewness","rolloff","slope","spread","SpectrogramUI","document","createElement","getContext","offscreenCtx","dataFrames","canvas","offscreenVRes","getAllAmplitudes","f","$totalFrames","fftBins","bins","frames","$writeFrame","$writeFrameUi32","$lastFrame","$frame0","$frame1","osChannelHeight","step","vGrid","k","atodb","normalized","hue","lum","hStep","globalCompositeOperation","imageSmoothingEnabled","drawImage","sSplit","dSplit","Spectrogram","SpectroscopeUI","fgColor","getLastAmplitudes","gridX","closePath","fill","Spectroscope","TemporalAnalyser","TemporalAnalyserNode","absMax","rms","zcr","processorID","AudioWorkletProxyNode","constructor","context","numberOfInputs","numberOfOutputs","_destroy","call","_disposed","AudioWorkletRegister","processorURL"],"mappings":"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","file":"js/0babb8c9ed1b9328a3ea.js","sourcesContent":["import { BaseObject, DefaultObject } from \"../Base\";\n\nexport class BaseDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends BaseObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n\nexport class DefaultDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface OscilloscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    interleaved: boolean;\n    stablize: boolean;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    range: number;\n    autoRange: boolean;\n    showStats: boolean;\n    bgColor: string;\n    phosphorColor: string;\n    hueOffset: number;\n    textColor: string;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class OscilloscopeUI extends CanvasUI<Oscilloscope, {}, OscilloscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            stablize,\n            interleaved,\n            // $cursor,\n            range,\n            autoRange,\n            showStats,\n            bgColor,\n            phosphorColor,\n            hueOffset,\n            textColor,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const { estimatedFreq, buffer } = await this.object.state.node.gets(\"estimatedFreq\", \"buffer\");\n        const l = this.object.getProp(\"windowSize\");\n        const { sampleRate } = this.object.audioCtx;\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!buffer) return;\n\n        const { $read: $ui32, data: t } = buffer;\n        if (!t || !t.length || !t[0].length) return;\n\n        const $ = Atomics.load($ui32, 0);\n        const channels = t.length;\n        const dl = t[0].length;\n        // Vertical Range\n        let yMin = -range;\n        let yMax = range;\n        let yFactor = range;\n        if (autoRange) {\n            // Fastest way to get min and max to have: 1. max abs value for y scaling, 2. mean value for zero-crossing\n            let i = channels;\n            let s = 0;\n            while (i--) {\n                let j = l;\n                while (j--) {\n                    s = t[i][($ + j) % dl];\n                    if (s < yMin) yMin = s;\n                    else if (s > yMax) yMax = s;\n                }\n            }\n            yFactor = Math.max(1, Math.abs(yMin), Math.abs(yMax))/* * vzoom*/;\n        }\n        const calcY = (v: number, i: number) => channelHeight * (+interleaved * i + 1 - (v - yMin) / (yMax - yMin));\n        // Grids\n        ctx.strokeStyle = gridColor;\n        let vStep = 0.25;\n        while (yFactor / 2 / vStep > 2) vStep *= 2; // Minimum horizontal grids in channel one side = 2\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = interleaved ? channels : 1;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            let y = calcY(0, i);\n            ctx.moveTo(left, y);\n            ctx.lineTo(width, y); // 0-line\n            for (let j = vStep; j < yFactor; j += vStep) {\n                y = calcY(j, i);\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y); // below 0\n                y = calcY(-j, i);\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y); // above 0\n            }\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        let $zerox = 0; // First Zero-crossing of first channel\n        const period = sampleRate / estimatedFreq[0];\n        const times = Math.floor(l / period) - 1;\n        for (let i = 0; i < channels; i++) {\n            // Horizontal Range\n            let $0 = 0; // Draw start\n            let $1 = l; // Draw End\n            let drawL = l; // Length to draw\n            if (stablize) { // Stablization\n                if (i === 0) {\n                    const thresh = (yMin + yMax) * 0.5 + 0.001; // the zero-crossing with \"offset\"\n                    while ($zerox < l && t[i][($ + $zerox++) % dl] > thresh); // Find first raise\n                    if ($zerox >= l - 1) { // Found nothing, no stablization\n                        $zerox = 0;\n                    } else {\n                        while ($zerox < l && t[i][($ + $zerox++) % dl] < thresh); // Find first drop\n                        $zerox--;\n                        if ($zerox >= l - 1 || $zerox < 0) {\n                            $zerox = 0;\n                        }\n                    }\n                }\n                drawL = times > 0 && isFinite(period) ? ~~Math.min(period * times, l - $zerox) : l - $zerox; // length to draw\n            }\n            $0 = Math.round($zerox/* + drawL * zoomOffset*/);\n            $1 = Math.round($zerox + drawL/* / zoom + drawL * zoomOffset*/);\n            const pixelsPerSamp = (width - left) / ($1 - 1 - $0);\n            const sampsPerPixel = Math.max(1, Math.round(1 / pixelsPerSamp));\n\n            if (interleaved) {\n                ctx.save();\n                const clip = new Path2D();\n                clip.rect(0, i * channelHeight, width, channelHeight);\n                ctx.clip(clip);\n            }\n            ctx.beginPath();\n            channelColor[i] = Color(phosphorColor).shiftHue(i * hueOffset).toHSL();\n            ctx.strokeStyle = channelColor[i];\n            let maxInStep;\n            let minInStep;\n            for (let j = $0; j < $1; j++) {\n                const $j = (j + $) % dl;\n                const samp = t[i][$j];\n                const $step = (j - $0) % sampsPerPixel;\n                if ($step === 0) {\n                    maxInStep = samp;\n                    minInStep = samp;\n                }\n                if ($step !== sampsPerPixel - 1) {\n                    if ($step !== 0) {\n                        if (samp > maxInStep) maxInStep = samp;\n                        if (samp < minInStep) minInStep = samp;\n                    }\n                    continue;\n                }\n                const x = (j - $step - $0) * pixelsPerSamp;\n                let y = calcY(maxInStep, i);\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n                if (minInStep !== maxInStep) {\n                    y = calcY(minInStep, i);\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.stroke();\n            if (interleaved) ctx.restore();\n        }\n        // Stats\n        if (showStats) {\n            ctx.font = \"bold 12px Consolas, monospace\";\n            ctx.fillStyle = textColor;\n            ctx.textAlign = \"left\";\n            ctx.textBaseline = \"top\";\n            ctx.fillText(yFactor.toFixed(2), 2, 2);\n            ctx.textBaseline = \"bottom\";\n            ctx.fillText((-yFactor).toFixed(2), 2, height - 2);\n            ctx.textAlign = \"right\";\n            const freqStatY = height - 2 - (estimatedFreq.length - 1) * 14;\n            for (let i = 0; i < estimatedFreq.length; i++) {\n                const freq = estimatedFreq[i];\n                ctx.fillStyle = channelColor[i];\n                const y = interleaved ? channelHeight * (i + 1) - 2 : freqStatY + 14 * i;\n                ctx.fillText(freq.toFixed(2) + \"Hz\", width - 2, y);\n            }\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<OscilloscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Oscilloscope extends BaseDSP<{}, State, [Bang], [], [], Props, OscilloscopeUIState> {\n    static description = \"Oscilloscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        interleaved: {\n            type: \"boolean\",\n            default: false,\n            description: \"Draw channels seperately\",\n            isUIState: true\n        },\n        stablize: {\n            type: \"boolean\",\n            default: true,\n            description: \"Stablize\",\n            isUIState: true\n        },\n        range: {\n            type: \"number\",\n            default: 1,\n            description: \"Vertical range\",\n            isUIState: true\n        },\n        autoRange: {\n            type: \"boolean\",\n            default: true,\n            description: \"Auto adjust range if > 1\",\n            isUIState: true\n        },\n        showStats: {\n            type: \"boolean\",\n            default: true,\n            description: \"Show stats texts\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        phosphorColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Phosphor color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"#DDDD99\",\n            description: \"Info text color\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = OscilloscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport { SpectralAnalysis, TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Record<keyof SpectralAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n    continuous: boolean;\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<SpectralAnalysis>;\nexport class SpectralAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Spectral feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        lastAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the last amplitudes frame\"\n        },\n        allAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting all the amplitudes frame\"\n        },\n        amplitude: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the sum of the last amplitude frame\"\n        },\n        estimatedFreq: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the estimated frequency\"\n        },\n        centroid: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral centroid\"\n        },\n        flatness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flatness\"\n        },\n        flux: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flux\"\n        },\n        kurtosis: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral kurtosis\"\n        },\n        skewness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral skewness\"\n        },\n        rolloff: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral rolloff\"\n        },\n        slope: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral slope\"\n        },\n        spread: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral spread\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"lastAmplitudes\",\n                        \"allAmplitudes\",\n                        \"amplitude\",\n                        \"estimatedFreq\",\n                        \"centroid\",\n                        \"flatness\",\n                        \"flux\",\n                        \"kurtosis\",\n                        \"skewness\",\n                        \"rolloff\",\n                        \"slope\",\n                        \"spread\"\n                    ] as (keyof SpectralAnalysis)[];\n                    const gets: (keyof SpectralAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this.state.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","// import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectrogramUIState {\n    continuous: boolean;\n    frameRate: number;\n    cursorX: number;\n    cursorY: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    // textColor: string;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectrogramUI extends CanvasUI<Spectrogram, {}, SpectrogramUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    $lastFrame = -1;\n    dataFrames = 1;\n    offscreenCtx = document.createElement(\"canvas\").getContext(\"2d\");\n    offscreenVRes = 1024;\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const { ctx, offscreenCtx, dataFrames } = this;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        offscreenCtx.canvas.width = dataFrames;\n        offscreenCtx.canvas.height = this.offscreenVRes;\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const { ctx, offscreenCtx, offscreenVRes } = this;\n        if (!ctx || !offscreenCtx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const allAmplitudes = await this.object.state.node.getAllAmplitudes();\n\n        // Background\n\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!allAmplitudes) return;\n        const { data: f, $totalFrames, fftBins: bins, frames, dataFrames, $writeFrame: $writeFrameUi32 } = allAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        // Draw to offscreen canvas\n        const $lastFrame = Atomics.load($totalFrames, 0) - 1;\n        const $writeFrame = Atomics.load($writeFrameUi32, 0);\n        let $frame0 = $writeFrame;\n        let $frame1 = $frame0 + dataFrames;\n        if (this.dataFrames !== dataFrames) {\n            offscreenCtx.canvas.width = dataFrames;\n            this.dataFrames = dataFrames;\n        } else if ($lastFrame >= this.$lastFrame) {\n            $frame0 = Math.max($frame0, $frame1 - ($lastFrame - this.$lastFrame));\n        }\n        this.$lastFrame = $lastFrame;\n        const osChannelHeight = offscreenVRes / channels;\n        const step = Math.max(1, Math.round(bins / osChannelHeight));\n        const vGrid = osChannelHeight / bins;\n        for (let i = 0; i < f.length; i++) {\n            for (let j = $frame0; j < $frame1; j++) {\n                let maxInStep;\n                offscreenCtx.fillStyle = \"black\";\n                offscreenCtx.fillRect(j % dataFrames, i * osChannelHeight, 1, osChannelHeight);\n                for (let k = 0; k < bins; k++) {\n                    const samp = atodb(f[i][(k + j * bins) % l]);\n                    const $step = k % step;\n                    if ($step === 0) maxInStep = samp;\n                    if ($step !== step - 1) {\n                        if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                        continue;\n                    }\n                    const normalized = Math.min(1, Math.max(0, (maxInStep + 10) / 100 + 1));\n                    if (normalized === 0) continue;\n                    const hue = (normalized * 180 + 240) % 360;\n                    const lum = normalized * 50;\n                    offscreenCtx.fillStyle = `hsl(${hue}, 100%, ${lum}%)`;\n                    offscreenCtx.fillRect(j % dataFrames, (bins - k - 1) * vGrid + i * osChannelHeight, 1, Math.max(1, vGrid));\n                }\n            }\n        }\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        // Horizontal Range\n        ctx.save();\n        ctx.globalCompositeOperation = \"lighter\";\n        ctx.imageSmoothingEnabled = false;\n        $frame0 = ($frame1 - frames) % dataFrames;\n        $frame1 = $frame0 + frames;\n        if ($frame1 <= dataFrames) {\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, frames, offscreenVRes, left, 0, width - left, height - bottom);\n        } else {\n            const sSplit = dataFrames - $frame0;\n            const dSplit = sSplit / frames * (width - left);\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, sSplit, offscreenVRes, left, 0, dSplit, height - bottom);\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, $frame1 - dataFrames - 0.01, offscreenVRes, dSplit + left, 0, width - left - dSplit, height - bottom);\n        }\n        ctx.restore();\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectrogramUIState, \"cursorX\" | \"cursorY\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectrogram extends BaseDSP<{}, State, [Bang], [], [], Props, SpectrogramUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectrogramUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectroscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    fgColor: string;\n    hueOffset: number;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectroscopeUI extends CanvasUI<Spectroscope, {}, SpectroscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            fgColor,\n            hueOffset,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const lastAmplitudes = await this.object.state.node.getLastAmplitudes();\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!lastAmplitudes) return;\n        const { data: f } = lastAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        // Horizontal Range\n        const $0 = 0; // Draw start\n        const $1 = l; // Draw End\n        const gridX = (width - left) / ($1 - $0);\n        const step = Math.max(1, Math.round(1 / gridX));\n        for (let i = 0; i < f.length; i++) {\n            ctx.beginPath();\n            channelColor[i] = Color(fgColor).shiftHue(i * hueOffset).toHSL();\n            ctx.fillStyle = channelColor[i];\n            let maxInStep;\n            for (let j = $0; j < $1; j++) {\n                const samp = atodb(f[i][j]);\n                const $step = (j - $0) % step;\n                if ($step === 0) maxInStep = samp;\n                if ($step !== step - 1) {\n                    if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                    continue;\n                }\n                const x = (j - $0) * gridX + left;\n                const y = channelHeight * (i + 1 - Math.min(1, Math.max(0, maxInStep / 100 + 1)));\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n            }\n            ctx.lineTo(width, channelHeight * (i + 1));\n            ctx.lineTo(left, channelHeight * (i + 1));\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectroscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectroscope extends BaseDSP<{}, State, [Bang], [], [], Props, SpectroscopeUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        fgColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Foreground color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectroscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport TemporalAnalyserNode from \"../../worklets/TemporalAnalyser\";\nimport { TemporalAnalysis } from \"../../worklets/TemporalAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Record<keyof TemporalAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    continuous: boolean;\n}\nexport interface State {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<TemporalAnalysis>;\nexport class TemporalAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Temporal feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        absMax: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the absolute Maximum\"\n        },\n        rms: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the Root Mean Square\"\n        },\n        zcr: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the zero crossing count\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"rms\",\n                        \"zcr\",\n                        \"absMax\"\n                    ] as (keyof TemporalAnalysis)[];\n                    const gets: (keyof TemporalAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this.state.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new TemporalAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { SpectralAnalyser } from \"./SpectralAnalyser\";\nimport { TemporalAnalyser } from \"./TemporalAnalyser\";\nimport { Oscilloscope } from \"./Oscilloscope\";\nimport { Spectroscope } from \"./Spectroscope\";\nimport { Spectrogram } from \"./Spectrogram\";\n\nexport default {\n    \"temporalAnalyser~\": TemporalAnalyser,\n    \"spectralAnalyser~\": SpectralAnalyser,\n    \"scope~\": Oscilloscope,\n    \"spectroscope~\": Spectroscope,\n    \"spectrogram~\": Spectrogram\n};\n","import processorURL from \"./SpectralAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters } from \"./SpectralAnalyserWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorID = \"__JSPatcher_SpectralAnalyser\";\nexport default class SpectralAnalyserNode extends AudioWorkletProxyNode<ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters> implements ISpectralAnalyserNode {\n    static processorID = processorID;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorID, processorURL);\n    static fnNames: (keyof ISpectralAnalyserProcessor)[] = [\"getBuffer\", \"getLastAmplitudes\", \"getAllAmplitudes\", \"getAllAmplitudes\", \"getEstimatedFreq\", \"getCentroid\", \"getFlatness\", \"getFlux\", \"getKurtosis\", \"getSkewness\", \"getRolloff\", \"getSlope\", \"getSpread\", \"gets\", \"destroy\"];\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n}\n","module.exports = __webpack_public_path__ + \"js/f305085e3f0a7ee57877.worklet.js\";"],"sourceRoot":""}