{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/WebMIDI/Base.ts","webpack://JSPatcher/./src/core/objects/WebMIDI/devices.ts","webpack://JSPatcher/./src/core/objects/WebMIDI/exports.ts","webpack://JSPatcher/./src/core/objects/WebMIDI/midiIO.ts"],"names":["DefaultWebMIDIObject","DefaultObject","midiDevices","midiAccess","undefined","getProp","filters","box","args","slice","length","push","state","error","devices","indexOf","inputs","forEach","v","outputs","options","map","d","key","type","name","id","icon","input","output","text","value","outletAll","subscribe","on","inlets","outlets","navigator","requestMIDIAccess","sysex","addEventListener","handleDeviceChange","e","data","inlet","isBang","removeEventListener","isHot","description","varLength","optional","enums","default","autoUpdate","midiIn","midiOut","search","port","meta","outlet","i","handleMIDIMessage","newSearch","send"],"mappings":"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","file":"js/5248f47e98f08f1375a5.js","sourcesContent":["import { DefaultObject } from \"../Base\";\n\nexport class DefaultWebMIDIObject<D = {}, S = {}, I extends any[] = any[], O extends any[] = any[], A extends any[] = any[], P = {}, U = {}, E = {}> extends DefaultObject<D, S, I, O, A, P, U, E> {\n    static package = \"WebMIDI\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n    static description = \"WebMIDI Object\";\n}\n","import { StrictDropdownItemProps } from \"semantic-ui-react\";\nimport { Bang, isBang } from \"../Base\";\nimport { DefaultWebMIDIObject } from \"./Base\";\nimport { TMeta, TPropsMeta } from \"../../types\";\n\nexport class midiDevices extends DefaultWebMIDIObject<{}, { midiAccess: WebMidi.MIDIAccess }, [Bang | WebMidi.MIDIPortType[]], [WebMidi.MIDIPort[], StrictDropdownItemProps[]], WebMidi.MIDIPortType[], { autoUpdate: boolean }> {\n    static description = \"Enumerate MIDI devices\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"object\",\n        description: \"Bang to enumerate, MIDIPortType[] to use a filter\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Array of MIDIPort\"\n    }, {\n        type: \"object\",\n        description: \"Array of DropdownItemProps\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"enum\",\n        varLength: true,\n        optional: true,\n        enums: [\"input\", \"output\"],\n        default: [\"input\", \"output\"],\n        description: \"Output only kinds of devices\"\n    }];\n    static props: TPropsMeta<{ autoUpdate: boolean }> = {\n        autoUpdate: {\n            type: \"boolean\",\n            default: true,\n            description: \"Auto output devices when devices change\"\n        }\n    };\n    state = { midiAccess: undefined as WebMidi.MIDIAccess };\n    handleDeviceChange = async () => {\n        if (!this.getProp(\"autoUpdate\")) return;\n        const filters = this.box.args.slice();\n        if (!filters.length) filters.push(\"input\", \"output\");\n        const { midiAccess } = this.state;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIPort[] = [];\n        if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach(v => devices.push(v));\n        if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach(v => devices.push(v));\n        const options = devices.map((d, key) => {\n            const { type, name, id } = d;\n            return { key, icon: { input: \"sign-in\", output: \"sign-out\" }[type], text: name || id, value: id };\n        });\n        this.outletAll([devices, options]);\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"postInit\", async () => {\n            try {\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\n                this.state.midiAccess = midiAccess;\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\n                if (this.getProp(\"autoUpdate\")) this.handleDeviceChange();\n            } catch (e) {\n                this.error(e);\n            }\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                let filters: WebMidi.MIDIPortType[];\n                if (isBang(data)) {\n                    filters = this.box.args.slice();\n                    if (!filters.length) filters.push(\"input\", \"output\");\n                } else {\n                    filters = data.slice();\n                }\n                const { midiAccess } = this.state;\n                if (!midiAccess) {\n                    this.error(\"MIDIAccess not available.\");\n                    return;\n                }\n                const devices: WebMidi.MIDIPort[] = [];\n                if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach(v => devices.push(v));\n                if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach(v => devices.push(v));\n                const options = devices.map((d, key) => {\n                    const { type, name, id } = d;\n                    return { key, icon: { input: \"sign-in\", output: \"sign-out\" }[type], text: name || id, value: id };\n                });\n                this.outletAll([devices, options]);\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.midiAccess) this.state.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\n        });\n    }\n}\n","import { midiDevices } from \"./devices\";\nimport { midiIn, midiOut } from \"./midiIO\";\n\nexport default {\n    midiDevices,\n    midiIn,\n    midiOut\n};\n","import { DefaultWebMIDIObject } from \"./Base\";\nimport { TMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport class midiIn extends DefaultWebMIDIObject<{}, { midiAccess: WebMidi.MIDIAccess; search: string; port: WebMidi.MIDIInput }, [string | Bang], [Uint8Array, WebMidi.MIDIInput], [string]> {\n    static description = \"Get MIDI input from device name or ID\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"string to fetch device name or ID, bang to output MIDI port instance\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"MIDI message: Uint8Array\"\n    }, {\n        type: \"object\",\n        description: \"Instance: MIDIPort\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"string\",\n        optional: false,\n        description: \"Device name or ID\"\n    }];\n    state = { midiAccess: undefined as WebMidi.MIDIAccess, search: undefined as string, port: undefined as WebMidi.MIDIInput };\n    handleDeviceChange = async () => {\n        const { midiAccess } = this.state;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIInput[] = [];\n        midiAccess.inputs.forEach(v => devices.push(v));\n        const enums = devices.map(d => d.name || d.id);\n        const { meta } = this;\n        meta.args[0] = { ...midiIn.args[0], type: \"enum\", enums };\n        this.meta = meta;\n    };\n    handleMIDIMessage = (e: WebMidi.MIDIMessageEvent) => this.outlet(0, e.data);\n    newSearch = async (search?: string) => {\n        this.state.search = search;\n        const { midiAccess } = this.state;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIInput[] = [];\n        midiAccess.inputs.forEach(v => devices.push(v));\n        for (let i = 0; i < devices.length; i++) {\n            const port = devices[i];\n            if (!search || port.id === search || port.name === search) {\n                if (port !== this.state.port) {\n                    if (this.state.port) this.state.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\n                    this.state.port = port;\n                    port.addEventListener(\"midimessage\", this.handleMIDIMessage);\n                    break;\n                }\n            }\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"postInit\", async () => {\n            const search = this.box.args[0];\n            try {\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\n                this.state.midiAccess = midiAccess;\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\n                this.handleDeviceChange();\n                this.newSearch(search);\n            } catch (e) {\n                this.error(e);\n            }\n        });\n        this.on(\"updateArgs\", (args: [string?]) => {\n            this.newSearch(args[0]);\n        });\n        this.on(\"updateProps\", () => {\n            this.newSearch(this.state.search);\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    await this.newSearch(data);\n                }\n                if (this.state.port) this.outlet(1, this.state.port);\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.midiAccess) this.state.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\n            if (this.state.port) this.state.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\n        });\n    }\n}\n\nexport class midiOut extends DefaultWebMIDIObject<{}, { midiAccess: WebMidi.MIDIAccess; search: string; port: WebMidi.MIDIOutput }, [Uint8Array | number[] | string | Bang], [WebMidi.MIDIOutput], [string]> {\n    static description = \"Get MIDI output from device name or ID\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"anything\",\n        description: \"Uint8Array or number[] to output MIDI message, string to fetch device name or ID, bang to output MIDI port instance\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Instance: MIDIPort\"\n    }];\n    static args: TMeta[\"args\"] = [{\n        type: \"string\",\n        optional: false,\n        description: \"Device name or ID\"\n    }];\n    state = { midiAccess: undefined as WebMidi.MIDIAccess, search: undefined as string, port: undefined as WebMidi.MIDIOutput };\n    handleDeviceChange = async () => {\n        const { midiAccess } = this.state;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIOutput[] = [];\n        midiAccess.outputs.forEach(v => devices.push(v));\n        const enums = devices.map(d => d.name || d.id);\n        const { meta } = this;\n        meta.args[0] = { ...midiOut.args[0], type: \"enum\", enums };\n        this.meta = meta;\n    };\n    newSearch = async (search?: string) => {\n        this.state.search = search;\n        const { midiAccess } = this.state;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIOutput[] = [];\n        midiAccess.outputs.forEach(v => devices.push(v));\n        for (let i = 0; i < devices.length; i++) {\n            const port = devices[i];\n            if (!search || port.id === search || port.name === search) {\n                this.state.port = port;\n                break;\n            }\n        }\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", async () => {\n            const search = this.box.args[0];\n            try {\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\n                this.state.midiAccess = midiAccess;\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\n                this.handleDeviceChange();\n                this.newSearch(search);\n            } catch (e) {\n                this.error(e);\n            }\n        });\n        this.on(\"updateArgs\", (args: [string?]) => {\n            this.newSearch(args[0]);\n        });\n        this.on(\"updateProps\", () => {\n            this.newSearch(this.state.search);\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (!isBang(data)) {\n                    if (typeof data === \"string\") {\n                        await this.newSearch(data);\n                    } else {\n                        if (this.state.port) this.state.port.send(data);\n                        return;\n                    }\n                }\n                if (this.state.port) this.outlet(0, this.state.port);\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.midiAccess) this.state.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\n        });\n    }\n}\n"],"sourceRoot":""}