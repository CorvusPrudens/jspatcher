{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/Base.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/SpectralAnalyser.worklet.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/AudioWorklet/TemporalAnalyser.worklet.ts","webpack://JSPatcher/./src/core/objects/dsp/Base.ts","webpack://JSPatcher/./src/core/objects/dsp/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectrogram.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectroscope.ts","webpack://JSPatcher/./src/core/objects/dsp/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/exports.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.worklet.ts"],"names":["registeredProcessors","Set","AWN","window","AudioWorkletNode","DisposableAudioWorkletNode","port","parameters","destroy","postMessage","close","destroyed","constructor","context","name","options","AudioWorkletRegister","registered","has","processorID","b","add","registerProcessor","audioWorklet","registering","url","processorURL","URL","createObjectURL","Blob","processor","toString","type","addModule","resolves","forEach","f","e","rejects","register","promise","Promise","resolve","reject","push","SpectralAnalyserNode","numberOfInputs","numberOfOutputs","onmessage","id","data","gets","Error","promiseID","SpectralAnalyserRegister","TemporalAnalyserNode","rms","zcr","buffer","TemporalAnalyserRegister","BaseDSP","BaseObject","DefaultDSP","DefaultObject","SpectralAnalyser","node","undefined","$requestTimer","subscribe","startRequest","request","state","extractorKeys","key","getProp","got","outlet","scheduleRequest","setTimeout","on","inlets","outlets","props","continuous","windowFunction","applyBPF","get","indexOf","fftSize","fftOverlap","windowSize","audioCtx","disconnectAudioInlet","inletAudioConnections","index","connectAudioInlet","inlet","isBang","clearTimeout","isHot","description","speedLim","default","enums","lastAmplitudes","allAmplitudes","amplitude","estimatedFreq","centroid","flatness","flux","kurtosis","skewness","rolloff","slope","spread","SpectrogramUI","CanvasUI","document","createElement","getContext","componentDidMount","bgColor","ctx","offscreenCtx","frames","width","height","fullSize","canvas","offscreenVRes","fillStyle","fillRect","paint","schedulePaint","object","gridColor","seperatorColor","left","bottom","clearRect","$totalFrames","fftBins","bins","framesIn","$frame","$frameUi32","lock","length","l","channels","Atomics","load","store","$lastFrame","$frame0","$frame1","Math","max","osChannelHeight","step","round","vGrid","i","j","maxInStep","k","samp","atodb","$step","normalized","min","hue","lum","strokeStyle","vStep","hStep","beginPath","setLineDash","gridChannels","channelHeight","y","moveTo","lineTo","x","stroke","save","globalCompositeOperation","imageSmoothingEnabled","drawImage","sSplit","dSplit","restore","Spectrogram","Node","updateUI","isUIState","frameRate","SpectroscopeUI","fgColor","hueOffset","lineWidth","channelColor","$0","$1","gridX","Color","shiftHue","toHSL","closePath","fill","Spectroscope","TemporalAnalyser","Oscilloscope","AudioWorkletProxyNode","_destroy","call"],"mappings":"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","file":"js/3e93c16c62cecf10d924.js","sourcesContent":["export const registeredProcessors = new Set<string>();\n\nconst AWN: typeof AudioWorkletNode = window.AudioWorkletNode ? AudioWorkletNode : null;\ntype DataToProcessor = DisposableAudioWorkletMessageEventDataToProcessor;\nexport class DisposableAudioWorkletNode<F extends Record<string, any> = Record<string, any>, T extends DataToProcessor = DataToProcessor, P extends string = string, O extends any = any> extends AWN {\n    get port(): AudioWorkletMessagePort<F, T> {\n        return super.port;\n    }\n    get parameters(): DisposableAudioParamMap<P> {\n        return super.parameters as DisposableAudioParamMap<P>;\n    }\n    protected readonly options: TypedAudioWorkletNodeOptions<O>;\n    destroyed = false;\n    destroy() {\n        this.port.postMessage({ destroy: true } as T);\n        this.port.close();\n        this.destroyed = true;\n    }\n    constructor(context: BaseAudioContext, name: string, options?: TypedAudioWorkletNodeOptions<O>) {\n        super(context, name, options);\n        this.options = options;\n    }\n}\n\nexport abstract class AudioWorkletRegister {\n    static processorID: string;\n    static processorURL: string;\n    static registeredProcessors = registeredProcessors;\n    static registering = false;\n    static get registered() {\n        return this.registeredProcessors.has(this.processorID);\n    }\n    static set registered(b: boolean) {\n        this.registeredProcessors.add(this.processorID);\n    }\n    static processor: () => void;\n    static Node: new (context: BaseAudioContext, options?: AudioWorkletNodeOptions) => DisposableAudioWorkletNode;\n    private static resolves: { [id: string]: ((value?: void | PromiseLike<void>) => void)[]} = {};\n    private static rejects: { [id: string]: ((reason?: any) => void)[] } = {};\n    private static async registerProcessor(audioWorklet: AudioWorklet) {\n        this.registering = true;\n        try {\n            const url = this.processorURL || window.URL.createObjectURL(new Blob([`(${this.processor.toString()})();`], { type: \"text/javascript\" }));\n            await audioWorklet.addModule(url);\n            this.resolves[this.processorID].forEach(f => f());\n            this.registering = false;\n            this.registered = true;\n        } catch (e) {\n            this.rejects[this.processorID].forEach(f => f(e));\n        }\n        this.rejects[this.processorID] = [];\n        this.resolves[this.processorID] = [];\n    }\n    static async register(audioWorklet: AudioWorklet): Promise<void> {\n        if (!this.resolves[this.processorID]) this.resolves[this.processorID] = [];\n        if (!this.rejects[this.processorID]) this.rejects[this.processorID] = [];\n        const promise = new Promise<void>((resolve, reject) => {\n            this.resolves[this.processorID].push(resolve);\n            this.rejects[this.processorID].push(reject);\n        });\n        if (this.registered) return new Promise<void>(resolve => resolve());\n        if (this.registering) return promise;\n        if (!this.registered && audioWorklet) this.registerProcessor(audioWorklet);\n        return promise;\n    }\n}\n","import { AudioWorkletRegister, DisposableAudioWorkletNode } from \"./Base\";\nimport processorURL from \"./SpectralAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\n\nexport interface DataToProcessor extends DisposableAudioWorkletMessageEventDataToProcessor {\n    id: number;\n    buffer?: boolean;\n    lastAmplitudes?: boolean;\n    allAmplitudes?: boolean;\n    amplitude?: boolean;\n    estimatedFreq?: boolean;\n    centroid?: boolean;\n    flatness?: boolean;\n    flux?: boolean;\n    kurtosis?: boolean;\n    skewness?: boolean;\n    rolloff?: boolean;\n    slope?: boolean;\n    spread?: boolean;\n}\nexport interface DataFromProcessor {\n    id: number;\n    buffer?: { $: Uint32Array; data: Float32Array[]; $total: Uint32Array; lock: Int32Array };\n    lastAmplitudes?: { $frame: number; data: Float32Array[]; $totalFrames: number };\n    allAmplitudes?: { $frame: Uint32Array; data: Float32Array[]; frames: number; fftBins: number; fftHopSize: number; $totalFrames: Uint32Array; lock: Int32Array };\n    amplitude?: number[];\n    estimatedFreq?: number[];\n    centroid?: number[];\n    flatness?: number[];\n    flux?: number[];\n    kurtosis?: number[];\n    skewness?: number[];\n    rolloff?: number[];\n    slope?: number[];\n    spread?: number[];\n}\nexport type Parameters = \"windowSize\" | \"fftSize\" | \"fftOverlap\" | \"windowFunction\";\nexport const processorID = \"__JSPatcher_SpectralAnalyser\";\nexport class SpectralAnalyserNode extends DisposableAudioWorkletNode<DataFromProcessor, DataToProcessor, Parameters> {\n    private promiseID = 0;\n    private resolves: { [id: number]: (rms?: DataFromProcessor | PromiseLike<DataFromProcessor>) => any } = {};\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        this.port.onmessage = (e: AudioWorkletMessageEvent<DataFromProcessor>) => {\n            const { id } = e.data;\n            delete e.data.id;\n            const f = this.resolves[id];\n            if (f) f(e.data);\n            delete this.resolves[id];\n        };\n    }\n    gets(options: Omit<DataToProcessor, \"id\">) {\n        if (this.destroyed) throw new Error(\"The Node is already destroyed.\");\n        const promise = new Promise<DataFromProcessor>(resolve => this.resolves[this.promiseID] = resolve);\n        this.port.postMessage({ id: this.promiseID++, ...options });\n        return promise;\n    }\n}\nexport class SpectralAnalyserRegister extends AudioWorkletRegister {\n    static processorID = processorID;\n    static processorURL = processorURL;\n    static Node = SpectralAnalyserNode;\n}\n","module.exports = __webpack_public_path__ + \"js/9e69b551a452dd7dda4f.worklet.js\";","import { AudioWorkletRegister, DisposableAudioWorkletNode } from \"./Base\";\nimport processorURL from \"./TemporalAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\n\nexport interface DataToProcessor extends DisposableAudioWorkletMessageEventDataToProcessor {\n    id: number;\n    rms?: boolean;\n    zcr?: boolean;\n    buffer?: boolean;\n}\nexport interface DataFromProcessor {\n    id: number;\n    rms?: number[];\n    zcr?: number[];\n    buffer?: { $: Uint32Array; data: Float32Array[]; $total: Uint32Array; lock: Int32Array };\n}\nexport type Parameters = \"windowSize\";\nexport const processorID = \"__JSPatcher_TemporalAnalyser\";\nexport class TemporalAnalyserNode extends DisposableAudioWorkletNode<DataFromProcessor, DataToProcessor, Parameters> {\n    private promiseID = 0;\n    private resolves: { [id: number]: (rms?: DataFromProcessor | PromiseLike<DataFromProcessor>) => any } = {};\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        this.port.onmessage = (e: AudioWorkletMessageEvent<DataFromProcessor>) => {\n            const { id } = e.data;\n            delete e.data.id;\n            const f = this.resolves[id];\n            if (f) f(e.data);\n            delete this.resolves[id];\n        };\n    }\n    get rms() {\n        return this.gets({ rms: true });\n    }\n    get zcr() {\n        return this.gets({ zcr: true });\n    }\n    get buffer() {\n        return this.gets({ buffer: true });\n    }\n    gets(options: Omit<DataToProcessor, \"id\">) {\n        if (this.destroyed) throw new Error(\"The Node is already destroyed.\");\n        const promise = new Promise<DataFromProcessor>(resolve => this.resolves[this.promiseID] = resolve);\n        this.port.postMessage({ id: this.promiseID++, ...options });\n        return promise;\n    }\n}\nexport class TemporalAnalyserRegister extends AudioWorkletRegister {\n    static processorID = processorID;\n    static processorURL = processorURL;\n    static Node = TemporalAnalyserNode;\n}\n","module.exports = __webpack_public_path__ + \"js/ec324d1044060ffb29bf.worklet.js\";","import { BaseObject, DefaultObject } from \"../Base\";\n\nexport class BaseDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends BaseObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n\nexport class DefaultDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n","import { DefaultDSP } from \"./Base\";\nimport { SpectralAnalysis, TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Record<keyof SpectralAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n    continuous: boolean;\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<SpectralAnalysis>;\nexport class SpectralAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Spectral feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        lastAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the last amplitudes frame\"\n        },\n        allAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting all the amplitudes frame\"\n        },\n        amplitude: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the sum of the last amplitude frame\"\n        },\n        estimatedFreq: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the estimated frequency\"\n        },\n        centroid: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral centroid\"\n        },\n        flatness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flatness\"\n        },\n        flux: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flux\"\n        },\n        kurtosis: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral kurtosis\"\n        },\n        skewness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral skewness\"\n        },\n        rolloff: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral rolloff\"\n        },\n        slope: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral slope\"\n        },\n        spread: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral spread\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"lastAmplitudes\",\n                        \"allAmplitudes\",\n                        \"amplitude\",\n                        \"estimatedFreq\",\n                        \"centroid\",\n                        \"flatness\",\n                        \"flux\",\n                        \"kurtosis\",\n                        \"skewness\",\n                        \"rolloff\",\n                        \"slope\",\n                        \"spread\"\n                    ] as (keyof SpectralAnalysis)[];\n                    const gets: (keyof SpectralAnalysis)[] = [];\n                    extractorKeys.forEach(key => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this.state.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","// import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport { SpectralAnalyserRegister, SpectralAnalyserNode, TWindowFunction } from \"./AudioWorklet/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectrogramUIState {\n    continuous: boolean;\n    frameRate: number;\n    cursorX: number;\n    cursorY: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    // textColor: string;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectrogramUI extends CanvasUI<Spectrogram, {}, SpectrogramUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    $lastFrame = -1;\n    frames = 1;\n    offscreenCtx = document.createElement(\"canvas\").getContext(\"2d\");\n    offscreenVRes = 1024;\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const { ctx, offscreenCtx, frames } = this;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        offscreenCtx.canvas.width = frames;\n        offscreenCtx.canvas.height = this.offscreenVRes;\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const { ctx, offscreenCtx, offscreenVRes } = this;\n        if (!ctx || !offscreenCtx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const { allAmplitudes } = await this.object.state.node.gets({ allAmplitudes: true });\n\n        // Background\n\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!allAmplitudes) return;\n        const { data: f, $totalFrames, fftBins: bins, frames: framesIn, $frame: $frameUi32, lock } = allAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        while (Atomics.load(lock, 0));\n        Atomics.store(lock, 0, 1);\n        // Draw to offscreen canvas\n        let frames = this.frames;\n        const $lastFrame = $totalFrames[0] - 1;\n        const $frame = $frameUi32[0];\n        let $frame0 = $frame;\n        const $frame1 = $frame0 + framesIn;\n        if (frames !== framesIn) {\n            offscreenCtx.canvas.width = framesIn;\n            this.frames = framesIn;\n            frames = framesIn;\n        } else if ($lastFrame >= this.$lastFrame) {\n            $frame0 = Math.max($frame0, $frame1 - ($lastFrame - this.$lastFrame));\n        }\n        this.$lastFrame = $lastFrame;\n        const osChannelHeight = offscreenVRes / channels;\n        const step = Math.max(1, Math.round(bins / osChannelHeight));\n        const vGrid = osChannelHeight / bins;\n        for (let i = 0; i < f.length; i++) {\n            for (let j = $frame0; j < $frame1; j++) {\n                let maxInStep;\n                offscreenCtx.fillStyle = \"black\";\n                offscreenCtx.fillRect(j % frames, i * osChannelHeight, 1, osChannelHeight);\n                for (let k = 0; k < bins; k++) {\n                    const samp = atodb(f[i][(k + j * bins) % l]);\n                    const $step = k % step;\n                    if ($step === 0) maxInStep = samp;\n                    if ($step !== step - 1) {\n                        if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                        continue;\n                    }\n                    const normalized = Math.min(1, Math.max(0, (maxInStep + 10) / 100 + 1));\n                    if (normalized === 0) continue;\n                    const hue = (normalized * 180 + 240) % 360;\n                    const lum = normalized * 50;\n                    offscreenCtx.fillStyle = `hsl(${hue}, 100%, ${lum}%)`;\n                    offscreenCtx.fillRect(j % frames, (bins - k - 1) * vGrid + i * osChannelHeight, 1, Math.max(1, vGrid));\n                }\n            }\n        }\n        Atomics.store(lock, 0, 0);\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        // Horizontal Range\n        ctx.save();\n        ctx.globalCompositeOperation = \"lighter\";\n        ctx.imageSmoothingEnabled = false;\n        $frame0 = $frame;\n        if ($frame1 === frames) {\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, frames, offscreenVRes, left, 0, width - left, height - bottom);\n        } else {\n            const sSplit = frames - $frame0;\n            const dSplit = sSplit / frames * (width - left);\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, sSplit, offscreenVRes, left, 0, dSplit, height - bottom);\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, $frame1 - frames - 0.01, offscreenVRes, dSplit + left, 0, width - left - dSplit, height - bottom);\n        }\n        ctx.restore();\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectrogramUIState, \"cursorX\" | \"cursorY\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectrogram extends BaseDSP<{}, State, [Bang], [], [], Props, SpectrogramUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectrogramUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserRegister.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserRegister.Node(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport { SpectralAnalyserRegister, SpectralAnalyserNode, TWindowFunction } from \"./AudioWorklet/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectroscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    fgColor: string;\n    hueOffset: number;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectroscopeUI extends CanvasUI<Spectroscope, {}, SpectroscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            fgColor,\n            hueOffset,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const { lastAmplitudes } = await this.object.state.node.gets({ lastAmplitudes: true });\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!lastAmplitudes) return;\n        const { data: f } = lastAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        // Horizontal Range\n        const $0 = 0; // Draw start\n        const $1 = l; // Draw End\n        const gridX = (width - left) / ($1 - $0);\n        const step = Math.max(1, Math.round(1 / gridX));\n        for (let i = 0; i < f.length; i++) {\n            ctx.beginPath();\n            channelColor[i] = Color(fgColor).shiftHue(i * hueOffset).toHSL();\n            ctx.fillStyle = channelColor[i];\n            let maxInStep;\n            for (let j = $0; j < $1; j++) {\n                const samp = atodb(f[i][j]);\n                const $step = (j - $0) % step;\n                if ($step === 0) maxInStep = samp;\n                if ($step !== step - 1) {\n                    if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                    continue;\n                }\n                const x = (j - $0) * gridX + left;\n                const y = channelHeight * (i + 1 - Math.min(1, Math.max(0, maxInStep / 100 + 1)));\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n            }\n            ctx.lineTo(width, channelHeight * (i + 1));\n            ctx.lineTo(left, channelHeight * (i + 1));\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectroscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectroscope extends BaseDSP<{}, State, [Bang], [], [], Props, SpectroscopeUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        fgColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Foreground color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectroscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserRegister.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserRegister.Node(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport { TemporalAnalyserRegister, TemporalAnalyserNode, DataToProcessor, DataFromProcessor } from \"./AudioWorklet/TemporalAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Omit<DataToProcessor, \"id\"> {\n    speedLim: number;\n    windowSize: number;\n    continuous: boolean;\n}\nexport interface State {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Omit<DataFromProcessor, \"id\">;\nexport class TemporalAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Temporal feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        rms: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the Root Mean Square\"\n        },\n        zcr: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the zero crossing count\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"rms\",\n                        \"zcr\"\n                    ] as (keyof Omit<DataToProcessor, \"id\">)[];\n                    const gets: Omit<DataToProcessor, \"id\"> = {};\n                    extractorKeys.forEach(key => gets[key] = this.getProp(key));\n                    const got = await this.state.node.gets(gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserRegister.register(this.audioCtx.audioWorklet);\n            this.state.node = new TemporalAnalyserRegister.Node(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { SpectralAnalyser } from \"./SpectralAnalyser\";\nimport { TemporalAnalyser } from \"./TemporalAnalyser\";\nimport { Oscilloscope } from \"./Oscilloscope\";\nimport { Spectroscope } from \"./Spectroscope\";\nimport { Spectrogram } from \"./Spectrogram\";\n\nexport default {\n    \"temporalAnalyser~\": TemporalAnalyser,\n    \"spectralAnalyser~\": SpectralAnalyser,\n    \"scope~\": Oscilloscope,\n    \"spectroscope~\": Spectroscope,\n    \"spectrogram~\": Spectrogram\n};\n","import processorURL from \"./SpectralAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters } from \"./SpectralAnalyserWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorID = \"__JSPatcher_SpectralAnalyser\";\nexport default class SpectralAnalyserNode extends AudioWorkletProxyNode<ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters> implements ISpectralAnalyserNode {\n    static processorID = processorID;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorID, processorURL);\n    static fnNames: (keyof ISpectralAnalyserProcessor)[] = [\"getBuffer\", \"getLastAmplitudes\", \"getAllAmplitudes\", \"getAllAmplitudes\", \"getEstimatedFreq\", \"getCentroid\", \"getFlatness\", \"getFlux\", \"getKurtosis\", \"getSkewness\", \"getRolloff\", \"getSlope\", \"getSpread\", \"gets\", \"destroy\"];\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this.port.close();\n        };\n    }\n}\n","module.exports = __webpack_public_path__ + \"js/ad4c614a09f39bccddfc.worklet.js\";"],"sourceRoot":""}