{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/dsp/Base.ts","webpack://JSPatcher/./src/core/objects/dsp/Oscilloscope.ts","webpack://JSPatcher/./src/core/objects/dsp/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectrogram.ts","webpack://JSPatcher/./src/core/objects/dsp/Spectroscope.ts","webpack://JSPatcher/./src/core/objects/dsp/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/objects/dsp/exports.ts","webpack://JSPatcher/./src/core/worklets/AudioWorkletProxyNode.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.ts","webpack://JSPatcher/./src/core/worklets/SpectralAnalyser.worklet.ts","webpack://JSPatcher/./src/core/worklets/TemporalAnalyser.ts","webpack://JSPatcher/./src/core/worklets/TemporalAnalyser.worklet.ts"],"names":["BaseDSP","BaseObject","DefaultDSP","DefaultObject","OscilloscopeUI","CanvasUI","componentDidMount","bgColor","state","ctx","width","height","fullSize","fillStyle","fillRect","paint","continuous","schedulePaint","object","node","destroyed","stablize","interleaved","range","autoRange","showStats","phosphorColor","hueOffset","textColor","gridColor","seperatorColor","left","bottom","estimatedFreq","buffer","gets","sampleRate","audioCtx","clearRect","$","$ui32","data","t","lock","length","Atomics","load","store","channels","l","min","max","yFactor","i","s","j","Math","abs","strokeStyle","vStep","beginPath","setLineDash","gridChannels","channelHeight","y","moveTo","lineTo","stroke","lineWidth","channelColor","$zerox","period","times","floor","$0","$1","drawL","thresh","isFinite","round","gridX","step","Color","shiftHue","toHSL","maxInStep","minInStep","$j","samp","$step","x","font","textAlign","textBaseline","fillText","toFixed","freqStatY","freq","Oscilloscope","undefined","subscribe","on","inlets","outlets","props","parameters","windowFunction","applyBPF","get","indexOf","fftSize","fftOverlap","windowSize","SpectralAnalyserNode","register","audioWorklet","getProp","disconnectAudioInlet","inletAudioConnections","index","connectAudioInlet","inlet","isBang","updateUI","destroy","isHot","type","description","default","enums","isUIState","frameRate","SpectralAnalyser","$requestTimer","startRequest","request","extractorKeys","forEach","key","push","got","outlet","scheduleRequest","window","setTimeout","e","clearTimeout","speedLim","lastAmplitudes","allAmplitudes","amplitude","centroid","flatness","flux","kurtosis","skewness","rolloff","slope","spread","SpectrogramUI","document","createElement","getContext","offscreenCtx","frames","canvas","offscreenVRes","getAllAmplitudes","f","$totalFrames","fftBins","bins","framesIn","$frame","$frameUi32","$lastFrame","$frame0","$frame1","osChannelHeight","vGrid","k","atodb","normalized","hue","lum","hStep","save","globalCompositeOperation","imageSmoothingEnabled","drawImage","sSplit","dSplit","restore","Spectrogram","SpectroscopeUI","fgColor","getLastAmplitudes","closePath","fill","Spectroscope","TemporalAnalyser","TemporalAnalyserNode","absMax","rms","zcr","Node","AudioWorkletNode","fnNames","constructor","context","name","options","resolves","rejects","handleDisposed","port","removeEventListener","handleMessage","close","id","call","args","value","error","r","postMessage","_disposed","Promise","resolve","reject","performance","now","Ctor","start","addEventListener","processorID","AudioWorkletProxyNode","numberOfInputs","numberOfOutputs","_destroy","AudioWorkletRegister","processorURL"],"mappings":"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","file":"js/02bfbb1553af9474d5e2.js","sourcesContent":["import { BaseObject, DefaultObject } from \"../Base\";\n\nexport class BaseDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends BaseObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n\nexport class DefaultDSP<\n    D extends {} = {}, S extends {} = {},\n    I extends any[] = any[], O extends any[] = any[],\n    A extends any[] = any[], P extends {} = {},\n    U extends {} = {}, E extends {} = {}\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\n    static package = \"dsp\";\n    static author = \"Fr0stbyteR\";\n    static version = \"1.0.0\";\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface OscilloscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    interleaved: boolean;\n    stablize: boolean;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    range: number;\n    autoRange: boolean;\n    showStats: boolean;\n    bgColor: string;\n    phosphorColor: string;\n    hueOffset: number;\n    textColor: string;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class OscilloscopeUI extends CanvasUI<Oscilloscope, {}, OscilloscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            stablize,\n            interleaved,\n            // $cursor,\n            range,\n            autoRange,\n            showStats,\n            bgColor,\n            phosphorColor,\n            hueOffset,\n            textColor,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const { estimatedFreq, buffer } = await this.object.state.node.gets(\"estimatedFreq\", \"buffer\");\n        const { sampleRate } = this.object.audioCtx;\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!buffer) return;\n\n        const { $: $ui32, data: t, lock } = buffer;\n        if (!t || !t.length || !t[0].length) return;\n\n        while (Atomics.load(lock, 0));\n        Atomics.store(lock, 0, 1);\n        const $ = $ui32[0];\n        const channels = t.length;\n        const l = t[0].length;\n        // Vertical Range\n        let min = -range;\n        let max = range;\n        let yFactor = range;\n        if (autoRange) {\n            // Fastest way to get min and max to have: 1. max abs value for y scaling, 2. mean value for zero-crossing\n            let i = channels;\n            let s = 0;\n            while (i--) {\n                let j = l;\n                while (j--) {\n                    s = t[i][j];\n                    if (s < min) min = s;\n                    else if (s > max) max = s;\n                }\n            }\n            yFactor = Math.max(1, Math.abs(min), Math.abs(max))/* * vzoom*/;\n        }\n        // Grids\n        ctx.strokeStyle = gridColor;\n        let vStep = 0.25;\n        while (yFactor / 2 / vStep > 2) vStep *= 2; // Minimum horizontal grids in channel one side = 2\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = interleaved ? channels : 1;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            let y = (i + 0.5) * channelHeight;\n            ctx.moveTo(left, y);\n            ctx.lineTo(width, y); // 0-line\n            for (let j = vStep; j < yFactor; j += vStep) {\n                y = (i + 0.5 + j / yFactor / 2) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y); // below 0\n                y = (i + 0.5 - j / yFactor / 2) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y); // above 0\n            }\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        let $zerox = 0; // First Zero-crossing of first channel\n        const period = sampleRate / estimatedFreq[0];\n        const times = Math.floor(l / period) - 1;\n        for (let i = 0; i < channels; i++) {\n            // Horizontal Range\n            let $0 = 0; // Draw start\n            let $1 = l; // Draw End\n            let drawL = l; // Length to draw\n            if (stablize) { // Stablization\n                if (i === 0) {\n                    const thresh = (min + max) * 0.5 + 0.001; // the zero-crossing with \"offset\"\n                    while ($zerox < l && t[i][($ + $zerox++) % l] > thresh); // Find first raise\n                    if ($zerox >= l - 1) { // Found nothing, no stablization\n                        $zerox = 0;\n                    } else {\n                        while ($zerox < l && t[i][($ + $zerox++) % l] < thresh); // Find first drop\n                        $zerox--;\n                        if ($zerox >= l - 1 || $zerox < 0) {\n                            $zerox = 0;\n                        }\n                    }\n                }\n                drawL = times > 0 && isFinite(period) ? ~~Math.min(period * times, l - $zerox) : l - $zerox; // length to draw\n            }\n            $0 = Math.round($zerox/* + drawL * zoomOffset*/);\n            $1 = Math.round($zerox + drawL/* / zoom + drawL * zoomOffset*/);\n            const gridX = (width - left) / ($1 - $0);\n            const step = Math.max(1, Math.round(1 / gridX));\n\n            ctx.beginPath();\n            channelColor[i] = Color(phosphorColor).shiftHue(i * hueOffset).toHSL();\n            ctx.strokeStyle = channelColor[i];\n            let maxInStep;\n            let minInStep;\n            for (let j = $0; j < $1; j++) {\n                const $j = (j + $) % l;\n                const samp = t[i][$j];\n                const $step = (j - $0) % step;\n                if ($step === 0) {\n                    maxInStep = samp;\n                    minInStep = samp;\n                }\n                if ($step !== step - 1) {\n                    if ($step !== 0) {\n                        if (samp > maxInStep) maxInStep = samp;\n                        if (samp < minInStep) minInStep = samp;\n                    }\n                    continue;\n                }\n                const x = (j - $0) * gridX + left;\n                let y = channelHeight * (+interleaved * i + 0.5 - maxInStep / yFactor * 0.5);\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n                if (minInStep !== maxInStep) {\n                    y = channelHeight * (+interleaved * i + 0.5 - minInStep / yFactor * 0.5);\n                    ctx.lineTo(x, y);\n                }\n            }\n            ctx.stroke();\n        }\n        Atomics.store(lock, 0, 0);\n        // Stats\n        if (showStats) {\n            ctx.font = \"bold 12px Consolas, monospace\";\n            ctx.fillStyle = textColor;\n            ctx.textAlign = \"left\";\n            ctx.textBaseline = \"top\";\n            ctx.fillText(yFactor.toFixed(2), 2, 2);\n            ctx.textBaseline = \"bottom\";\n            ctx.fillText((-yFactor).toFixed(2), 2, height - 2);\n            ctx.textAlign = \"right\";\n            const freqStatY = height - 2 - (estimatedFreq.length - 1) * 14;\n            for (let i = 0; i < estimatedFreq.length; i++) {\n                const freq = estimatedFreq[i];\n                ctx.fillStyle = channelColor[i];\n                const y = interleaved ? channelHeight * (i + 1) - 2 : freqStatY + 14 * i;\n                ctx.fillText(freq.toFixed(2) + \"Hz\", width - 2, y);\n            }\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<OscilloscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Oscilloscope extends BaseDSP<{}, State, [Bang], [], [], Props, OscilloscopeUIState> {\n    static description = \"Oscilloscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        interleaved: {\n            type: \"boolean\",\n            default: false,\n            description: \"Draw channels seperately\",\n            isUIState: true\n        },\n        stablize: {\n            type: \"boolean\",\n            default: true,\n            description: \"Stablize\",\n            isUIState: true\n        },\n        range: {\n            type: \"number\",\n            default: 1,\n            description: \"Vertical range\",\n            isUIState: true\n        },\n        autoRange: {\n            type: \"boolean\",\n            default: true,\n            description: \"Auto adjust range if > 1\",\n            isUIState: true\n        },\n        showStats: {\n            type: \"boolean\",\n            default: true,\n            description: \"Show stats texts\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        phosphorColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Phosphor color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        textColor: {\n            type: \"color\",\n            default: \"#DDDD99\",\n            description: \"Info text color\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = OscilloscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport { SpectralAnalysis, TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Record<keyof SpectralAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n    continuous: boolean;\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<SpectralAnalysis>;\nexport class SpectralAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Spectral feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        lastAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the last amplitudes frame\"\n        },\n        allAmplitudes: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting all the amplitudes frame\"\n        },\n        amplitude: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the sum of the last amplitude frame\"\n        },\n        estimatedFreq: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the estimated frequency\"\n        },\n        centroid: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral centroid\"\n        },\n        flatness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flatness\"\n        },\n        flux: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral flux\"\n        },\n        kurtosis: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral kurtosis\"\n        },\n        skewness: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral skewness\"\n        },\n        rolloff: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral rolloff\"\n        },\n        slope: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral slope\"\n        },\n        spread: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the spectral spread\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"lastAmplitudes\",\n                        \"allAmplitudes\",\n                        \"amplitude\",\n                        \"estimatedFreq\",\n                        \"centroid\",\n                        \"flatness\",\n                        \"flux\",\n                        \"kurtosis\",\n                        \"skewness\",\n                        \"rolloff\",\n                        \"slope\",\n                        \"spread\"\n                    ] as (keyof SpectralAnalysis)[];\n                    const gets: (keyof SpectralAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this.state.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","// import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectrogramUIState {\n    continuous: boolean;\n    frameRate: number;\n    cursorX: number;\n    cursorY: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    // textColor: string;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectrogramUI extends CanvasUI<Spectrogram, {}, SpectrogramUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    $lastFrame = -1;\n    frames = 1;\n    offscreenCtx = document.createElement(\"canvas\").getContext(\"2d\");\n    offscreenVRes = 1024;\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const { ctx, offscreenCtx, frames } = this;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        offscreenCtx.canvas.width = frames;\n        offscreenCtx.canvas.height = this.offscreenVRes;\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const { ctx, offscreenCtx, offscreenVRes } = this;\n        if (!ctx || !offscreenCtx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const allAmplitudes = await this.object.state.node.getAllAmplitudes();\n\n        // Background\n\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!allAmplitudes) return;\n        const { data: f, $totalFrames, fftBins: bins, frames: framesIn, $frame: $frameUi32, lock } = allAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        while (Atomics.load(lock, 0));\n        Atomics.store(lock, 0, 1);\n        // Draw to offscreen canvas\n        let frames = this.frames;\n        const $lastFrame = $totalFrames[0] - 1;\n        const $frame = $frameUi32[0];\n        let $frame0 = $frame;\n        const $frame1 = $frame0 + framesIn;\n        if (frames !== framesIn) {\n            offscreenCtx.canvas.width = framesIn;\n            this.frames = framesIn;\n            frames = framesIn;\n        } else if ($lastFrame >= this.$lastFrame) {\n            $frame0 = Math.max($frame0, $frame1 - ($lastFrame - this.$lastFrame));\n        }\n        this.$lastFrame = $lastFrame;\n        const osChannelHeight = offscreenVRes / channels;\n        const step = Math.max(1, Math.round(bins / osChannelHeight));\n        const vGrid = osChannelHeight / bins;\n        for (let i = 0; i < f.length; i++) {\n            for (let j = $frame0; j < $frame1; j++) {\n                let maxInStep;\n                offscreenCtx.fillStyle = \"black\";\n                offscreenCtx.fillRect(j % frames, i * osChannelHeight, 1, osChannelHeight);\n                for (let k = 0; k < bins; k++) {\n                    const samp = atodb(f[i][(k + j * bins) % l]);\n                    const $step = k % step;\n                    if ($step === 0) maxInStep = samp;\n                    if ($step !== step - 1) {\n                        if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                        continue;\n                    }\n                    const normalized = Math.min(1, Math.max(0, (maxInStep + 10) / 100 + 1));\n                    if (normalized === 0) continue;\n                    const hue = (normalized * 180 + 240) % 360;\n                    const lum = normalized * 50;\n                    offscreenCtx.fillStyle = `hsl(${hue}, 100%, ${lum}%)`;\n                    offscreenCtx.fillRect(j % frames, (bins - k - 1) * vGrid + i * osChannelHeight, 1, Math.max(1, vGrid));\n                }\n            }\n        }\n        Atomics.store(lock, 0, 0);\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        // Horizontal Range\n        ctx.save();\n        ctx.globalCompositeOperation = \"lighter\";\n        ctx.imageSmoothingEnabled = false;\n        $frame0 = $frame;\n        if ($frame1 === frames) {\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, frames, offscreenVRes, left, 0, width - left, height - bottom);\n        } else {\n            const sSplit = frames - $frame0;\n            const dSplit = sSplit / frames * (width - left);\n            ctx.drawImage(offscreenCtx.canvas, $frame0, 0, sSplit, offscreenVRes, left, 0, dSplit, height - bottom);\n            ctx.drawImage(offscreenCtx.canvas, 0, 0, $frame1 - frames - 0.01, offscreenVRes, dSplit + left, 0, width - left - dSplit, height - bottom);\n        }\n        ctx.restore();\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectrogramUIState, \"cursorX\" | \"cursorY\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectrogram extends BaseDSP<{}, State, [Bang], [], [], Props, SpectrogramUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectrogramUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import * as Color from \"color-js\";\nimport { CanvasUI } from \"../BaseUI\";\nimport SpectralAnalyserNode from \"../../worklets/SpectralAnalyser\";\nimport { TWindowFunction } from \"../../worklets/SpectralAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { BaseDSP } from \"./Base\";\nimport { Bang, isBang } from \"../Base\";\nimport { atodb } from \"../../../utils/math\";\n\nexport interface SpectroscopeUIState {\n    continuous: boolean;\n    frameRate: number;\n    $cursor: number;\n    zoom: number;\n    zoomOffset: number;\n    bgColor: string;\n    fgColor: string;\n    hueOffset: number;\n    gridColor: string;\n    seperatorColor: string;\n    paint: {};\n}\nexport class SpectroscopeUI extends CanvasUI<Spectroscope, {}, SpectroscopeUIState> {\n    static defaultSize = [120, 60] as [number, number];\n    componentDidMount() {\n        const { bgColor } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n        const [width, height] = this.fullSize();\n        // Background\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n        super.componentDidMount();\n    }\n    async paint() {\n        if (this.state.continuous) this.schedulePaint();\n        if (!this.object.state.node) return;\n        if (this.object.state.node.destroyed) return;\n        const {\n            // width,\n            // height,\n            // zoom,\n            // zoomOffset,\n            // $cursor,\n            bgColor,\n            fgColor,\n            hueOffset,\n            gridColor,\n            seperatorColor\n        } = this.state;\n        const ctx = this.ctx;\n        if (!ctx) return;\n\n        const left = 0;\n        const bottom = 0;\n\n        const lastAmplitudes = await this.object.state.node.getLastAmplitudes();\n\n        // Background\n        const [width, height] = this.fullSize();\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, width, height);\n\n        if (!lastAmplitudes) return;\n        const { data: f } = lastAmplitudes;\n        if (!f || !f.length || !f[0].length) return;\n        const l = f[0].length;\n        const channels = f.length;\n\n        // Grids\n        ctx.strokeStyle = gridColor;\n        const vStep = 0.25;\n        const hStep = 0.25;\n        ctx.beginPath();\n        ctx.setLineDash([]);\n        const gridChannels = channels;\n        const channelHeight = (height - bottom) / gridChannels;\n        for (let i = 0; i < gridChannels; i++) {\n            for (let j = vStep; j < 1; j += vStep) { // Horizontal lines\n                const y = (i + j) * channelHeight;\n                ctx.moveTo(left, y);\n                ctx.lineTo(width, y);\n            }\n        }\n        for (let i = hStep; i < 1; i += hStep) {\n            const x = left + (width - left) * i;\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, bottom);\n        }\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.setLineDash([4, 2]);\n        ctx.strokeStyle = seperatorColor;\n        for (let i = 1; i < gridChannels; i++) {\n            ctx.moveTo(left, i * channelHeight);\n            ctx.lineTo(width, i * channelHeight);\n        }\n        ctx.stroke();\n        ctx.setLineDash([]);\n        ctx.lineWidth = 2;\n        const channelColor: string[] = [];\n        // Horizontal Range\n        const $0 = 0; // Draw start\n        const $1 = l; // Draw End\n        const gridX = (width - left) / ($1 - $0);\n        const step = Math.max(1, Math.round(1 / gridX));\n        for (let i = 0; i < f.length; i++) {\n            ctx.beginPath();\n            channelColor[i] = Color(fgColor).shiftHue(i * hueOffset).toHSL();\n            ctx.fillStyle = channelColor[i];\n            let maxInStep;\n            for (let j = $0; j < $1; j++) {\n                const samp = atodb(f[i][j]);\n                const $step = (j - $0) % step;\n                if ($step === 0) maxInStep = samp;\n                if ($step !== step - 1) {\n                    if ($step !== 0 && samp > maxInStep) maxInStep = samp;\n                    continue;\n                }\n                const x = (j - $0) * gridX + left;\n                const y = channelHeight * (i + 1 - Math.min(1, Math.max(0, maxInStep / 100 + 1)));\n                if (j === $0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n            }\n            ctx.lineTo(width, channelHeight * (i + 1));\n            ctx.lineTo(left, channelHeight * (i + 1));\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n}\nexport interface State {\n    node: SpectralAnalyserNode;\n}\nexport interface Props extends Omit<SpectroscopeUIState, \"$cursor\" | \"zoom\" | \"zoomOffset\" | \"paint\"> {\n    windowSize: number;\n    fftSize: number;\n    fftOverlap: number;\n    windowFunction: TWindowFunction;\n}\nexport class Spectroscope extends BaseDSP<{}, State, [Bang], [], [], Props, SpectroscopeUIState> {\n    static description = \"Spectroscope\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal\"\n    }];\n    static props: TPropsMeta<Props> = {\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Signal window size\"\n        },\n        fftSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"FFT Size for analysis\"\n        },\n        fftOverlap: {\n            type: \"number\",\n            default: 2,\n            description: \"FFT overlap count (integer)\"\n        },\n        windowFunction: {\n            type: \"enum\",\n            enums: [\"blackman\", \"hamming\", \"hann\", \"triangular\"],\n            default: \"blackman\",\n            description: \"Window Function aoolied for FFT analysis window\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: true,\n            description: \"Continuous drawing\",\n            isUIState: true\n        },\n        frameRate: {\n            type: \"number\",\n            default: 60,\n            description: \"UI refresh rate\",\n            isUIState: true\n        },\n        bgColor: {\n            type: \"color\",\n            default: \"rgb(40, 40, 40)\",\n            description: \"Background color\",\n            isUIState: true\n        },\n        fgColor: {\n            type: \"color\",\n            default: \"hsl(0, 100%, 85%)\",\n            description: \"Foreground color\",\n            isUIState: true\n        },\n        hueOffset: {\n            type: \"number\",\n            default: 60,\n            description: \"Channel Color Hue offset\",\n            isUIState: true\n        },\n        gridColor: {\n            type: \"color\",\n            default: \"#404040\",\n            description: \"Grid color\",\n            isUIState: true\n        },\n        seperatorColor: {\n            type: \"color\",\n            default: \"white\",\n            description: \"Channel seperator color\",\n            isUIState: true\n        }\n    };\n    static UI = SpectroscopeUI;\n    state: State = { node: undefined };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 0;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.windowFunction) this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(props.windowFunction)]]);\n                if (props.fftSize) this.applyBPF(parameters.get(\"fftSize\"), [[props.fftSize]]);\n                if (props.fftOverlap) this.applyBPF(parameters.get(\"fftOverlap\"), [[props.fftOverlap]]);\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await SpectralAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new SpectralAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowFunction\"), [[[\"blackman\", \"hamming\", \"hann\", \"triangular\"].indexOf(this.getProp(\"windowFunction\"))]]);\n            this.applyBPF(parameters.get(\"fftSize\"), [[this.getProp(\"fftSize\")]]);\n            this.applyBPF(parameters.get(\"fftOverlap\"), [[this.getProp(\"fftOverlap\")]]);\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (isBang(data)) this.updateUI({ paint: {} });\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { DefaultDSP } from \"./Base\";\nimport TemporalAnalyserNode from \"../../worklets/TemporalAnalyser\";\nimport { TemporalAnalysis } from \"../../worklets/TemporalAnalyserWorklet.types\";\nimport { TMeta, TPropsMeta } from \"../../types\";\nimport { Bang, isBang } from \"../Base\";\n\nexport interface Props extends Record<keyof TemporalAnalysis, boolean> {\n    speedLim: number;\n    windowSize: number;\n    continuous: boolean;\n}\nexport interface State {\n    node: TemporalAnalyserNode;\n    $requestTimer: number;\n}\ntype Outlet0 = Partial<TemporalAnalysis>;\nexport class TemporalAnalyser extends DefaultDSP<{}, State, [Bang], [Outlet0], [], Props> {\n    static description = \"Temporal feature extractor\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"signal\",\n        description: \"Signal, bang to extract features\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"Features chosen as object\"\n    }];\n    static props: TPropsMeta<Props> = {\n        speedLim: {\n            type: \"number\",\n            default: 16,\n            description: \"If continuous, value output speed limit in ms\"\n        },\n        windowSize: {\n            type: \"number\",\n            default: 1024,\n            description: \"Buffer window size\"\n        },\n        continuous: {\n            type: \"boolean\",\n            default: false,\n            description: \"Whether output is continuous\"\n        },\n        buffer: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the signal buffer\"\n        },\n        absMax: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the absolute Maximum\"\n        },\n        rms: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the Root Mean Square\"\n        },\n        zcr: {\n            type: \"boolean\",\n            default: false,\n            description: \"Getting the zero crossing count\"\n        }\n    };\n    state: State = { node: undefined, $requestTimer: -1 };\n    subscribe() {\n        super.subscribe();\n        const startRequest = () => {\n            const request = async () => {\n                if (this.state.node && !this.state.node.destroyed) {\n                    const extractorKeys = [\n                        \"buffer\",\n                        \"rms\",\n                        \"zcr\",\n                        \"absMax\"\n                    ] as (keyof TemporalAnalysis)[];\n                    const gets: (keyof TemporalAnalysis)[] = [];\n                    extractorKeys.forEach((key) => {\n                        if (this.getProp(key)) gets.push(key);\n                    });\n                    const got = await this.state.node.gets(...gets);\n                    this.outlet(0, got);\n                }\n                if (this.getProp(\"continuous\")) scheduleRequest();\n            };\n            const scheduleRequest = () => {\n                this.state.$requestTimer = window.setTimeout(request, this.getProp(\"speedLim\"));\n            };\n            request();\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"updateProps\", (props) => {\n            if (this.state.node) {\n                const { parameters } = this.state.node;\n                if (props.continuous) startRequest();\n                if (props.windowSize) this.applyBPF(parameters.get(\"windowSize\"), [[props.windowSize]]);\n            }\n        });\n        this.on(\"postInit\", async () => {\n            await TemporalAnalyserNode.register(this.audioCtx.audioWorklet);\n            this.state.node = new TemporalAnalyserNode(this.audioCtx);\n            const { parameters } = this.state.node;\n            this.applyBPF(parameters.get(\"windowSize\"), [[this.getProp(\"windowSize\")]]);\n            this.disconnectAudioInlet();\n            this.inletAudioConnections[0] = { node: this.state.node, index: 0 };\n            this.connectAudioInlet();\n            if (this.getProp(\"continuous\")) startRequest();\n            this.on(\"inlet\", (e) => {\n                if (e.inlet === 0) {\n                    if (isBang(e.data)) startRequest();\n                }\n            });\n        });\n        this.on(\"destroy\", () => {\n            window.clearTimeout(this.state.$requestTimer);\n            if (this.state.node) this.state.node.destroy();\n        });\n    }\n}\n","import { SpectralAnalyser } from \"./SpectralAnalyser\";\nimport { TemporalAnalyser } from \"./TemporalAnalyser\";\nimport { Oscilloscope } from \"./Oscilloscope\";\nimport { Spectroscope } from \"./Spectroscope\";\nimport { Spectrogram } from \"./Spectrogram\";\n\nexport default {\n    \"temporalAnalyser~\": TemporalAnalyser,\n    \"spectralAnalyser~\": SpectralAnalyser,\n    \"scope~\": Oscilloscope,\n    \"spectroscope~\": Spectroscope,\n    \"spectrogram~\": Spectrogram\n};\n","import { TypedMessageEvent, MessagePortResponse } from \"./TypedAudioWorklet\";\nimport { AudioWorkletProxyNode } from \"./AudioWorkletProxyNode.types\";\n\nconst Node = class extends AudioWorkletNode {\n    static get fnNames(): string[] {\n        return [];\n    }\n    _disposed = false;\n    constructor(context: AudioContext, name: string, options?: AudioWorkletNodeOptions) {\n        super(context, name, options);\n        const resolves: Record<number, ((...args: any[]) => any)> = {};\n        const rejects: Record<number, ((...args: any[]) => any)> = {};\n        const handleDisposed = () => {\n            this.port.removeEventListener(\"message\", handleMessage);\n            this.port.close();\n        };\n        const handleMessage = async (e: TypedMessageEvent) => {\n            const { id, call, args, value, error } = e.data;\n            if (call) {\n                const r: MessagePortResponse = { id };\n                try {\n                    r.value = await (this as any)[call](...args);\n                } catch (e) {\n                    r.error = e;\n                }\n                this.port.postMessage(r);\n                if (this._disposed) handleDisposed();\n            } else {\n                if (error) {\n                    if (rejects[id]) rejects[id](error);\n                    delete rejects[id];\n                    return;\n                }\n                if (resolves[id]) {\n                    resolves[id](value);\n                    delete resolves[id];\n                }\n            }\n        };\n        // eslint-disable-next-line\n        const call = (call: string, ...args: any[]) => {\n            return new Promise<any>((resolve, reject) => {\n                const id = performance.now();\n                resolves[id] = resolve;\n                rejects[id] = reject;\n                this.port.postMessage({ id, call, args });\n            });\n        };\n        const Ctor = (this.constructor as typeof AudioWorkletProxyNode);\n        Ctor.fnNames.forEach(name => (this as any)[name] = (...args: any[]) => call(name, ...args));\n        this.port.start();\n        this.port.addEventListener(\"message\", handleMessage);\n    }\n} as typeof AudioWorkletProxyNode;\n\nexport default Node;\n","import processorURL from \"./SpectralAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters } from \"./SpectralAnalyserWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorID = \"__JSPatcher_SpectralAnalyser\";\nexport default class SpectralAnalyserNode extends AudioWorkletProxyNode<ISpectralAnalyserNode, ISpectralAnalyserProcessor, SpectralAnalyserParameters> implements ISpectralAnalyserNode {\n    static processorID = processorID;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorID, processorURL);\n    static fnNames: (keyof ISpectralAnalyserProcessor)[] = [\"getBuffer\", \"getLastAmplitudes\", \"getAllAmplitudes\", \"getAllAmplitudes\", \"getEstimatedFreq\", \"getCentroid\", \"getFlatness\", \"getFlux\", \"getKurtosis\", \"getSkewness\", \"getRolloff\", \"getSlope\", \"getSpread\", \"gets\", \"destroy\"];\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n}\n","module.exports = __webpack_public_path__ + \"js/e33b0731140e5f705a3e.worklet.js\";","import processorURL from \"./TemporalAnalyser.worklet.ts\"; // eslint-disable-line import/extensions\nimport AudioWorkletProxyNode from \"./AudioWorkletProxyNode\";\nimport { ITemporalAnalyserNode, ITemporalAnalyserProcessor, TemporalAnalyserParameters } from \"./TemporalAnalyserWorklet.types\";\nimport AudioWorkletRegister from \"./AudioWorkletRegister\";\n\nexport const processorID = \"__JSPatcher_TemporalAnalyser\";\nexport default class TemporalAnalyserNode extends AudioWorkletProxyNode<ITemporalAnalyserNode, ITemporalAnalyserProcessor, TemporalAnalyserParameters> implements ITemporalAnalyserNode {\n    static processorID = processorID;\n    static register = (audioWorklet: AudioWorklet) => AudioWorkletRegister.register(audioWorklet, processorID, processorURL);\n    static fnNames: (keyof ITemporalAnalyserProcessor)[] = [\"getRms\", \"getAbsMax\", \"getZcr\", \"getEstimatedFreq\", \"getBuffer\", \"gets\", \"destroy\"];\n    constructor(context: BaseAudioContext) {\n        super(context, processorID, { numberOfInputs: 1, numberOfOutputs: 0 });\n        const _destroy = this.destroy;\n        this.destroy = async () => {\n            await _destroy.call(this);\n            this._disposed = true;\n        };\n    }\n}\n","module.exports = __webpack_public_path__ + \"js/bd5ae9635c0a67668011.worklet.js\";"],"sourceRoot":""}