{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/guido/view.tsx"],"names":["GuidoView","UIObject","gmn","undefined","svgs","container","parser","ar","gr","subscribe","processAR","guido","patcher","env","guidoWorker","state","string2AR","freeAR","setState","processGR","systemsDistance","systemsDistribution","systemsDistribLimit","force","spring","neighborhoodSpacing","optimalPageFill","resizePage2Music","proportionalRenderingForceMultiplicator","checkLyricsCollisions","props","settings","ar2grSettings","freeGR","error","parserGetErrorCode","processSVG","pagesCount","getPageCount","Promise","all","Array","fill","map","v","i","gr2SVGColored","template","document","createElement","appendChild","svg","svgContainer","innerHTML","updateUI","children","outlet","process","on","inlets","outlets","openParser","data","inlet","closeParser","isHot","type","description","default","DOMUI","object"],"mappings":"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","file":"js/1fcb895f339cb7a4a5ef.js","sourcesContent":["import { TMeta, TPropsMeta } from \"../../types\";\nimport { DOMUI, DOMUIState } from \"../BaseUI\";\nimport UIObject from \"../UI/Base\";\n\ninterface State {\n    gmn: string;\n    svgs: string[];\n    container: HTMLDivElement;\n    parser: $GuidoParser;\n    ar: $ARHandler;\n    gr: $GRHandler;\n}\n\nexport default class GuidoView extends UIObject<{}, State, [string], [string[]], [], GuidoLayoutSettings, DOMUIState> {\n    static package = \"Guido\";\n    static description = \"Get Guido Graphic Representation from code\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"string\",\n        description: \"Guido code to compile and display\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"object\",\n        description: \"SVG codes\"\n    }];\n    static props: TPropsMeta<GuidoLayoutSettings> = {\n        systemsDistance: {\n            type: \"number\",\n            default: 75,\n            description: \"System distance\"\n        },\n        systemsDistribution: {\n            type: \"number\",\n            default: 0,\n            description: \"0 = auto, 1 = always, 2 = never\"\n        },\n        systemsDistribLimit: {\n            type: \"number\",\n            default: 25,\n            description: \"Maximum distance\"\n        },\n        force: {\n            type: \"number\",\n            default: 750,\n            description: \"Force\"\n        },\n        spring: {\n            type: \"number\",\n            default: 110,\n            description: \"Spring\"\n        },\n        neighborhoodSpacing: {\n            type: \"number\",\n            default: 0,\n            description: \"Neighborhood spacing, 0 / 1\"\n        },\n        optimalPageFill: {\n            type: \"number\",\n            default: 0,\n            description: \"Optimum page fill, 0 / 1\"\n        },\n        resizePage2Music: {\n            type: \"number\",\n            default: 1,\n            description: \"Resize page to music, 0 / 1\"\n        },\n        proportionalRenderingForceMultiplicator: {\n            type: \"number\",\n            default: 0,\n            description: \"Proportional Rendering Force Multiplicator\"\n        },\n        checkLyricsCollisions: {\n            type: \"number\",\n            default: 0,\n            description: \"Check lyrics collisions\"\n        }\n    };\n    static UI = class extends DOMUI<GuidoView> {\n        state: DOMUIState = { ...this.state, children: this.props.object.state.container ? [this.props.object.state.container] : [] };\n    };\n    state: State = { gmn: undefined, svgs: [], container: undefined, parser: undefined, ar: undefined, gr: undefined };\n    subscribe() {\n        super.subscribe();\n        const processAR = async () => {\n            const guido = this.patcher.env.guidoWorker;\n            const { parser, gmn } = this.state;\n            const ar = await guido.string2AR(parser, gmn);\n            if (this.state.ar) await guido.freeAR(this.state.ar);\n            this.setState({ ar });\n        };\n        const processGR = async () => {\n            const guido = this.patcher.env.guidoWorker;\n            const { parser, ar } = this.state;\n            if (ar) {\n                const { systemsDistance, systemsDistribution, systemsDistribLimit, force, spring, neighborhoodSpacing, optimalPageFill, resizePage2Music, proportionalRenderingForceMultiplicator, checkLyricsCollisions } = this.props;\n                const settings = { systemsDistance, systemsDistribution, systemsDistribLimit, force, spring, neighborhoodSpacing, optimalPageFill, resizePage2Music, proportionalRenderingForceMultiplicator, checkLyricsCollisions };\n                const gr = await guido.ar2grSettings(ar, settings);\n                if (this.state.gr) await guido.freeGR(this.state.gr);\n                this.setState({ gr });\n            } else {\n                const error = await guido.parserGetErrorCode(parser);\n                throw error;\n            }\n        };\n        const processSVG = async () => {\n            const guido = this.patcher.env.guidoWorker;\n            const { gr } = this.state;\n            if (gr) {\n                const pagesCount = await guido.getPageCount(gr);\n                const svgs = await Promise.all(new Array(pagesCount).fill(null).map((v, i) => guido.gr2SVGColored(gr, i + 1, 0, 0, 0, false)));\n                this.setState({ svgs });\n                const template = document.createElement(\"template\");\n                const container = document.createElement(\"div\");\n                template.appendChild(container);\n                for (const svg of svgs) {\n                    const svgContainer = document.createElement(\"div\");\n                    svgContainer.innerHTML = svg;\n                    container.appendChild(svgContainer);\n                }\n                this.setState({ container });\n                this.updateUI({ children: [container] });\n                this.outlet(0, svgs);\n            }\n        };\n        const process = async () => {\n            try {\n                await processAR();\n                await processGR();\n                await processSVG();\n            } catch (error) {\n                this.error(error);\n            }\n        };\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", async () => {\n            const parser = await this.patcher.env.guidoWorker.openParser();\n            this.setState({ parser });\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"string\") {\n                    this.setState({ gmn: data });\n                    process();\n                }\n            }\n        });\n        this.on(\"updateProps\", async () => {\n            if (!this.state.gmn) return;\n            try {\n                await processGR();\n                await processSVG();\n            } catch (error) {\n                this.error(error);\n            }\n        });\n        this.on(\"destroy\", async () => {\n            const guido = this.patcher.env.guidoWorker;\n            const { ar, gr, parser } = this.state;\n            if (ar) await guido.freeAR(ar);\n            if (gr) await guido.freeGR(gr);\n            if (parser) await guido.closeParser(parser);\n        });\n    }\n}\n"],"sourceRoot":""}