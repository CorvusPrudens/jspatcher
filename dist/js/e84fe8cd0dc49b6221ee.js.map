{"version":3,"sources":["webpack://JSPatcher/./src/core/objects/guido/view.tsx"],"names":["GuidoView","UIObject","svgs","container","undefined","parser","ar","gr","subscribe","process","gmn","guido","patcher","env","guidoWorker","state","freeAR","freeGR","setState","string2AR","systemsDistance","systemsDistribution","systemsDistribLimit","force","spring","neighborhoodSpacing","optimalPageFill","resizePage2Music","proportionalRenderingForceMultiplicator","checkLyricsCollisions","props","settings","ar2grSettings","error","parserGetErrorCode","pagesCount","getPageCount","Promise","all","Array","fill","map","v","i","gr2SVGColored","template","document","createElement","appendChild","svg","svgContainer","innerHTML","updateUI","children","on","inlets","outlets","openParser","data","inlet","closeParser","isHot","type","description","default","DOMUI","object"],"mappings":"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","file":"js/e84fe8cd0dc49b6221ee.js","sourcesContent":["import { TMeta, TPropsMeta } from \"../../types\";\nimport { DOMUI, DOMUIState } from \"../BaseUI\";\nimport UIObject from \"../UI/Base\";\n\ninterface State {\n    svgs: string[];\n    container: HTMLDivElement;\n    parser: $GuidoParser;\n    ar: $ARHandler;\n    gr: $GRHandler;\n}\n\nexport default class GuidoView extends UIObject<{}, State, [string], [string], [], GuidoLayoutSettings, DOMUIState> {\n    static package = \"Guido\";\n    static description = \"Get Guido Graphic Representation from code\";\n    static inlets: TMeta[\"inlets\"] = [{\n        isHot: true,\n        type: \"string\",\n        description: \"Guido code to compile and display\"\n    }];\n    static outlets: TMeta[\"outlets\"] = [{\n        type: \"string\",\n        description: \"SVG code\"\n    }];\n    static props: TPropsMeta<GuidoLayoutSettings> = {\n        systemsDistance: {\n            type: \"number\",\n            default: 75,\n            description: \"System distance\"\n        },\n        systemsDistribution: {\n            type: \"number\",\n            default: 0,\n            description: \"0 = auto, 1 = always, 2 = never\"\n        },\n        systemsDistribLimit: {\n            type: \"number\",\n            default: 25,\n            description: \"Maximum distance\"\n        },\n        force: {\n            type: \"number\",\n            default: 750,\n            description: \"Force\"\n        },\n        spring: {\n            type: \"number\",\n            default: 110,\n            description: \"Spring\"\n        },\n        neighborhoodSpacing: {\n            type: \"number\",\n            default: 0,\n            description: \"Neighborhood spacing, 0 / 1\"\n        },\n        optimalPageFill: {\n            type: \"number\",\n            default: 0,\n            description: \"Optimum page fill, 0 / 1\"\n        },\n        resizePage2Music: {\n            type: \"number\",\n            default: 1,\n            description: \"Resize page to music, 0 / 1\"\n        },\n        proportionalRenderingForceMultiplicator: {\n            type: \"number\",\n            default: 0,\n            description: \"Proportional Rendering Force Multiplicator\"\n        },\n        checkLyricsCollisions: {\n            type: \"number\",\n            default: 0,\n            description: \"Check lyrics collisions\"\n        }\n    };\n    static UI = class extends DOMUI<GuidoView> {\n        state: DOMUIState = { ...this.state, children: this.props.object.state.container ? [this.props.object.state.container] : [] };\n    };\n    state: State = { svgs: [], container: undefined, parser: undefined, ar: undefined, gr: undefined };\n    subscribe() {\n        super.subscribe();\n        const process = async (gmn: string) => {\n            const guido = this.patcher.env.guidoWorker;\n            const { parser } = this.state;\n            let { ar, gr } = this.state;\n            if (ar) await guido.freeAR(ar);\n            if (gr) await guido.freeGR(gr);\n            this.setState({ ar: undefined, gr: undefined });\n            ar = await guido.string2AR(parser, gmn);\n            this.setState({ ar });\n            if (ar) {\n                const { systemsDistance, systemsDistribution, systemsDistribLimit, force, spring, neighborhoodSpacing, optimalPageFill, resizePage2Music, proportionalRenderingForceMultiplicator, checkLyricsCollisions } = this.props;\n                const settings = { systemsDistance, systemsDistribution, systemsDistribLimit, force, spring, neighborhoodSpacing, optimalPageFill, resizePage2Music, proportionalRenderingForceMultiplicator, checkLyricsCollisions };\n                gr = await guido.ar2grSettings(this.state.ar, settings);\n                this.setState({ gr });\n            } else {\n                const error = await guido.parserGetErrorCode(parser);\n                this.error(error);\n                return;\n            }\n            if (gr) {\n                const pagesCount = await guido.getPageCount(gr);\n                const svgs = await Promise.all(new Array(pagesCount).fill(null).map((v, i) => guido.gr2SVGColored(gr, i + 1, 0, 0, 0, false)));\n                this.setState({ svgs });\n                const template = document.createElement(\"template\");\n                const container = document.createElement(\"div\");\n                template.appendChild(container);\n                for (const svg of svgs) {\n                    const svgContainer = document.createElement(\"div\");\n                    svgContainer.innerHTML = svg;\n                    container.appendChild(svgContainer);\n                }\n                this.setState({ container });\n                this.updateUI({ children: [container] });\n            }\n        };\n        this.on(\"postInit\", () => {\n            this.inlets = 1;\n            this.outlets = 1;\n        });\n        this.on(\"postInit\", async () => {\n            const parser = await this.patcher.env.guidoWorker.openParser();\n            this.setState({ parser });\n        });\n        this.on(\"inlet\", ({ data, inlet }) => {\n            if (inlet === 0) {\n                if (typeof data === \"string\") {\n                    process(data);\n                }\n            }\n        });\n        this.on(\"destroy\", async () => {\n            const guido = this.patcher.env.guidoWorker;\n            const { ar, gr, parser } = this.state;\n            if (ar) await guido.freeAR(ar);\n            if (gr) await guido.freeGR(gr);\n            if (parser) await guido.closeParser(parser);\n        });\n    }\n}\n"],"sourceRoot":""}